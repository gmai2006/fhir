/*
 * #%L
 * FHIR Implementation
 * %%
 * Copyright (C) 2018 DataScience 9 LLC
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
 
/**
 * This code is 100% AUTO generated. Please do not modify it DIRECTLY
 * If you need new features or function or changes please update the templates
 * then submit the template through our web interface.  
 */

package org.fhir.pojo;
import com.google.gson.GsonBuilder;

/**
* "A set of rules of how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts."
*/
public class ImplementationGuidePage  extends BackboneElement  {
  /**
  * Description: "The source address for the page."
  */
  protected String source;

  /**
  * Description: "Extensions for source"
  */
  protected transient Element _source;

  /**
  * Description: "A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc."
  */
  protected String title;

  /**
  * Description: "Extensions for title"
  */
  protected transient Element _title;

  /**
  * Description: "The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest."
  */
  protected String kind;

  /**
  * Description: "Extensions for kind"
  */
  protected transient Element _kind;

  /**
  * Description: "For constructed pages, what kind of resources to include in the list."
  */
  protected java.util.List<String> type = new java.util.ArrayList<>();

  /**
  * Description: "Extensions for type"
  */
  protected transient java.util.List<Element> _type = new java.util.ArrayList<>();

  /**
  * Description: "For constructed pages, a list of packages to include in the page (or else empty for everything)."
  */
  protected java.util.List<String> FHIRpackage = new java.util.ArrayList<>();

  /**
  * Description: "Extensions for package"
  */
  protected transient java.util.List<Element> _package = new java.util.ArrayList<>();

  /**
  * Description: "The format of the page."
  */
  @javax.validation.constraints.Pattern(regexp="[^\\s]+([\\s]?[^\\s]+)*")
  protected String format;

  /**
  * Description: "Extensions for format"
  */
  protected transient Element _format;

  /**
  * Description: "Nested Pages/Sections under this page."
  */
  protected java.util.List<ImplementationGuidePage> page = new java.util.ArrayList<>();

  public ImplementationGuidePage() {}

  public void setSource( String value) {
    this.source = value;
  }
  public String getSource() {
    return this.source;
  }
  public void set_source( Element value) {
    this._source = value;
  }
  public Element get_source() {
    return this._source;
  }
  public void setTitle( String value) {
    this.title = value;
  }
  public String getTitle() {
    return this.title;
  }
  public void set_title( Element value) {
    this._title = value;
  }
  public Element get_title() {
    return this._title;
  }
  public void setKind( String value) {
    this.kind = KindEnum.fromCode(value);
  }
  public String getKind() {
    return this.kind;
  }
  public void set_kind( Element value) {
    this._kind = value;
  }
  public Element get_kind() {
    return this._kind;
  }
  public void setType( java.util.List<String> value) {
    this.type = value;
  }
  public java.util.List<String> getType() {
    return this.type;
  }
  public void set_type( java.util.List<Element> value) {
    this._type = value;
  }
  public java.util.List<Element> get_type() {
    return this._type;
  }
  public void setFHIRpackage( java.util.List<String> value) {
    this.FHIRpackage = value;
  }
  public java.util.List<String> getFHIRpackage() {
    return this.FHIRpackage;
  }
  public void set_package( java.util.List<Element> value) {
    this._package = value;
  }
  public java.util.List<Element> get_package() {
    return this._package;
  }
  public void setFormat( String value) {
    this.format = value;
  }
  public String getFormat() {
    return this.format;
  }
  public void set_format( Element value) {
    this._format = value;
  }
  public Element get_format() {
    return this._format;
  }
  public void setPage( java.util.List<ImplementationGuidePage> value) {
    this.page = value;
  }
  public java.util.List<ImplementationGuidePage> getPage() {
    return this.page;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append("[ImplementationGuidePage]:" + "\n");
     if(this.source != null) builder.append("source" + "->" + this.source.toString() + "\n"); 
     if(this._source != null) builder.append("_source" + "->" + this._source.toString() + "\n"); 
     if(this.title != null) builder.append("title" + "->" + this.title.toString() + "\n"); 
     if(this._title != null) builder.append("_title" + "->" + this._title.toString() + "\n"); 
     if(this.kind != null) builder.append("kind" + "->" + this.kind.toString() + "\n"); 
     if(this._kind != null) builder.append("_kind" + "->" + this._kind.toString() + "\n"); 
     if(this.type != null) builder.append("type" + "->" + this.type.toString() + "\n"); 
     if(this._type != null) builder.append("_type" + "->" + this._type.toString() + "\n"); 
     if(this.FHIRpackage != null) builder.append("FHIRpackage" + "->" + this.FHIRpackage.toString() + "\n"); 
     if(this._package != null) builder.append("_package" + "->" + this._package.toString() + "\n"); 
     if(this.format != null) builder.append("format" + "->" + this.format.toString() + "\n"); 
     if(this._format != null) builder.append("_format" + "->" + this._format.toString() + "\n"); 
     if(this.page != null) builder.append("page" + "->" + this.page.toString() + "\n"); ;
    return builder.toString();
  }

  public enum KindEnum {
  	page,
  	example,
  	list,
  	include,
  	directory,
  	dictionary,
  	toc,
  	resource,
  	UNKNOWN;
  	public static String fromCode(String strVal) {
  		switch (strVal) {
  			case "page" : { return page.toString(); }
  			case "example" : { return example.toString(); }
  			case "list" : { return list.toString(); }
  			case "include" : { return include.toString(); }
  			case "directory" : { return directory.toString(); }
  			case "dictionary" : { return dictionary.toString(); }
  			case "toc" : { return toc.toString(); }
  			case "resource" : { return resource.toString(); }
  			default:
  			throw new IllegalArgumentException("Unknown resource type ["+ strVal + "]");
  		}
  	}
  }
}