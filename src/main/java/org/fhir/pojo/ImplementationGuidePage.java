/*
 * #%L
 * FHIR Implementation
 * %%
 * Copyright (C) 2018 DataScience 9 LLC
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
 
/**
 * This code is 100% AUTO generated. Please do not modify it DIRECTLY
 * If you need new features or function or changes please update the templates
 * then submit the template through our web interface.  
 */

package org.fhir.pojo;
import com.google.gson.GsonBuilder;

/**
* "A set of rules of how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts."
*/
public class ImplementationGuidePage  {
  /**
  * Description: "The source address for the page."
  */
  private String source;

  /**
  * Description: "Extensions for source"
  */
  private transient Element _source;

  /**
  * Description: "A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc."
  */
  private String title;

  /**
  * Description: "Extensions for title"
  */
  private transient Element _title;

  /**
  * Description: "The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest."
  */
  private String kind;

  /**
  * Description: "Extensions for kind"
  */
  private transient Element _kind;

  /**
  * Description: "For constructed pages, what kind of resources to include in the list."
  */
  private java.util.List<String> type = new java.util.ArrayList<>();

  /**
  * Description: "Extensions for type"
  */
  private transient java.util.List<Element> _type = new java.util.ArrayList<>();

  /**
  * Description: "For constructed pages, a list of packages to include in the page (or else empty for everything)."
  */
  private java.util.List<String> FHIRpackage = new java.util.ArrayList<>();

  /**
  * Description: "Extensions for package"
  */
  private transient java.util.List<Element> _package = new java.util.ArrayList<>();

  /**
  * Description: "The format of the page."
  */
  @javax.validation.constraints.Pattern(regexp="[^\\s]+([\\s]?[^\\s]+)*")
  private String format;

  /**
  * Description: "Extensions for format"
  */
  private transient Element _format;

  /**
  * Description: "Nested Pages/Sections under this page."
  */
  private java.util.List<ImplementationGuidePage> page = new java.util.ArrayList<>();

  /**
  * Description: "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions."
   derived from BackboneElement
  */
  private java.util.List<Extension> modifierExtension = new java.util.ArrayList<>();

  /**
  * Description: "unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces."
   derived from Element
   derived from BackboneElement
  */
  private String id;

  /**
  * Description: "Extensions for id"
   derived from Element
   derived from BackboneElement
  */
  private transient Element _id;

  /**
  * Description: "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."
   derived from Element
   derived from BackboneElement
  */
  private java.util.List<Extension> extension = new java.util.ArrayList<>();

  public ImplementationGuidePage() {}

  public void setSource( String value) {
    this.source = value;
  }
  public String getSource() {
    return this.source;
  }
  public void set_source( Element value) {
    this._source = value;
  }
  public Element get_source() {
    return this._source;
  }
  public void setTitle( String value) {
    this.title = value;
  }
  public String getTitle() {
    return this.title;
  }
  public void set_title( Element value) {
    this._title = value;
  }
  public Element get_title() {
    return this._title;
  }
  public void setKind( String value) {
    this.kind = KindEnum.fromCode(value);
  }
  public String getKind() {
    return this.kind;
  }
  public void set_kind( Element value) {
    this._kind = value;
  }
  public Element get_kind() {
    return this._kind;
  }
  public void setType( java.util.List<String> value) {
    this.type = value;
  }
  public java.util.List<String> getType() {
    return this.type;
  }
  public void set_type( java.util.List<Element> value) {
    this._type = value;
  }
  public java.util.List<Element> get_type() {
    return this._type;
  }
  public void setFHIRpackage( java.util.List<String> value) {
    this.FHIRpackage = value;
  }
  public java.util.List<String> getFHIRpackage() {
    return this.FHIRpackage;
  }
  public void set_package( java.util.List<Element> value) {
    this._package = value;
  }
  public java.util.List<Element> get_package() {
    return this._package;
  }
  public void setFormat( String value) {
    this.format = value;
  }
  public String getFormat() {
    return this.format;
  }
  public void set_format( Element value) {
    this._format = value;
  }
  public Element get_format() {
    return this._format;
  }
  public void setPage( java.util.List<ImplementationGuidePage> value) {
    this.page = value;
  }
  public java.util.List<ImplementationGuidePage> getPage() {
    return this.page;
  }
  public void setModifierExtension( java.util.List<Extension> value) {
    this.modifierExtension = value;
  }
  public java.util.List<Extension> getModifierExtension() {
    return this.modifierExtension;
  }
  public void setId( String value) {
    this.id = value;
  }
  public String getId() {
    return this.id;
  }
  public void set_id( Element value) {
    this._id = value;
  }
  public Element get_id() {
    return this._id;
  }
  public void setExtension( java.util.List<Extension> value) {
    this.extension = value;
  }
  public java.util.List<Extension> getExtension() {
    return this.extension;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
     builder.append("source" + "[" + String.valueOf(this.source) + "]\n"); 
     builder.append("_source" + "[" + String.valueOf(this._source) + "]\n"); 
     builder.append("title" + "[" + String.valueOf(this.title) + "]\n"); 
     builder.append("_title" + "[" + String.valueOf(this._title) + "]\n"); 
     builder.append("kind" + "[" + String.valueOf(this.kind) + "]\n"); 
     builder.append("_kind" + "[" + String.valueOf(this._kind) + "]\n"); 
     builder.append("type" + "[" + String.valueOf(this.type) + "]\n"); 
     builder.append("_type" + "[" + String.valueOf(this._type) + "]\n"); 
     builder.append("FHIRpackage" + "[" + String.valueOf(this.FHIRpackage) + "]\n"); 
     builder.append("_package" + "[" + String.valueOf(this._package) + "]\n"); 
     builder.append("format" + "[" + String.valueOf(this.format) + "]\n"); 
     builder.append("_format" + "[" + String.valueOf(this._format) + "]\n"); 
     builder.append("page" + "[" + String.valueOf(this.page) + "]\n"); 
     builder.append("modifierExtension" + "[" + String.valueOf(this.modifierExtension) + "]\n"); 
     builder.append("id" + "[" + String.valueOf(this.id) + "]\n"); 
     builder.append("_id" + "[" + String.valueOf(this._id) + "]\n"); 
     builder.append("extension" + "[" + String.valueOf(this.extension) + "]\n"); ;
    return builder.toString();
  }

  public static ImplementationGuidePage fromJson(String json) {
    if (null == json) return null;
    return new GsonBuilder().create().fromJson(json, ImplementationGuidePage.class);
  }

  public static java.util.List fromArray(String json) {
    if (null == json) return null;
    return new GsonBuilder().create().fromJson(json, java.util.List.class);
  }

  public static String toJson(ImplementationGuidePage o) {
    if (null == o) return null;
    return new GsonBuilder().create().toJson(o);
  }

  public static String toJson(java.util.List<ImplementationGuidePage> o) {
    if (null == o) return null;
    return new GsonBuilder().create().toJson(o);
  }

  public enum KindEnum {
  	page,
  	example,
  	list,
  	include,
  	directory,
  	dictionary,
  	toc,
  	resource,
  	UNKNOWN;
  	public static String fromCode(String strVal) {
  		switch (strVal) {
  			case "page" : { return page.toString(); }
  			case "example" : { return example.toString(); }
  			case "list" : { return list.toString(); }
  			case "include" : { return include.toString(); }
  			case "directory" : { return directory.toString(); }
  			case "dictionary" : { return dictionary.toString(); }
  			case "toc" : { return toc.toString(); }
  			case "resource" : { return resource.toString(); }
  			default:
  			throw new IllegalArgumentException("Unknown resource type ["+ strVal + "]");
  		}
  	}
  }
}