/*
 * #%L
 * FHIR Implementation
 * %%
 * Copyright (C) 2018 DataScience 9 LLC
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
 
/**
 * This code is 100% AUTO generated. Please do not modify it DIRECTLY
 * If you need new features or function or changes please update the templates
 * then submit the template through our web interface.  
 */

package org.fhir.pojo;
import com.google.gson.GsonBuilder;
import com.fasterxml.jackson.annotation.JsonInclude;
/**
* "Captures constraints on each element within the resource, profile, or extension."
* generated on 07/14/2018
*/
@JsonInclude(JsonInclude.Include.NON_NULL)
public class ElementDefinition  extends Element  {
  /**
  * Description: "The path identifies the element and is expressed as a \".\"-separated list of ancestor elements, beginning with the name of the resource or extension."
  */
  protected String path;

  /**
  * Description: "Extensions for path"
  */
  protected transient Element _path;

  /**
  * Description: "Codes that define how this element is represented in instances, when the deviation varies from the normal case."
  */
  protected java.util.List<String> representation;

  /**
  * Description: "Extensions for representation"
  */
  protected transient java.util.List<Element> _representation;

  /**
  * Description: "The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element."
  */
  protected String sliceName;

  /**
  * Description: "Extensions for sliceName"
  */
  protected transient Element _sliceName;

  /**
  * Description: "A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form."
  */
  protected String label;

  /**
  * Description: "Extensions for label"
  */
  protected transient Element _label;

  /**
  * Description: "A code that has the same meaning as the element in a particular terminology."
  */
  protected java.util.List<Coding> code;

  /**
  * Description: "Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set)."
  */
  protected ElementDefinitionSlicing slicing;

  /**
  * Description: "A concise description of what this element means (e.g. for use in autogenerated summaries)."
  */
  protected String FHIRshort;

  /**
  * Description: "Extensions for short"
  */
  protected transient Element _short;

  /**
  * Description: "Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource."
  */
  protected String definition;

  /**
  * Description: "Extensions for definition"
  */
  protected transient Element _definition;

  /**
  * Description: "Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc."
  */
  protected String comment;

  /**
  * Description: "Extensions for comment"
  */
  protected transient Element _comment;

  /**
  * Description: "This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element."
  */
  protected String requirements;

  /**
  * Description: "Extensions for requirements"
  */
  protected transient Element _requirements;

  /**
  * Description: "Identifies additional names by which this element might also be known."
  */
  protected java.util.List<String> alias;

  /**
  * Description: "Extensions for alias"
  */
  protected transient java.util.List<Element> _alias;

  /**
  * Description: "The minimum number of times this element SHALL appear in the instance."
  */
  @javax.validation.constraints.Pattern(regexp="[0]|([1-9][0-9]*)")
  protected Float min;

  /**
  * Description: "Extensions for min"
  */
  protected transient Element _min;

  /**
  * Description: "The maximum number of times this element is permitted to appear in the instance."
  */
  protected String max;

  /**
  * Description: "Extensions for max"
  */
  protected transient Element _max;

  /**
  * Description: "Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. This information is provided when the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot."
  */
  protected ElementDefinitionBase base;

  /**
  * Description: "Identifies the identity of an element defined elsewhere in the profile whose content rules should be applied to the current element."
  */
  protected String contentReference;

  /**
  * Description: "Extensions for contentReference"
  */
  protected transient Element _contentReference;

  /**
  * Description: "The data type or resource that the value of this element is permitted to be."
  */
  protected java.util.List<ElementDefinitionType> type;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Boolean defaultValueBoolean;

  /**
  * Description: "Extensions for defaultValueBoolean"
  */
  protected transient Element _defaultValueBoolean;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  @javax.validation.constraints.Pattern(regexp="-?([0]|([1-9][0-9]*))")
  protected Float defaultValueInteger;

  /**
  * Description: "Extensions for defaultValueInteger"
  */
  protected transient Element _defaultValueInteger;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  @javax.validation.constraints.Pattern(regexp="-?([0]|([1-9][0-9]*))(\\.[0-9]+)?")
  protected Float defaultValueDecimal;

  /**
  * Description: "Extensions for defaultValueDecimal"
  */
  protected transient Element _defaultValueDecimal;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected String defaultValueBase64Binary;

  /**
  * Description: "Extensions for defaultValueBase64Binary"
  */
  protected transient Element _defaultValueBase64Binary;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected String defaultValueInstant;

  /**
  * Description: "Extensions for defaultValueInstant"
  */
  protected transient Element _defaultValueInstant;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected String defaultValueString;

  /**
  * Description: "Extensions for defaultValueString"
  */
  protected transient Element _defaultValueString;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected String defaultValueUri;

  /**
  * Description: "Extensions for defaultValueUri"
  */
  protected transient Element _defaultValueUri;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  @javax.validation.constraints.Pattern(regexp="-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?")
  protected String defaultValueDate;

  /**
  * Description: "Extensions for defaultValueDate"
  */
  protected transient Element _defaultValueDate;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  @javax.validation.constraints.Pattern(regexp="-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?")
  protected String defaultValueDateTime;

  /**
  * Description: "Extensions for defaultValueDateTime"
  */
  protected transient Element _defaultValueDateTime;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  @javax.validation.constraints.Pattern(regexp="([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?")
  protected String defaultValueTime;

  /**
  * Description: "Extensions for defaultValueTime"
  */
  protected transient Element _defaultValueTime;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  @javax.validation.constraints.Pattern(regexp="[^\\s]+([\\s]?[^\\s]+)*")
  protected String defaultValueCode;

  /**
  * Description: "Extensions for defaultValueCode"
  */
  protected transient Element _defaultValueCode;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  @javax.validation.constraints.Pattern(regexp="urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*")
  protected String defaultValueOid;

  /**
  * Description: "Extensions for defaultValueOid"
  */
  protected transient Element _defaultValueOid;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  @javax.validation.constraints.Pattern(regexp="urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}")
  protected String defaultValueUuid;

  /**
  * Description: "Extensions for defaultValueUuid"
  */
  protected transient Element _defaultValueUuid;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  @javax.validation.constraints.Pattern(regexp="[A-Za-z0-9\\-\\.]{1,64}")
  protected String defaultValueId;

  /**
  * Description: "Extensions for defaultValueId"
  */
  protected transient Element _defaultValueId;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  @javax.validation.constraints.Pattern(regexp="[0]|([1-9][0-9]*)")
  protected Float defaultValueUnsignedInt;

  /**
  * Description: "Extensions for defaultValueUnsignedInt"
  */
  protected transient Element _defaultValueUnsignedInt;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  @javax.validation.constraints.Pattern(regexp="[1-9][0-9]*")
  protected Float defaultValuePositiveInt;

  /**
  * Description: "Extensions for defaultValuePositiveInt"
  */
  protected transient Element _defaultValuePositiveInt;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected String defaultValueMarkdown;

  /**
  * Description: "Extensions for defaultValueMarkdown"
  */
  protected transient Element _defaultValueMarkdown;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Element defaultValueElement;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Extension defaultValueExtension;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected BackboneElement defaultValueBackboneElement;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Narrative defaultValueNarrative;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Annotation defaultValueAnnotation;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Attachment defaultValueAttachment;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Identifier defaultValueIdentifier;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected CodeableConcept defaultValueCodeableConcept;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Coding defaultValueCoding;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Quantity defaultValueQuantity;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Duration defaultValueDuration;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Quantity defaultValueSimpleQuantity;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Distance defaultValueDistance;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Count defaultValueCount;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Money defaultValueMoney;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Age defaultValueAge;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Range defaultValueRange;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Period defaultValuePeriod;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Ratio defaultValueRatio;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Reference defaultValueReference;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected SampledData defaultValueSampledData;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Signature defaultValueSignature;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected HumanName defaultValueHumanName;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Address defaultValueAddress;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected ContactPoint defaultValueContactPoint;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Timing defaultValueTiming;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Meta defaultValueMeta;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected ElementDefinition defaultValueElementDefinition;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected ContactDetail defaultValueContactDetail;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Contributor defaultValueContributor;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected Dosage defaultValueDosage;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected RelatedArtifact defaultValueRelatedArtifact;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected UsageContext defaultValueUsageContext;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected DataRequirement defaultValueDataRequirement;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected ParameterDefinition defaultValueParameterDefinition;

  /**
  * Description: "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
  */
  protected TriggerDefinition defaultValueTriggerDefinition;

  /**
  * Description: "The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing'."
  */
  protected String meaningWhenMissing;

  /**
  * Description: "Extensions for meaningWhenMissing"
  */
  protected transient Element _meaningWhenMissing;

  /**
  * Description: "If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning."
  */
  protected String orderMeaning;

  /**
  * Description: "Extensions for orderMeaning"
  */
  protected transient Element _orderMeaning;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Boolean fixedBoolean;

  /**
  * Description: "Extensions for fixedBoolean"
  */
  protected transient Element _fixedBoolean;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  @javax.validation.constraints.Pattern(regexp="-?([0]|([1-9][0-9]*))")
  protected Float fixedInteger;

  /**
  * Description: "Extensions for fixedInteger"
  */
  protected transient Element _fixedInteger;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  @javax.validation.constraints.Pattern(regexp="-?([0]|([1-9][0-9]*))(\\.[0-9]+)?")
  protected Float fixedDecimal;

  /**
  * Description: "Extensions for fixedDecimal"
  */
  protected transient Element _fixedDecimal;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected String fixedBase64Binary;

  /**
  * Description: "Extensions for fixedBase64Binary"
  */
  protected transient Element _fixedBase64Binary;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected String fixedInstant;

  /**
  * Description: "Extensions for fixedInstant"
  */
  protected transient Element _fixedInstant;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected String fixedString;

  /**
  * Description: "Extensions for fixedString"
  */
  protected transient Element _fixedString;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected String fixedUri;

  /**
  * Description: "Extensions for fixedUri"
  */
  protected transient Element _fixedUri;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  @javax.validation.constraints.Pattern(regexp="-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?")
  protected String fixedDate;

  /**
  * Description: "Extensions for fixedDate"
  */
  protected transient Element _fixedDate;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  @javax.validation.constraints.Pattern(regexp="-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?")
  protected String fixedDateTime;

  /**
  * Description: "Extensions for fixedDateTime"
  */
  protected transient Element _fixedDateTime;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  @javax.validation.constraints.Pattern(regexp="([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?")
  protected String fixedTime;

  /**
  * Description: "Extensions for fixedTime"
  */
  protected transient Element _fixedTime;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  @javax.validation.constraints.Pattern(regexp="[^\\s]+([\\s]?[^\\s]+)*")
  protected String fixedCode;

  /**
  * Description: "Extensions for fixedCode"
  */
  protected transient Element _fixedCode;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  @javax.validation.constraints.Pattern(regexp="urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*")
  protected String fixedOid;

  /**
  * Description: "Extensions for fixedOid"
  */
  protected transient Element _fixedOid;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  @javax.validation.constraints.Pattern(regexp="urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}")
  protected String fixedUuid;

  /**
  * Description: "Extensions for fixedUuid"
  */
  protected transient Element _fixedUuid;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  @javax.validation.constraints.Pattern(regexp="[A-Za-z0-9\\-\\.]{1,64}")
  protected String fixedId;

  /**
  * Description: "Extensions for fixedId"
  */
  protected transient Element _fixedId;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  @javax.validation.constraints.Pattern(regexp="[0]|([1-9][0-9]*)")
  protected Float fixedUnsignedInt;

  /**
  * Description: "Extensions for fixedUnsignedInt"
  */
  protected transient Element _fixedUnsignedInt;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  @javax.validation.constraints.Pattern(regexp="[1-9][0-9]*")
  protected Float fixedPositiveInt;

  /**
  * Description: "Extensions for fixedPositiveInt"
  */
  protected transient Element _fixedPositiveInt;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected String fixedMarkdown;

  /**
  * Description: "Extensions for fixedMarkdown"
  */
  protected transient Element _fixedMarkdown;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Element fixedElement;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Extension fixedExtension;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected BackboneElement fixedBackboneElement;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Narrative fixedNarrative;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Annotation fixedAnnotation;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Attachment fixedAttachment;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Identifier fixedIdentifier;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected CodeableConcept fixedCodeableConcept;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Coding fixedCoding;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Quantity fixedQuantity;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Duration fixedDuration;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Quantity fixedSimpleQuantity;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Distance fixedDistance;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Count fixedCount;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Money fixedMoney;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Age fixedAge;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Range fixedRange;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Period fixedPeriod;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Ratio fixedRatio;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Reference fixedReference;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected SampledData fixedSampledData;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Signature fixedSignature;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected HumanName fixedHumanName;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Address fixedAddress;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected ContactPoint fixedContactPoint;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Timing fixedTiming;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Meta fixedMeta;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected ElementDefinition fixedElementDefinition;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected ContactDetail fixedContactDetail;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Contributor fixedContributor;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected Dosage fixedDosage;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected RelatedArtifact fixedRelatedArtifact;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected UsageContext fixedUsageContext;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected DataRequirement fixedDataRequirement;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected ParameterDefinition fixedParameterDefinition;

  /**
  * Description: "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
  */
  protected TriggerDefinition fixedTriggerDefinition;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Boolean patternBoolean;

  /**
  * Description: "Extensions for patternBoolean"
  */
  protected transient Element _patternBoolean;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  @javax.validation.constraints.Pattern(regexp="-?([0]|([1-9][0-9]*))")
  protected Float patternInteger;

  /**
  * Description: "Extensions for patternInteger"
  */
  protected transient Element _patternInteger;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  @javax.validation.constraints.Pattern(regexp="-?([0]|([1-9][0-9]*))(\\.[0-9]+)?")
  protected Float patternDecimal;

  /**
  * Description: "Extensions for patternDecimal"
  */
  protected transient Element _patternDecimal;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected String patternBase64Binary;

  /**
  * Description: "Extensions for patternBase64Binary"
  */
  protected transient Element _patternBase64Binary;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected String patternInstant;

  /**
  * Description: "Extensions for patternInstant"
  */
  protected transient Element _patternInstant;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected String patternString;

  /**
  * Description: "Extensions for patternString"
  */
  protected transient Element _patternString;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected String patternUri;

  /**
  * Description: "Extensions for patternUri"
  */
  protected transient Element _patternUri;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  @javax.validation.constraints.Pattern(regexp="-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?")
  protected String patternDate;

  /**
  * Description: "Extensions for patternDate"
  */
  protected transient Element _patternDate;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  @javax.validation.constraints.Pattern(regexp="-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?")
  protected String patternDateTime;

  /**
  * Description: "Extensions for patternDateTime"
  */
  protected transient Element _patternDateTime;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  @javax.validation.constraints.Pattern(regexp="([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?")
  protected String patternTime;

  /**
  * Description: "Extensions for patternTime"
  */
  protected transient Element _patternTime;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  @javax.validation.constraints.Pattern(regexp="[^\\s]+([\\s]?[^\\s]+)*")
  protected String patternCode;

  /**
  * Description: "Extensions for patternCode"
  */
  protected transient Element _patternCode;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  @javax.validation.constraints.Pattern(regexp="urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*")
  protected String patternOid;

  /**
  * Description: "Extensions for patternOid"
  */
  protected transient Element _patternOid;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  @javax.validation.constraints.Pattern(regexp="urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}")
  protected String patternUuid;

  /**
  * Description: "Extensions for patternUuid"
  */
  protected transient Element _patternUuid;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  @javax.validation.constraints.Pattern(regexp="[A-Za-z0-9\\-\\.]{1,64}")
  protected String patternId;

  /**
  * Description: "Extensions for patternId"
  */
  protected transient Element _patternId;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  @javax.validation.constraints.Pattern(regexp="[0]|([1-9][0-9]*)")
  protected Float patternUnsignedInt;

  /**
  * Description: "Extensions for patternUnsignedInt"
  */
  protected transient Element _patternUnsignedInt;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  @javax.validation.constraints.Pattern(regexp="[1-9][0-9]*")
  protected Float patternPositiveInt;

  /**
  * Description: "Extensions for patternPositiveInt"
  */
  protected transient Element _patternPositiveInt;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected String patternMarkdown;

  /**
  * Description: "Extensions for patternMarkdown"
  */
  protected transient Element _patternMarkdown;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Element patternElement;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Extension patternExtension;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected BackboneElement patternBackboneElement;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Narrative patternNarrative;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Annotation patternAnnotation;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Attachment patternAttachment;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Identifier patternIdentifier;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected CodeableConcept patternCodeableConcept;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Coding patternCoding;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Quantity patternQuantity;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Duration patternDuration;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Quantity patternSimpleQuantity;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Distance patternDistance;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Count patternCount;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Money patternMoney;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Age patternAge;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Range patternRange;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Period patternPeriod;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Ratio patternRatio;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Reference patternReference;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected SampledData patternSampledData;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Signature patternSignature;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected HumanName patternHumanName;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Address patternAddress;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected ContactPoint patternContactPoint;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Timing patternTiming;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Meta patternMeta;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected ElementDefinition patternElementDefinition;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected ContactDetail patternContactDetail;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Contributor patternContributor;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected Dosage patternDosage;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected RelatedArtifact patternRelatedArtifact;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected UsageContext patternUsageContext;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected DataRequirement patternDataRequirement;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected ParameterDefinition patternParameterDefinition;

  /**
  * Description: "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.)."
  */
  protected TriggerDefinition patternTriggerDefinition;

  /**
  * Description: "A sample value for this element demonstrating the type of information that would typically be found in the element."
  */
  protected java.util.List<ElementDefinitionExample> example;

  /**
  * Description: "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  @javax.validation.constraints.Pattern(regexp="-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?")
  protected String minValueDate;

  /**
  * Description: "Extensions for minValueDate"
  */
  protected transient Element _minValueDate;

  /**
  * Description: "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  @javax.validation.constraints.Pattern(regexp="-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?")
  protected String minValueDateTime;

  /**
  * Description: "Extensions for minValueDateTime"
  */
  protected transient Element _minValueDateTime;

  /**
  * Description: "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  protected String minValueInstant;

  /**
  * Description: "Extensions for minValueInstant"
  */
  protected transient Element _minValueInstant;

  /**
  * Description: "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  @javax.validation.constraints.Pattern(regexp="([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?")
  protected String minValueTime;

  /**
  * Description: "Extensions for minValueTime"
  */
  protected transient Element _minValueTime;

  /**
  * Description: "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  @javax.validation.constraints.Pattern(regexp="-?([0]|([1-9][0-9]*))(\\.[0-9]+)?")
  protected Float minValueDecimal;

  /**
  * Description: "Extensions for minValueDecimal"
  */
  protected transient Element _minValueDecimal;

  /**
  * Description: "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  @javax.validation.constraints.Pattern(regexp="-?([0]|([1-9][0-9]*))")
  protected Float minValueInteger;

  /**
  * Description: "Extensions for minValueInteger"
  */
  protected transient Element _minValueInteger;

  /**
  * Description: "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  @javax.validation.constraints.Pattern(regexp="[1-9][0-9]*")
  protected Float minValuePositiveInt;

  /**
  * Description: "Extensions for minValuePositiveInt"
  */
  protected transient Element _minValuePositiveInt;

  /**
  * Description: "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  @javax.validation.constraints.Pattern(regexp="[0]|([1-9][0-9]*)")
  protected Float minValueUnsignedInt;

  /**
  * Description: "Extensions for minValueUnsignedInt"
  */
  protected transient Element _minValueUnsignedInt;

  /**
  * Description: "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  protected Quantity minValueQuantity;

  /**
  * Description: "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  @javax.validation.constraints.Pattern(regexp="-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?")
  protected String maxValueDate;

  /**
  * Description: "Extensions for maxValueDate"
  */
  protected transient Element _maxValueDate;

  /**
  * Description: "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  @javax.validation.constraints.Pattern(regexp="-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?")
  protected String maxValueDateTime;

  /**
  * Description: "Extensions for maxValueDateTime"
  */
  protected transient Element _maxValueDateTime;

  /**
  * Description: "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  protected String maxValueInstant;

  /**
  * Description: "Extensions for maxValueInstant"
  */
  protected transient Element _maxValueInstant;

  /**
  * Description: "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  @javax.validation.constraints.Pattern(regexp="([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?")
  protected String maxValueTime;

  /**
  * Description: "Extensions for maxValueTime"
  */
  protected transient Element _maxValueTime;

  /**
  * Description: "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  @javax.validation.constraints.Pattern(regexp="-?([0]|([1-9][0-9]*))(\\.[0-9]+)?")
  protected Float maxValueDecimal;

  /**
  * Description: "Extensions for maxValueDecimal"
  */
  protected transient Element _maxValueDecimal;

  /**
  * Description: "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  @javax.validation.constraints.Pattern(regexp="-?([0]|([1-9][0-9]*))")
  protected Float maxValueInteger;

  /**
  * Description: "Extensions for maxValueInteger"
  */
  protected transient Element _maxValueInteger;

  /**
  * Description: "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  @javax.validation.constraints.Pattern(regexp="[1-9][0-9]*")
  protected Float maxValuePositiveInt;

  /**
  * Description: "Extensions for maxValuePositiveInt"
  */
  protected transient Element _maxValuePositiveInt;

  /**
  * Description: "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  @javax.validation.constraints.Pattern(regexp="[0]|([1-9][0-9]*)")
  protected Float maxValueUnsignedInt;

  /**
  * Description: "Extensions for maxValueUnsignedInt"
  */
  protected transient Element _maxValueUnsignedInt;

  /**
  * Description: "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
  */
  protected Quantity maxValueQuantity;

  /**
  * Description: "Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element."
  */
  @javax.validation.constraints.Pattern(regexp="-?([0]|([1-9][0-9]*))")
  protected Float maxLength;

  /**
  * Description: "Extensions for maxLength"
  */
  protected transient Element _maxLength;

  /**
  * Description: "A reference to an invariant that may make additional statements about the cardinality or value in the instance."
  */
  protected java.util.List<String> condition;

  /**
  * Description: "Extensions for condition"
  */
  protected transient java.util.List<Element> _condition;

  /**
  * Description: "Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance."
  */
  protected java.util.List<ElementDefinitionConstraint> constraint;

  /**
  * Description: "If true, implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way.  If false, the element may be ignored and not supported."
  */
  protected Boolean mustSupport;

  /**
  * Description: "Extensions for mustSupport"
  */
  protected transient Element _mustSupport;

  /**
  * Description: "If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system."
  */
  protected Boolean isModifier;

  /**
  * Description: "Extensions for isModifier"
  */
  protected transient Element _isModifier;

  /**
  * Description: "Whether the element should be included if a client requests a search with the parameter _summary=true."
  */
  protected Boolean isSummary;

  /**
  * Description: "Extensions for isSummary"
  */
  protected transient Element _isSummary;

  /**
  * Description: "Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri)."
  */
  protected ElementDefinitionBinding binding;

  /**
  * Description: "Identifies a concept from an external specification that roughly corresponds to this element."
  */
  protected java.util.List<ElementDefinitionMapping> mapping;

  public ElementDefinition() {}

  public void setPath( String value) {
    this.path = value;
  }
  public String getPath() {
    return this.path;
  }
  public void set_path( Element value) {
    this._path = value;
  }
  public Element get_path() {
    return this._path;
  }
  public void setRepresentation( java.util.List<String> value) {
    this.representation = RepresentationEnum.fromCode(value);
  }
  public java.util.List<String> getRepresentation() {
    return this.representation;
  }
  public void set_representation( java.util.List<Element> value) {
    this._representation = value;
  }
  public java.util.List<Element> get_representation() {
    return this._representation;
  }
  public void setSliceName( String value) {
    this.sliceName = value;
  }
  public String getSliceName() {
    return this.sliceName;
  }
  public void set_sliceName( Element value) {
    this._sliceName = value;
  }
  public Element get_sliceName() {
    return this._sliceName;
  }
  public void setLabel( String value) {
    this.label = value;
  }
  public String getLabel() {
    return this.label;
  }
  public void set_label( Element value) {
    this._label = value;
  }
  public Element get_label() {
    return this._label;
  }
  public void setCode( java.util.List<Coding> value) {
    this.code = value;
  }
  public java.util.List<Coding> getCode() {
    return this.code;
  }
  public void setSlicing( ElementDefinitionSlicing value) {
    this.slicing = value;
  }
  public ElementDefinitionSlicing getSlicing() {
    return this.slicing;
  }
  public void setFHIRshort( String value) {
    this.FHIRshort = value;
  }
  public String getFHIRshort() {
    return this.FHIRshort;
  }
  public void set_short( Element value) {
    this._short = value;
  }
  public Element get_short() {
    return this._short;
  }
  public void setDefinition( String value) {
    this.definition = value;
  }
  public String getDefinition() {
    return this.definition;
  }
  public void set_definition( Element value) {
    this._definition = value;
  }
  public Element get_definition() {
    return this._definition;
  }
  public void setComment( String value) {
    this.comment = value;
  }
  public String getComment() {
    return this.comment;
  }
  public void set_comment( Element value) {
    this._comment = value;
  }
  public Element get_comment() {
    return this._comment;
  }
  public void setRequirements( String value) {
    this.requirements = value;
  }
  public String getRequirements() {
    return this.requirements;
  }
  public void set_requirements( Element value) {
    this._requirements = value;
  }
  public Element get_requirements() {
    return this._requirements;
  }
  public void setAlias( java.util.List<String> value) {
    this.alias = value;
  }
  public java.util.List<String> getAlias() {
    return this.alias;
  }
  public void set_alias( java.util.List<Element> value) {
    this._alias = value;
  }
  public java.util.List<Element> get_alias() {
    return this._alias;
  }
  public void setMin( Float value) {
    this.min = value;
  }
  public Float getMin() {
    return this.min;
  }
  public void set_min( Element value) {
    this._min = value;
  }
  public Element get_min() {
    return this._min;
  }
  public void setMax( String value) {
    this.max = value;
  }
  public String getMax() {
    return this.max;
  }
  public void set_max( Element value) {
    this._max = value;
  }
  public Element get_max() {
    return this._max;
  }
  public void setBase( ElementDefinitionBase value) {
    this.base = value;
  }
  public ElementDefinitionBase getBase() {
    return this.base;
  }
  public void setContentReference( String value) {
    this.contentReference = value;
  }
  public String getContentReference() {
    return this.contentReference;
  }
  public void set_contentReference( Element value) {
    this._contentReference = value;
  }
  public Element get_contentReference() {
    return this._contentReference;
  }
  public void setType( java.util.List<ElementDefinitionType> value) {
    this.type = value;
  }
  public java.util.List<ElementDefinitionType> getType() {
    return this.type;
  }
  public void setDefaultValueBoolean( Boolean value) {
    this.defaultValueBoolean = value;
  }
  public Boolean getDefaultValueBoolean() {
    return this.defaultValueBoolean;
  }
  public void set_defaultValueBoolean( Element value) {
    this._defaultValueBoolean = value;
  }
  public Element get_defaultValueBoolean() {
    return this._defaultValueBoolean;
  }
  public void setDefaultValueInteger( Float value) {
    this.defaultValueInteger = value;
  }
  public Float getDefaultValueInteger() {
    return this.defaultValueInteger;
  }
  public void set_defaultValueInteger( Element value) {
    this._defaultValueInteger = value;
  }
  public Element get_defaultValueInteger() {
    return this._defaultValueInteger;
  }
  public void setDefaultValueDecimal( Float value) {
    this.defaultValueDecimal = value;
  }
  public Float getDefaultValueDecimal() {
    return this.defaultValueDecimal;
  }
  public void set_defaultValueDecimal( Element value) {
    this._defaultValueDecimal = value;
  }
  public Element get_defaultValueDecimal() {
    return this._defaultValueDecimal;
  }
  public void setDefaultValueBase64Binary( String value) {
    this.defaultValueBase64Binary = value;
  }
  public String getDefaultValueBase64Binary() {
    return this.defaultValueBase64Binary;
  }
  public void set_defaultValueBase64Binary( Element value) {
    this._defaultValueBase64Binary = value;
  }
  public Element get_defaultValueBase64Binary() {
    return this._defaultValueBase64Binary;
  }
  public void setDefaultValueInstant( String value) {
    this.defaultValueInstant = value;
  }
  public String getDefaultValueInstant() {
    return this.defaultValueInstant;
  }
  public void set_defaultValueInstant( Element value) {
    this._defaultValueInstant = value;
  }
  public Element get_defaultValueInstant() {
    return this._defaultValueInstant;
  }
  public void setDefaultValueString( String value) {
    this.defaultValueString = value;
  }
  public String getDefaultValueString() {
    return this.defaultValueString;
  }
  public void set_defaultValueString( Element value) {
    this._defaultValueString = value;
  }
  public Element get_defaultValueString() {
    return this._defaultValueString;
  }
  public void setDefaultValueUri( String value) {
    this.defaultValueUri = value;
  }
  public String getDefaultValueUri() {
    return this.defaultValueUri;
  }
  public void set_defaultValueUri( Element value) {
    this._defaultValueUri = value;
  }
  public Element get_defaultValueUri() {
    return this._defaultValueUri;
  }
  public void setDefaultValueDate( String value) {
    this.defaultValueDate = value;
  }
  public String getDefaultValueDate() {
    return this.defaultValueDate;
  }
  public void set_defaultValueDate( Element value) {
    this._defaultValueDate = value;
  }
  public Element get_defaultValueDate() {
    return this._defaultValueDate;
  }
  public void setDefaultValueDateTime( String value) {
    this.defaultValueDateTime = value;
  }
  public String getDefaultValueDateTime() {
    return this.defaultValueDateTime;
  }
  public void set_defaultValueDateTime( Element value) {
    this._defaultValueDateTime = value;
  }
  public Element get_defaultValueDateTime() {
    return this._defaultValueDateTime;
  }
  public void setDefaultValueTime( String value) {
    this.defaultValueTime = value;
  }
  public String getDefaultValueTime() {
    return this.defaultValueTime;
  }
  public void set_defaultValueTime( Element value) {
    this._defaultValueTime = value;
  }
  public Element get_defaultValueTime() {
    return this._defaultValueTime;
  }
  public void setDefaultValueCode( String value) {
    this.defaultValueCode = value;
  }
  public String getDefaultValueCode() {
    return this.defaultValueCode;
  }
  public void set_defaultValueCode( Element value) {
    this._defaultValueCode = value;
  }
  public Element get_defaultValueCode() {
    return this._defaultValueCode;
  }
  public void setDefaultValueOid( String value) {
    this.defaultValueOid = value;
  }
  public String getDefaultValueOid() {
    return this.defaultValueOid;
  }
  public void set_defaultValueOid( Element value) {
    this._defaultValueOid = value;
  }
  public Element get_defaultValueOid() {
    return this._defaultValueOid;
  }
  public void setDefaultValueUuid( String value) {
    this.defaultValueUuid = value;
  }
  public String getDefaultValueUuid() {
    return this.defaultValueUuid;
  }
  public void set_defaultValueUuid( Element value) {
    this._defaultValueUuid = value;
  }
  public Element get_defaultValueUuid() {
    return this._defaultValueUuid;
  }
  public void setDefaultValueId( String value) {
    this.defaultValueId = value;
  }
  public String getDefaultValueId() {
    return this.defaultValueId;
  }
  public void set_defaultValueId( Element value) {
    this._defaultValueId = value;
  }
  public Element get_defaultValueId() {
    return this._defaultValueId;
  }
  public void setDefaultValueUnsignedInt( Float value) {
    this.defaultValueUnsignedInt = value;
  }
  public Float getDefaultValueUnsignedInt() {
    return this.defaultValueUnsignedInt;
  }
  public void set_defaultValueUnsignedInt( Element value) {
    this._defaultValueUnsignedInt = value;
  }
  public Element get_defaultValueUnsignedInt() {
    return this._defaultValueUnsignedInt;
  }
  public void setDefaultValuePositiveInt( Float value) {
    this.defaultValuePositiveInt = value;
  }
  public Float getDefaultValuePositiveInt() {
    return this.defaultValuePositiveInt;
  }
  public void set_defaultValuePositiveInt( Element value) {
    this._defaultValuePositiveInt = value;
  }
  public Element get_defaultValuePositiveInt() {
    return this._defaultValuePositiveInt;
  }
  public void setDefaultValueMarkdown( String value) {
    this.defaultValueMarkdown = value;
  }
  public String getDefaultValueMarkdown() {
    return this.defaultValueMarkdown;
  }
  public void set_defaultValueMarkdown( Element value) {
    this._defaultValueMarkdown = value;
  }
  public Element get_defaultValueMarkdown() {
    return this._defaultValueMarkdown;
  }
  public void setDefaultValueElement( Element value) {
    this.defaultValueElement = value;
  }
  public Element getDefaultValueElement() {
    return this.defaultValueElement;
  }
  public void setDefaultValueExtension( Extension value) {
    this.defaultValueExtension = value;
  }
  public Extension getDefaultValueExtension() {
    return this.defaultValueExtension;
  }
  public void setDefaultValueBackboneElement( BackboneElement value) {
    this.defaultValueBackboneElement = value;
  }
  public BackboneElement getDefaultValueBackboneElement() {
    return this.defaultValueBackboneElement;
  }
  public void setDefaultValueNarrative( Narrative value) {
    this.defaultValueNarrative = value;
  }
  public Narrative getDefaultValueNarrative() {
    return this.defaultValueNarrative;
  }
  public void setDefaultValueAnnotation( Annotation value) {
    this.defaultValueAnnotation = value;
  }
  public Annotation getDefaultValueAnnotation() {
    return this.defaultValueAnnotation;
  }
  public void setDefaultValueAttachment( Attachment value) {
    this.defaultValueAttachment = value;
  }
  public Attachment getDefaultValueAttachment() {
    return this.defaultValueAttachment;
  }
  public void setDefaultValueIdentifier( Identifier value) {
    this.defaultValueIdentifier = value;
  }
  public Identifier getDefaultValueIdentifier() {
    return this.defaultValueIdentifier;
  }
  public void setDefaultValueCodeableConcept( CodeableConcept value) {
    this.defaultValueCodeableConcept = value;
  }
  public CodeableConcept getDefaultValueCodeableConcept() {
    return this.defaultValueCodeableConcept;
  }
  public void setDefaultValueCoding( Coding value) {
    this.defaultValueCoding = value;
  }
  public Coding getDefaultValueCoding() {
    return this.defaultValueCoding;
  }
  public void setDefaultValueQuantity( Quantity value) {
    this.defaultValueQuantity = value;
  }
  public Quantity getDefaultValueQuantity() {
    return this.defaultValueQuantity;
  }
  public void setDefaultValueDuration( Duration value) {
    this.defaultValueDuration = value;
  }
  public Duration getDefaultValueDuration() {
    return this.defaultValueDuration;
  }
  public void setDefaultValueSimpleQuantity( Quantity value) {
    this.defaultValueSimpleQuantity = value;
  }
  public Quantity getDefaultValueSimpleQuantity() {
    return this.defaultValueSimpleQuantity;
  }
  public void setDefaultValueDistance( Distance value) {
    this.defaultValueDistance = value;
  }
  public Distance getDefaultValueDistance() {
    return this.defaultValueDistance;
  }
  public void setDefaultValueCount( Count value) {
    this.defaultValueCount = value;
  }
  public Count getDefaultValueCount() {
    return this.defaultValueCount;
  }
  public void setDefaultValueMoney( Money value) {
    this.defaultValueMoney = value;
  }
  public Money getDefaultValueMoney() {
    return this.defaultValueMoney;
  }
  public void setDefaultValueAge( Age value) {
    this.defaultValueAge = value;
  }
  public Age getDefaultValueAge() {
    return this.defaultValueAge;
  }
  public void setDefaultValueRange( Range value) {
    this.defaultValueRange = value;
  }
  public Range getDefaultValueRange() {
    return this.defaultValueRange;
  }
  public void setDefaultValuePeriod( Period value) {
    this.defaultValuePeriod = value;
  }
  public Period getDefaultValuePeriod() {
    return this.defaultValuePeriod;
  }
  public void setDefaultValueRatio( Ratio value) {
    this.defaultValueRatio = value;
  }
  public Ratio getDefaultValueRatio() {
    return this.defaultValueRatio;
  }
  public void setDefaultValueReference( Reference value) {
    this.defaultValueReference = value;
  }
  public Reference getDefaultValueReference() {
    return this.defaultValueReference;
  }
  public void setDefaultValueSampledData( SampledData value) {
    this.defaultValueSampledData = value;
  }
  public SampledData getDefaultValueSampledData() {
    return this.defaultValueSampledData;
  }
  public void setDefaultValueSignature( Signature value) {
    this.defaultValueSignature = value;
  }
  public Signature getDefaultValueSignature() {
    return this.defaultValueSignature;
  }
  public void setDefaultValueHumanName( HumanName value) {
    this.defaultValueHumanName = value;
  }
  public HumanName getDefaultValueHumanName() {
    return this.defaultValueHumanName;
  }
  public void setDefaultValueAddress( Address value) {
    this.defaultValueAddress = value;
  }
  public Address getDefaultValueAddress() {
    return this.defaultValueAddress;
  }
  public void setDefaultValueContactPoint( ContactPoint value) {
    this.defaultValueContactPoint = value;
  }
  public ContactPoint getDefaultValueContactPoint() {
    return this.defaultValueContactPoint;
  }
  public void setDefaultValueTiming( Timing value) {
    this.defaultValueTiming = value;
  }
  public Timing getDefaultValueTiming() {
    return this.defaultValueTiming;
  }
  public void setDefaultValueMeta( Meta value) {
    this.defaultValueMeta = value;
  }
  public Meta getDefaultValueMeta() {
    return this.defaultValueMeta;
  }
  public void setDefaultValueElementDefinition( ElementDefinition value) {
    this.defaultValueElementDefinition = value;
  }
  public ElementDefinition getDefaultValueElementDefinition() {
    return this.defaultValueElementDefinition;
  }
  public void setDefaultValueContactDetail( ContactDetail value) {
    this.defaultValueContactDetail = value;
  }
  public ContactDetail getDefaultValueContactDetail() {
    return this.defaultValueContactDetail;
  }
  public void setDefaultValueContributor( Contributor value) {
    this.defaultValueContributor = value;
  }
  public Contributor getDefaultValueContributor() {
    return this.defaultValueContributor;
  }
  public void setDefaultValueDosage( Dosage value) {
    this.defaultValueDosage = value;
  }
  public Dosage getDefaultValueDosage() {
    return this.defaultValueDosage;
  }
  public void setDefaultValueRelatedArtifact( RelatedArtifact value) {
    this.defaultValueRelatedArtifact = value;
  }
  public RelatedArtifact getDefaultValueRelatedArtifact() {
    return this.defaultValueRelatedArtifact;
  }
  public void setDefaultValueUsageContext( UsageContext value) {
    this.defaultValueUsageContext = value;
  }
  public UsageContext getDefaultValueUsageContext() {
    return this.defaultValueUsageContext;
  }
  public void setDefaultValueDataRequirement( DataRequirement value) {
    this.defaultValueDataRequirement = value;
  }
  public DataRequirement getDefaultValueDataRequirement() {
    return this.defaultValueDataRequirement;
  }
  public void setDefaultValueParameterDefinition( ParameterDefinition value) {
    this.defaultValueParameterDefinition = value;
  }
  public ParameterDefinition getDefaultValueParameterDefinition() {
    return this.defaultValueParameterDefinition;
  }
  public void setDefaultValueTriggerDefinition( TriggerDefinition value) {
    this.defaultValueTriggerDefinition = value;
  }
  public TriggerDefinition getDefaultValueTriggerDefinition() {
    return this.defaultValueTriggerDefinition;
  }
  public void setMeaningWhenMissing( String value) {
    this.meaningWhenMissing = value;
  }
  public String getMeaningWhenMissing() {
    return this.meaningWhenMissing;
  }
  public void set_meaningWhenMissing( Element value) {
    this._meaningWhenMissing = value;
  }
  public Element get_meaningWhenMissing() {
    return this._meaningWhenMissing;
  }
  public void setOrderMeaning( String value) {
    this.orderMeaning = value;
  }
  public String getOrderMeaning() {
    return this.orderMeaning;
  }
  public void set_orderMeaning( Element value) {
    this._orderMeaning = value;
  }
  public Element get_orderMeaning() {
    return this._orderMeaning;
  }
  public void setFixedBoolean( Boolean value) {
    this.fixedBoolean = value;
  }
  public Boolean getFixedBoolean() {
    return this.fixedBoolean;
  }
  public void set_fixedBoolean( Element value) {
    this._fixedBoolean = value;
  }
  public Element get_fixedBoolean() {
    return this._fixedBoolean;
  }
  public void setFixedInteger( Float value) {
    this.fixedInteger = value;
  }
  public Float getFixedInteger() {
    return this.fixedInteger;
  }
  public void set_fixedInteger( Element value) {
    this._fixedInteger = value;
  }
  public Element get_fixedInteger() {
    return this._fixedInteger;
  }
  public void setFixedDecimal( Float value) {
    this.fixedDecimal = value;
  }
  public Float getFixedDecimal() {
    return this.fixedDecimal;
  }
  public void set_fixedDecimal( Element value) {
    this._fixedDecimal = value;
  }
  public Element get_fixedDecimal() {
    return this._fixedDecimal;
  }
  public void setFixedBase64Binary( String value) {
    this.fixedBase64Binary = value;
  }
  public String getFixedBase64Binary() {
    return this.fixedBase64Binary;
  }
  public void set_fixedBase64Binary( Element value) {
    this._fixedBase64Binary = value;
  }
  public Element get_fixedBase64Binary() {
    return this._fixedBase64Binary;
  }
  public void setFixedInstant( String value) {
    this.fixedInstant = value;
  }
  public String getFixedInstant() {
    return this.fixedInstant;
  }
  public void set_fixedInstant( Element value) {
    this._fixedInstant = value;
  }
  public Element get_fixedInstant() {
    return this._fixedInstant;
  }
  public void setFixedString( String value) {
    this.fixedString = value;
  }
  public String getFixedString() {
    return this.fixedString;
  }
  public void set_fixedString( Element value) {
    this._fixedString = value;
  }
  public Element get_fixedString() {
    return this._fixedString;
  }
  public void setFixedUri( String value) {
    this.fixedUri = value;
  }
  public String getFixedUri() {
    return this.fixedUri;
  }
  public void set_fixedUri( Element value) {
    this._fixedUri = value;
  }
  public Element get_fixedUri() {
    return this._fixedUri;
  }
  public void setFixedDate( String value) {
    this.fixedDate = value;
  }
  public String getFixedDate() {
    return this.fixedDate;
  }
  public void set_fixedDate( Element value) {
    this._fixedDate = value;
  }
  public Element get_fixedDate() {
    return this._fixedDate;
  }
  public void setFixedDateTime( String value) {
    this.fixedDateTime = value;
  }
  public String getFixedDateTime() {
    return this.fixedDateTime;
  }
  public void set_fixedDateTime( Element value) {
    this._fixedDateTime = value;
  }
  public Element get_fixedDateTime() {
    return this._fixedDateTime;
  }
  public void setFixedTime( String value) {
    this.fixedTime = value;
  }
  public String getFixedTime() {
    return this.fixedTime;
  }
  public void set_fixedTime( Element value) {
    this._fixedTime = value;
  }
  public Element get_fixedTime() {
    return this._fixedTime;
  }
  public void setFixedCode( String value) {
    this.fixedCode = value;
  }
  public String getFixedCode() {
    return this.fixedCode;
  }
  public void set_fixedCode( Element value) {
    this._fixedCode = value;
  }
  public Element get_fixedCode() {
    return this._fixedCode;
  }
  public void setFixedOid( String value) {
    this.fixedOid = value;
  }
  public String getFixedOid() {
    return this.fixedOid;
  }
  public void set_fixedOid( Element value) {
    this._fixedOid = value;
  }
  public Element get_fixedOid() {
    return this._fixedOid;
  }
  public void setFixedUuid( String value) {
    this.fixedUuid = value;
  }
  public String getFixedUuid() {
    return this.fixedUuid;
  }
  public void set_fixedUuid( Element value) {
    this._fixedUuid = value;
  }
  public Element get_fixedUuid() {
    return this._fixedUuid;
  }
  public void setFixedId( String value) {
    this.fixedId = value;
  }
  public String getFixedId() {
    return this.fixedId;
  }
  public void set_fixedId( Element value) {
    this._fixedId = value;
  }
  public Element get_fixedId() {
    return this._fixedId;
  }
  public void setFixedUnsignedInt( Float value) {
    this.fixedUnsignedInt = value;
  }
  public Float getFixedUnsignedInt() {
    return this.fixedUnsignedInt;
  }
  public void set_fixedUnsignedInt( Element value) {
    this._fixedUnsignedInt = value;
  }
  public Element get_fixedUnsignedInt() {
    return this._fixedUnsignedInt;
  }
  public void setFixedPositiveInt( Float value) {
    this.fixedPositiveInt = value;
  }
  public Float getFixedPositiveInt() {
    return this.fixedPositiveInt;
  }
  public void set_fixedPositiveInt( Element value) {
    this._fixedPositiveInt = value;
  }
  public Element get_fixedPositiveInt() {
    return this._fixedPositiveInt;
  }
  public void setFixedMarkdown( String value) {
    this.fixedMarkdown = value;
  }
  public String getFixedMarkdown() {
    return this.fixedMarkdown;
  }
  public void set_fixedMarkdown( Element value) {
    this._fixedMarkdown = value;
  }
  public Element get_fixedMarkdown() {
    return this._fixedMarkdown;
  }
  public void setFixedElement( Element value) {
    this.fixedElement = value;
  }
  public Element getFixedElement() {
    return this.fixedElement;
  }
  public void setFixedExtension( Extension value) {
    this.fixedExtension = value;
  }
  public Extension getFixedExtension() {
    return this.fixedExtension;
  }
  public void setFixedBackboneElement( BackboneElement value) {
    this.fixedBackboneElement = value;
  }
  public BackboneElement getFixedBackboneElement() {
    return this.fixedBackboneElement;
  }
  public void setFixedNarrative( Narrative value) {
    this.fixedNarrative = value;
  }
  public Narrative getFixedNarrative() {
    return this.fixedNarrative;
  }
  public void setFixedAnnotation( Annotation value) {
    this.fixedAnnotation = value;
  }
  public Annotation getFixedAnnotation() {
    return this.fixedAnnotation;
  }
  public void setFixedAttachment( Attachment value) {
    this.fixedAttachment = value;
  }
  public Attachment getFixedAttachment() {
    return this.fixedAttachment;
  }
  public void setFixedIdentifier( Identifier value) {
    this.fixedIdentifier = value;
  }
  public Identifier getFixedIdentifier() {
    return this.fixedIdentifier;
  }
  public void setFixedCodeableConcept( CodeableConcept value) {
    this.fixedCodeableConcept = value;
  }
  public CodeableConcept getFixedCodeableConcept() {
    return this.fixedCodeableConcept;
  }
  public void setFixedCoding( Coding value) {
    this.fixedCoding = value;
  }
  public Coding getFixedCoding() {
    return this.fixedCoding;
  }
  public void setFixedQuantity( Quantity value) {
    this.fixedQuantity = value;
  }
  public Quantity getFixedQuantity() {
    return this.fixedQuantity;
  }
  public void setFixedDuration( Duration value) {
    this.fixedDuration = value;
  }
  public Duration getFixedDuration() {
    return this.fixedDuration;
  }
  public void setFixedSimpleQuantity( Quantity value) {
    this.fixedSimpleQuantity = value;
  }
  public Quantity getFixedSimpleQuantity() {
    return this.fixedSimpleQuantity;
  }
  public void setFixedDistance( Distance value) {
    this.fixedDistance = value;
  }
  public Distance getFixedDistance() {
    return this.fixedDistance;
  }
  public void setFixedCount( Count value) {
    this.fixedCount = value;
  }
  public Count getFixedCount() {
    return this.fixedCount;
  }
  public void setFixedMoney( Money value) {
    this.fixedMoney = value;
  }
  public Money getFixedMoney() {
    return this.fixedMoney;
  }
  public void setFixedAge( Age value) {
    this.fixedAge = value;
  }
  public Age getFixedAge() {
    return this.fixedAge;
  }
  public void setFixedRange( Range value) {
    this.fixedRange = value;
  }
  public Range getFixedRange() {
    return this.fixedRange;
  }
  public void setFixedPeriod( Period value) {
    this.fixedPeriod = value;
  }
  public Period getFixedPeriod() {
    return this.fixedPeriod;
  }
  public void setFixedRatio( Ratio value) {
    this.fixedRatio = value;
  }
  public Ratio getFixedRatio() {
    return this.fixedRatio;
  }
  public void setFixedReference( Reference value) {
    this.fixedReference = value;
  }
  public Reference getFixedReference() {
    return this.fixedReference;
  }
  public void setFixedSampledData( SampledData value) {
    this.fixedSampledData = value;
  }
  public SampledData getFixedSampledData() {
    return this.fixedSampledData;
  }
  public void setFixedSignature( Signature value) {
    this.fixedSignature = value;
  }
  public Signature getFixedSignature() {
    return this.fixedSignature;
  }
  public void setFixedHumanName( HumanName value) {
    this.fixedHumanName = value;
  }
  public HumanName getFixedHumanName() {
    return this.fixedHumanName;
  }
  public void setFixedAddress( Address value) {
    this.fixedAddress = value;
  }
  public Address getFixedAddress() {
    return this.fixedAddress;
  }
  public void setFixedContactPoint( ContactPoint value) {
    this.fixedContactPoint = value;
  }
  public ContactPoint getFixedContactPoint() {
    return this.fixedContactPoint;
  }
  public void setFixedTiming( Timing value) {
    this.fixedTiming = value;
  }
  public Timing getFixedTiming() {
    return this.fixedTiming;
  }
  public void setFixedMeta( Meta value) {
    this.fixedMeta = value;
  }
  public Meta getFixedMeta() {
    return this.fixedMeta;
  }
  public void setFixedElementDefinition( ElementDefinition value) {
    this.fixedElementDefinition = value;
  }
  public ElementDefinition getFixedElementDefinition() {
    return this.fixedElementDefinition;
  }
  public void setFixedContactDetail( ContactDetail value) {
    this.fixedContactDetail = value;
  }
  public ContactDetail getFixedContactDetail() {
    return this.fixedContactDetail;
  }
  public void setFixedContributor( Contributor value) {
    this.fixedContributor = value;
  }
  public Contributor getFixedContributor() {
    return this.fixedContributor;
  }
  public void setFixedDosage( Dosage value) {
    this.fixedDosage = value;
  }
  public Dosage getFixedDosage() {
    return this.fixedDosage;
  }
  public void setFixedRelatedArtifact( RelatedArtifact value) {
    this.fixedRelatedArtifact = value;
  }
  public RelatedArtifact getFixedRelatedArtifact() {
    return this.fixedRelatedArtifact;
  }
  public void setFixedUsageContext( UsageContext value) {
    this.fixedUsageContext = value;
  }
  public UsageContext getFixedUsageContext() {
    return this.fixedUsageContext;
  }
  public void setFixedDataRequirement( DataRequirement value) {
    this.fixedDataRequirement = value;
  }
  public DataRequirement getFixedDataRequirement() {
    return this.fixedDataRequirement;
  }
  public void setFixedParameterDefinition( ParameterDefinition value) {
    this.fixedParameterDefinition = value;
  }
  public ParameterDefinition getFixedParameterDefinition() {
    return this.fixedParameterDefinition;
  }
  public void setFixedTriggerDefinition( TriggerDefinition value) {
    this.fixedTriggerDefinition = value;
  }
  public TriggerDefinition getFixedTriggerDefinition() {
    return this.fixedTriggerDefinition;
  }
  public void setPatternBoolean( Boolean value) {
    this.patternBoolean = value;
  }
  public Boolean getPatternBoolean() {
    return this.patternBoolean;
  }
  public void set_patternBoolean( Element value) {
    this._patternBoolean = value;
  }
  public Element get_patternBoolean() {
    return this._patternBoolean;
  }
  public void setPatternInteger( Float value) {
    this.patternInteger = value;
  }
  public Float getPatternInteger() {
    return this.patternInteger;
  }
  public void set_patternInteger( Element value) {
    this._patternInteger = value;
  }
  public Element get_patternInteger() {
    return this._patternInteger;
  }
  public void setPatternDecimal( Float value) {
    this.patternDecimal = value;
  }
  public Float getPatternDecimal() {
    return this.patternDecimal;
  }
  public void set_patternDecimal( Element value) {
    this._patternDecimal = value;
  }
  public Element get_patternDecimal() {
    return this._patternDecimal;
  }
  public void setPatternBase64Binary( String value) {
    this.patternBase64Binary = value;
  }
  public String getPatternBase64Binary() {
    return this.patternBase64Binary;
  }
  public void set_patternBase64Binary( Element value) {
    this._patternBase64Binary = value;
  }
  public Element get_patternBase64Binary() {
    return this._patternBase64Binary;
  }
  public void setPatternInstant( String value) {
    this.patternInstant = value;
  }
  public String getPatternInstant() {
    return this.patternInstant;
  }
  public void set_patternInstant( Element value) {
    this._patternInstant = value;
  }
  public Element get_patternInstant() {
    return this._patternInstant;
  }
  public void setPatternString( String value) {
    this.patternString = value;
  }
  public String getPatternString() {
    return this.patternString;
  }
  public void set_patternString( Element value) {
    this._patternString = value;
  }
  public Element get_patternString() {
    return this._patternString;
  }
  public void setPatternUri( String value) {
    this.patternUri = value;
  }
  public String getPatternUri() {
    return this.patternUri;
  }
  public void set_patternUri( Element value) {
    this._patternUri = value;
  }
  public Element get_patternUri() {
    return this._patternUri;
  }
  public void setPatternDate( String value) {
    this.patternDate = value;
  }
  public String getPatternDate() {
    return this.patternDate;
  }
  public void set_patternDate( Element value) {
    this._patternDate = value;
  }
  public Element get_patternDate() {
    return this._patternDate;
  }
  public void setPatternDateTime( String value) {
    this.patternDateTime = value;
  }
  public String getPatternDateTime() {
    return this.patternDateTime;
  }
  public void set_patternDateTime( Element value) {
    this._patternDateTime = value;
  }
  public Element get_patternDateTime() {
    return this._patternDateTime;
  }
  public void setPatternTime( String value) {
    this.patternTime = value;
  }
  public String getPatternTime() {
    return this.patternTime;
  }
  public void set_patternTime( Element value) {
    this._patternTime = value;
  }
  public Element get_patternTime() {
    return this._patternTime;
  }
  public void setPatternCode( String value) {
    this.patternCode = value;
  }
  public String getPatternCode() {
    return this.patternCode;
  }
  public void set_patternCode( Element value) {
    this._patternCode = value;
  }
  public Element get_patternCode() {
    return this._patternCode;
  }
  public void setPatternOid( String value) {
    this.patternOid = value;
  }
  public String getPatternOid() {
    return this.patternOid;
  }
  public void set_patternOid( Element value) {
    this._patternOid = value;
  }
  public Element get_patternOid() {
    return this._patternOid;
  }
  public void setPatternUuid( String value) {
    this.patternUuid = value;
  }
  public String getPatternUuid() {
    return this.patternUuid;
  }
  public void set_patternUuid( Element value) {
    this._patternUuid = value;
  }
  public Element get_patternUuid() {
    return this._patternUuid;
  }
  public void setPatternId( String value) {
    this.patternId = value;
  }
  public String getPatternId() {
    return this.patternId;
  }
  public void set_patternId( Element value) {
    this._patternId = value;
  }
  public Element get_patternId() {
    return this._patternId;
  }
  public void setPatternUnsignedInt( Float value) {
    this.patternUnsignedInt = value;
  }
  public Float getPatternUnsignedInt() {
    return this.patternUnsignedInt;
  }
  public void set_patternUnsignedInt( Element value) {
    this._patternUnsignedInt = value;
  }
  public Element get_patternUnsignedInt() {
    return this._patternUnsignedInt;
  }
  public void setPatternPositiveInt( Float value) {
    this.patternPositiveInt = value;
  }
  public Float getPatternPositiveInt() {
    return this.patternPositiveInt;
  }
  public void set_patternPositiveInt( Element value) {
    this._patternPositiveInt = value;
  }
  public Element get_patternPositiveInt() {
    return this._patternPositiveInt;
  }
  public void setPatternMarkdown( String value) {
    this.patternMarkdown = value;
  }
  public String getPatternMarkdown() {
    return this.patternMarkdown;
  }
  public void set_patternMarkdown( Element value) {
    this._patternMarkdown = value;
  }
  public Element get_patternMarkdown() {
    return this._patternMarkdown;
  }
  public void setPatternElement( Element value) {
    this.patternElement = value;
  }
  public Element getPatternElement() {
    return this.patternElement;
  }
  public void setPatternExtension( Extension value) {
    this.patternExtension = value;
  }
  public Extension getPatternExtension() {
    return this.patternExtension;
  }
  public void setPatternBackboneElement( BackboneElement value) {
    this.patternBackboneElement = value;
  }
  public BackboneElement getPatternBackboneElement() {
    return this.patternBackboneElement;
  }
  public void setPatternNarrative( Narrative value) {
    this.patternNarrative = value;
  }
  public Narrative getPatternNarrative() {
    return this.patternNarrative;
  }
  public void setPatternAnnotation( Annotation value) {
    this.patternAnnotation = value;
  }
  public Annotation getPatternAnnotation() {
    return this.patternAnnotation;
  }
  public void setPatternAttachment( Attachment value) {
    this.patternAttachment = value;
  }
  public Attachment getPatternAttachment() {
    return this.patternAttachment;
  }
  public void setPatternIdentifier( Identifier value) {
    this.patternIdentifier = value;
  }
  public Identifier getPatternIdentifier() {
    return this.patternIdentifier;
  }
  public void setPatternCodeableConcept( CodeableConcept value) {
    this.patternCodeableConcept = value;
  }
  public CodeableConcept getPatternCodeableConcept() {
    return this.patternCodeableConcept;
  }
  public void setPatternCoding( Coding value) {
    this.patternCoding = value;
  }
  public Coding getPatternCoding() {
    return this.patternCoding;
  }
  public void setPatternQuantity( Quantity value) {
    this.patternQuantity = value;
  }
  public Quantity getPatternQuantity() {
    return this.patternQuantity;
  }
  public void setPatternDuration( Duration value) {
    this.patternDuration = value;
  }
  public Duration getPatternDuration() {
    return this.patternDuration;
  }
  public void setPatternSimpleQuantity( Quantity value) {
    this.patternSimpleQuantity = value;
  }
  public Quantity getPatternSimpleQuantity() {
    return this.patternSimpleQuantity;
  }
  public void setPatternDistance( Distance value) {
    this.patternDistance = value;
  }
  public Distance getPatternDistance() {
    return this.patternDistance;
  }
  public void setPatternCount( Count value) {
    this.patternCount = value;
  }
  public Count getPatternCount() {
    return this.patternCount;
  }
  public void setPatternMoney( Money value) {
    this.patternMoney = value;
  }
  public Money getPatternMoney() {
    return this.patternMoney;
  }
  public void setPatternAge( Age value) {
    this.patternAge = value;
  }
  public Age getPatternAge() {
    return this.patternAge;
  }
  public void setPatternRange( Range value) {
    this.patternRange = value;
  }
  public Range getPatternRange() {
    return this.patternRange;
  }
  public void setPatternPeriod( Period value) {
    this.patternPeriod = value;
  }
  public Period getPatternPeriod() {
    return this.patternPeriod;
  }
  public void setPatternRatio( Ratio value) {
    this.patternRatio = value;
  }
  public Ratio getPatternRatio() {
    return this.patternRatio;
  }
  public void setPatternReference( Reference value) {
    this.patternReference = value;
  }
  public Reference getPatternReference() {
    return this.patternReference;
  }
  public void setPatternSampledData( SampledData value) {
    this.patternSampledData = value;
  }
  public SampledData getPatternSampledData() {
    return this.patternSampledData;
  }
  public void setPatternSignature( Signature value) {
    this.patternSignature = value;
  }
  public Signature getPatternSignature() {
    return this.patternSignature;
  }
  public void setPatternHumanName( HumanName value) {
    this.patternHumanName = value;
  }
  public HumanName getPatternHumanName() {
    return this.patternHumanName;
  }
  public void setPatternAddress( Address value) {
    this.patternAddress = value;
  }
  public Address getPatternAddress() {
    return this.patternAddress;
  }
  public void setPatternContactPoint( ContactPoint value) {
    this.patternContactPoint = value;
  }
  public ContactPoint getPatternContactPoint() {
    return this.patternContactPoint;
  }
  public void setPatternTiming( Timing value) {
    this.patternTiming = value;
  }
  public Timing getPatternTiming() {
    return this.patternTiming;
  }
  public void setPatternMeta( Meta value) {
    this.patternMeta = value;
  }
  public Meta getPatternMeta() {
    return this.patternMeta;
  }
  public void setPatternElementDefinition( ElementDefinition value) {
    this.patternElementDefinition = value;
  }
  public ElementDefinition getPatternElementDefinition() {
    return this.patternElementDefinition;
  }
  public void setPatternContactDetail( ContactDetail value) {
    this.patternContactDetail = value;
  }
  public ContactDetail getPatternContactDetail() {
    return this.patternContactDetail;
  }
  public void setPatternContributor( Contributor value) {
    this.patternContributor = value;
  }
  public Contributor getPatternContributor() {
    return this.patternContributor;
  }
  public void setPatternDosage( Dosage value) {
    this.patternDosage = value;
  }
  public Dosage getPatternDosage() {
    return this.patternDosage;
  }
  public void setPatternRelatedArtifact( RelatedArtifact value) {
    this.patternRelatedArtifact = value;
  }
  public RelatedArtifact getPatternRelatedArtifact() {
    return this.patternRelatedArtifact;
  }
  public void setPatternUsageContext( UsageContext value) {
    this.patternUsageContext = value;
  }
  public UsageContext getPatternUsageContext() {
    return this.patternUsageContext;
  }
  public void setPatternDataRequirement( DataRequirement value) {
    this.patternDataRequirement = value;
  }
  public DataRequirement getPatternDataRequirement() {
    return this.patternDataRequirement;
  }
  public void setPatternParameterDefinition( ParameterDefinition value) {
    this.patternParameterDefinition = value;
  }
  public ParameterDefinition getPatternParameterDefinition() {
    return this.patternParameterDefinition;
  }
  public void setPatternTriggerDefinition( TriggerDefinition value) {
    this.patternTriggerDefinition = value;
  }
  public TriggerDefinition getPatternTriggerDefinition() {
    return this.patternTriggerDefinition;
  }
  public void setExample( java.util.List<ElementDefinitionExample> value) {
    this.example = value;
  }
  public java.util.List<ElementDefinitionExample> getExample() {
    return this.example;
  }
  public void setMinValueDate( String value) {
    this.minValueDate = value;
  }
  public String getMinValueDate() {
    return this.minValueDate;
  }
  public void set_minValueDate( Element value) {
    this._minValueDate = value;
  }
  public Element get_minValueDate() {
    return this._minValueDate;
  }
  public void setMinValueDateTime( String value) {
    this.minValueDateTime = value;
  }
  public String getMinValueDateTime() {
    return this.minValueDateTime;
  }
  public void set_minValueDateTime( Element value) {
    this._minValueDateTime = value;
  }
  public Element get_minValueDateTime() {
    return this._minValueDateTime;
  }
  public void setMinValueInstant( String value) {
    this.minValueInstant = value;
  }
  public String getMinValueInstant() {
    return this.minValueInstant;
  }
  public void set_minValueInstant( Element value) {
    this._minValueInstant = value;
  }
  public Element get_minValueInstant() {
    return this._minValueInstant;
  }
  public void setMinValueTime( String value) {
    this.minValueTime = value;
  }
  public String getMinValueTime() {
    return this.minValueTime;
  }
  public void set_minValueTime( Element value) {
    this._minValueTime = value;
  }
  public Element get_minValueTime() {
    return this._minValueTime;
  }
  public void setMinValueDecimal( Float value) {
    this.minValueDecimal = value;
  }
  public Float getMinValueDecimal() {
    return this.minValueDecimal;
  }
  public void set_minValueDecimal( Element value) {
    this._minValueDecimal = value;
  }
  public Element get_minValueDecimal() {
    return this._minValueDecimal;
  }
  public void setMinValueInteger( Float value) {
    this.minValueInteger = value;
  }
  public Float getMinValueInteger() {
    return this.minValueInteger;
  }
  public void set_minValueInteger( Element value) {
    this._minValueInteger = value;
  }
  public Element get_minValueInteger() {
    return this._minValueInteger;
  }
  public void setMinValuePositiveInt( Float value) {
    this.minValuePositiveInt = value;
  }
  public Float getMinValuePositiveInt() {
    return this.minValuePositiveInt;
  }
  public void set_minValuePositiveInt( Element value) {
    this._minValuePositiveInt = value;
  }
  public Element get_minValuePositiveInt() {
    return this._minValuePositiveInt;
  }
  public void setMinValueUnsignedInt( Float value) {
    this.minValueUnsignedInt = value;
  }
  public Float getMinValueUnsignedInt() {
    return this.minValueUnsignedInt;
  }
  public void set_minValueUnsignedInt( Element value) {
    this._minValueUnsignedInt = value;
  }
  public Element get_minValueUnsignedInt() {
    return this._minValueUnsignedInt;
  }
  public void setMinValueQuantity( Quantity value) {
    this.minValueQuantity = value;
  }
  public Quantity getMinValueQuantity() {
    return this.minValueQuantity;
  }
  public void setMaxValueDate( String value) {
    this.maxValueDate = value;
  }
  public String getMaxValueDate() {
    return this.maxValueDate;
  }
  public void set_maxValueDate( Element value) {
    this._maxValueDate = value;
  }
  public Element get_maxValueDate() {
    return this._maxValueDate;
  }
  public void setMaxValueDateTime( String value) {
    this.maxValueDateTime = value;
  }
  public String getMaxValueDateTime() {
    return this.maxValueDateTime;
  }
  public void set_maxValueDateTime( Element value) {
    this._maxValueDateTime = value;
  }
  public Element get_maxValueDateTime() {
    return this._maxValueDateTime;
  }
  public void setMaxValueInstant( String value) {
    this.maxValueInstant = value;
  }
  public String getMaxValueInstant() {
    return this.maxValueInstant;
  }
  public void set_maxValueInstant( Element value) {
    this._maxValueInstant = value;
  }
  public Element get_maxValueInstant() {
    return this._maxValueInstant;
  }
  public void setMaxValueTime( String value) {
    this.maxValueTime = value;
  }
  public String getMaxValueTime() {
    return this.maxValueTime;
  }
  public void set_maxValueTime( Element value) {
    this._maxValueTime = value;
  }
  public Element get_maxValueTime() {
    return this._maxValueTime;
  }
  public void setMaxValueDecimal( Float value) {
    this.maxValueDecimal = value;
  }
  public Float getMaxValueDecimal() {
    return this.maxValueDecimal;
  }
  public void set_maxValueDecimal( Element value) {
    this._maxValueDecimal = value;
  }
  public Element get_maxValueDecimal() {
    return this._maxValueDecimal;
  }
  public void setMaxValueInteger( Float value) {
    this.maxValueInteger = value;
  }
  public Float getMaxValueInteger() {
    return this.maxValueInteger;
  }
  public void set_maxValueInteger( Element value) {
    this._maxValueInteger = value;
  }
  public Element get_maxValueInteger() {
    return this._maxValueInteger;
  }
  public void setMaxValuePositiveInt( Float value) {
    this.maxValuePositiveInt = value;
  }
  public Float getMaxValuePositiveInt() {
    return this.maxValuePositiveInt;
  }
  public void set_maxValuePositiveInt( Element value) {
    this._maxValuePositiveInt = value;
  }
  public Element get_maxValuePositiveInt() {
    return this._maxValuePositiveInt;
  }
  public void setMaxValueUnsignedInt( Float value) {
    this.maxValueUnsignedInt = value;
  }
  public Float getMaxValueUnsignedInt() {
    return this.maxValueUnsignedInt;
  }
  public void set_maxValueUnsignedInt( Element value) {
    this._maxValueUnsignedInt = value;
  }
  public Element get_maxValueUnsignedInt() {
    return this._maxValueUnsignedInt;
  }
  public void setMaxValueQuantity( Quantity value) {
    this.maxValueQuantity = value;
  }
  public Quantity getMaxValueQuantity() {
    return this.maxValueQuantity;
  }
  public void setMaxLength( Float value) {
    this.maxLength = value;
  }
  public Float getMaxLength() {
    return this.maxLength;
  }
  public void set_maxLength( Element value) {
    this._maxLength = value;
  }
  public Element get_maxLength() {
    return this._maxLength;
  }
  public void setCondition( java.util.List<String> value) {
    this.condition = value;
  }
  public java.util.List<String> getCondition() {
    return this.condition;
  }
  public void set_condition( java.util.List<Element> value) {
    this._condition = value;
  }
  public java.util.List<Element> get_condition() {
    return this._condition;
  }
  public void setConstraint( java.util.List<ElementDefinitionConstraint> value) {
    this.constraint = value;
  }
  public java.util.List<ElementDefinitionConstraint> getConstraint() {
    return this.constraint;
  }
  public void setMustSupport( Boolean value) {
    this.mustSupport = value;
  }
  public Boolean getMustSupport() {
    return this.mustSupport;
  }
  public void set_mustSupport( Element value) {
    this._mustSupport = value;
  }
  public Element get_mustSupport() {
    return this._mustSupport;
  }
  public void setIsModifier( Boolean value) {
    this.isModifier = value;
  }
  public Boolean getIsModifier() {
    return this.isModifier;
  }
  public void set_isModifier( Element value) {
    this._isModifier = value;
  }
  public Element get_isModifier() {
    return this._isModifier;
  }
  public void setIsSummary( Boolean value) {
    this.isSummary = value;
  }
  public Boolean getIsSummary() {
    return this.isSummary;
  }
  public void set_isSummary( Element value) {
    this._isSummary = value;
  }
  public Element get_isSummary() {
    return this._isSummary;
  }
  public void setBinding( ElementDefinitionBinding value) {
    this.binding = value;
  }
  public ElementDefinitionBinding getBinding() {
    return this.binding;
  }
  public void setMapping( java.util.List<ElementDefinitionMapping> value) {
    this.mapping = value;
  }
  public java.util.List<ElementDefinitionMapping> getMapping() {
    return this.mapping;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append("[ElementDefinition]:" + "\n");
     if(this.path != null) builder.append("path" + "->" + this.path.toString() + "\n"); 
     if(this._path != null) builder.append("_path" + "->" + this._path.toString() + "\n"); 
     if(this.representation != null) builder.append("representation" + "->" + this.representation.toString() + "\n"); 
     if(this._representation != null) builder.append("_representation" + "->" + this._representation.toString() + "\n"); 
     if(this.sliceName != null) builder.append("sliceName" + "->" + this.sliceName.toString() + "\n"); 
     if(this._sliceName != null) builder.append("_sliceName" + "->" + this._sliceName.toString() + "\n"); 
     if(this.label != null) builder.append("label" + "->" + this.label.toString() + "\n"); 
     if(this._label != null) builder.append("_label" + "->" + this._label.toString() + "\n"); 
     if(this.code != null) builder.append("code" + "->" + this.code.toString() + "\n"); 
     if(this.slicing != null) builder.append("slicing" + "->" + this.slicing.toString() + "\n"); 
     if(this.FHIRshort != null) builder.append("FHIRshort" + "->" + this.FHIRshort.toString() + "\n"); 
     if(this._short != null) builder.append("_short" + "->" + this._short.toString() + "\n"); 
     if(this.definition != null) builder.append("definition" + "->" + this.definition.toString() + "\n"); 
     if(this._definition != null) builder.append("_definition" + "->" + this._definition.toString() + "\n"); 
     if(this.comment != null) builder.append("comment" + "->" + this.comment.toString() + "\n"); 
     if(this._comment != null) builder.append("_comment" + "->" + this._comment.toString() + "\n"); 
     if(this.requirements != null) builder.append("requirements" + "->" + this.requirements.toString() + "\n"); 
     if(this._requirements != null) builder.append("_requirements" + "->" + this._requirements.toString() + "\n"); 
     if(this.alias != null) builder.append("alias" + "->" + this.alias.toString() + "\n"); 
     if(this._alias != null) builder.append("_alias" + "->" + this._alias.toString() + "\n"); 
     if(this.min != null) builder.append("min" + "->" + this.min.toString() + "\n"); 
     if(this._min != null) builder.append("_min" + "->" + this._min.toString() + "\n"); 
     if(this.max != null) builder.append("max" + "->" + this.max.toString() + "\n"); 
     if(this._max != null) builder.append("_max" + "->" + this._max.toString() + "\n"); 
     if(this.base != null) builder.append("base" + "->" + this.base.toString() + "\n"); 
     if(this.contentReference != null) builder.append("contentReference" + "->" + this.contentReference.toString() + "\n"); 
     if(this._contentReference != null) builder.append("_contentReference" + "->" + this._contentReference.toString() + "\n"); 
     if(this.type != null) builder.append("type" + "->" + this.type.toString() + "\n"); 
     if(this.defaultValueBoolean != null) builder.append("defaultValueBoolean" + "->" + this.defaultValueBoolean.toString() + "\n"); 
     if(this._defaultValueBoolean != null) builder.append("_defaultValueBoolean" + "->" + this._defaultValueBoolean.toString() + "\n"); 
     if(this.defaultValueInteger != null) builder.append("defaultValueInteger" + "->" + this.defaultValueInteger.toString() + "\n"); 
     if(this._defaultValueInteger != null) builder.append("_defaultValueInteger" + "->" + this._defaultValueInteger.toString() + "\n"); 
     if(this.defaultValueDecimal != null) builder.append("defaultValueDecimal" + "->" + this.defaultValueDecimal.toString() + "\n"); 
     if(this._defaultValueDecimal != null) builder.append("_defaultValueDecimal" + "->" + this._defaultValueDecimal.toString() + "\n"); 
     if(this.defaultValueBase64Binary != null) builder.append("defaultValueBase64Binary" + "->" + this.defaultValueBase64Binary.toString() + "\n"); 
     if(this._defaultValueBase64Binary != null) builder.append("_defaultValueBase64Binary" + "->" + this._defaultValueBase64Binary.toString() + "\n"); 
     if(this.defaultValueInstant != null) builder.append("defaultValueInstant" + "->" + this.defaultValueInstant.toString() + "\n"); 
     if(this._defaultValueInstant != null) builder.append("_defaultValueInstant" + "->" + this._defaultValueInstant.toString() + "\n"); 
     if(this.defaultValueString != null) builder.append("defaultValueString" + "->" + this.defaultValueString.toString() + "\n"); 
     if(this._defaultValueString != null) builder.append("_defaultValueString" + "->" + this._defaultValueString.toString() + "\n"); 
     if(this.defaultValueUri != null) builder.append("defaultValueUri" + "->" + this.defaultValueUri.toString() + "\n"); 
     if(this._defaultValueUri != null) builder.append("_defaultValueUri" + "->" + this._defaultValueUri.toString() + "\n"); 
     if(this.defaultValueDate != null) builder.append("defaultValueDate" + "->" + this.defaultValueDate.toString() + "\n"); 
     if(this._defaultValueDate != null) builder.append("_defaultValueDate" + "->" + this._defaultValueDate.toString() + "\n"); 
     if(this.defaultValueDateTime != null) builder.append("defaultValueDateTime" + "->" + this.defaultValueDateTime.toString() + "\n"); 
     if(this._defaultValueDateTime != null) builder.append("_defaultValueDateTime" + "->" + this._defaultValueDateTime.toString() + "\n"); 
     if(this.defaultValueTime != null) builder.append("defaultValueTime" + "->" + this.defaultValueTime.toString() + "\n"); 
     if(this._defaultValueTime != null) builder.append("_defaultValueTime" + "->" + this._defaultValueTime.toString() + "\n"); 
     if(this.defaultValueCode != null) builder.append("defaultValueCode" + "->" + this.defaultValueCode.toString() + "\n"); 
     if(this._defaultValueCode != null) builder.append("_defaultValueCode" + "->" + this._defaultValueCode.toString() + "\n"); 
     if(this.defaultValueOid != null) builder.append("defaultValueOid" + "->" + this.defaultValueOid.toString() + "\n"); 
     if(this._defaultValueOid != null) builder.append("_defaultValueOid" + "->" + this._defaultValueOid.toString() + "\n"); 
     if(this.defaultValueUuid != null) builder.append("defaultValueUuid" + "->" + this.defaultValueUuid.toString() + "\n"); 
     if(this._defaultValueUuid != null) builder.append("_defaultValueUuid" + "->" + this._defaultValueUuid.toString() + "\n"); 
     if(this.defaultValueId != null) builder.append("defaultValueId" + "->" + this.defaultValueId.toString() + "\n"); 
     if(this._defaultValueId != null) builder.append("_defaultValueId" + "->" + this._defaultValueId.toString() + "\n"); 
     if(this.defaultValueUnsignedInt != null) builder.append("defaultValueUnsignedInt" + "->" + this.defaultValueUnsignedInt.toString() + "\n"); 
     if(this._defaultValueUnsignedInt != null) builder.append("_defaultValueUnsignedInt" + "->" + this._defaultValueUnsignedInt.toString() + "\n"); 
     if(this.defaultValuePositiveInt != null) builder.append("defaultValuePositiveInt" + "->" + this.defaultValuePositiveInt.toString() + "\n"); 
     if(this._defaultValuePositiveInt != null) builder.append("_defaultValuePositiveInt" + "->" + this._defaultValuePositiveInt.toString() + "\n"); 
     if(this.defaultValueMarkdown != null) builder.append("defaultValueMarkdown" + "->" + this.defaultValueMarkdown.toString() + "\n"); 
     if(this._defaultValueMarkdown != null) builder.append("_defaultValueMarkdown" + "->" + this._defaultValueMarkdown.toString() + "\n"); 
     if(this.defaultValueElement != null) builder.append("defaultValueElement" + "->" + this.defaultValueElement.toString() + "\n"); 
     if(this.defaultValueExtension != null) builder.append("defaultValueExtension" + "->" + this.defaultValueExtension.toString() + "\n"); 
     if(this.defaultValueBackboneElement != null) builder.append("defaultValueBackboneElement" + "->" + this.defaultValueBackboneElement.toString() + "\n"); 
     if(this.defaultValueNarrative != null) builder.append("defaultValueNarrative" + "->" + this.defaultValueNarrative.toString() + "\n"); 
     if(this.defaultValueAnnotation != null) builder.append("defaultValueAnnotation" + "->" + this.defaultValueAnnotation.toString() + "\n"); 
     if(this.defaultValueAttachment != null) builder.append("defaultValueAttachment" + "->" + this.defaultValueAttachment.toString() + "\n"); 
     if(this.defaultValueIdentifier != null) builder.append("defaultValueIdentifier" + "->" + this.defaultValueIdentifier.toString() + "\n"); 
     if(this.defaultValueCodeableConcept != null) builder.append("defaultValueCodeableConcept" + "->" + this.defaultValueCodeableConcept.toString() + "\n"); 
     if(this.defaultValueCoding != null) builder.append("defaultValueCoding" + "->" + this.defaultValueCoding.toString() + "\n"); 
     if(this.defaultValueQuantity != null) builder.append("defaultValueQuantity" + "->" + this.defaultValueQuantity.toString() + "\n"); 
     if(this.defaultValueDuration != null) builder.append("defaultValueDuration" + "->" + this.defaultValueDuration.toString() + "\n"); 
     if(this.defaultValueSimpleQuantity != null) builder.append("defaultValueSimpleQuantity" + "->" + this.defaultValueSimpleQuantity.toString() + "\n"); 
     if(this.defaultValueDistance != null) builder.append("defaultValueDistance" + "->" + this.defaultValueDistance.toString() + "\n"); 
     if(this.defaultValueCount != null) builder.append("defaultValueCount" + "->" + this.defaultValueCount.toString() + "\n"); 
     if(this.defaultValueMoney != null) builder.append("defaultValueMoney" + "->" + this.defaultValueMoney.toString() + "\n"); 
     if(this.defaultValueAge != null) builder.append("defaultValueAge" + "->" + this.defaultValueAge.toString() + "\n"); 
     if(this.defaultValueRange != null) builder.append("defaultValueRange" + "->" + this.defaultValueRange.toString() + "\n"); 
     if(this.defaultValuePeriod != null) builder.append("defaultValuePeriod" + "->" + this.defaultValuePeriod.toString() + "\n"); 
     if(this.defaultValueRatio != null) builder.append("defaultValueRatio" + "->" + this.defaultValueRatio.toString() + "\n"); 
     if(this.defaultValueReference != null) builder.append("defaultValueReference" + "->" + this.defaultValueReference.toString() + "\n"); 
     if(this.defaultValueSampledData != null) builder.append("defaultValueSampledData" + "->" + this.defaultValueSampledData.toString() + "\n"); 
     if(this.defaultValueSignature != null) builder.append("defaultValueSignature" + "->" + this.defaultValueSignature.toString() + "\n"); 
     if(this.defaultValueHumanName != null) builder.append("defaultValueHumanName" + "->" + this.defaultValueHumanName.toString() + "\n"); 
     if(this.defaultValueAddress != null) builder.append("defaultValueAddress" + "->" + this.defaultValueAddress.toString() + "\n"); 
     if(this.defaultValueContactPoint != null) builder.append("defaultValueContactPoint" + "->" + this.defaultValueContactPoint.toString() + "\n"); 
     if(this.defaultValueTiming != null) builder.append("defaultValueTiming" + "->" + this.defaultValueTiming.toString() + "\n"); 
     if(this.defaultValueMeta != null) builder.append("defaultValueMeta" + "->" + this.defaultValueMeta.toString() + "\n"); 
     if(this.defaultValueElementDefinition != null) builder.append("defaultValueElementDefinition" + "->" + this.defaultValueElementDefinition.toString() + "\n"); 
     if(this.defaultValueContactDetail != null) builder.append("defaultValueContactDetail" + "->" + this.defaultValueContactDetail.toString() + "\n"); 
     if(this.defaultValueContributor != null) builder.append("defaultValueContributor" + "->" + this.defaultValueContributor.toString() + "\n"); 
     if(this.defaultValueDosage != null) builder.append("defaultValueDosage" + "->" + this.defaultValueDosage.toString() + "\n"); 
     if(this.defaultValueRelatedArtifact != null) builder.append("defaultValueRelatedArtifact" + "->" + this.defaultValueRelatedArtifact.toString() + "\n"); 
     if(this.defaultValueUsageContext != null) builder.append("defaultValueUsageContext" + "->" + this.defaultValueUsageContext.toString() + "\n"); 
     if(this.defaultValueDataRequirement != null) builder.append("defaultValueDataRequirement" + "->" + this.defaultValueDataRequirement.toString() + "\n"); 
     if(this.defaultValueParameterDefinition != null) builder.append("defaultValueParameterDefinition" + "->" + this.defaultValueParameterDefinition.toString() + "\n"); 
     if(this.defaultValueTriggerDefinition != null) builder.append("defaultValueTriggerDefinition" + "->" + this.defaultValueTriggerDefinition.toString() + "\n"); 
     if(this.meaningWhenMissing != null) builder.append("meaningWhenMissing" + "->" + this.meaningWhenMissing.toString() + "\n"); 
     if(this._meaningWhenMissing != null) builder.append("_meaningWhenMissing" + "->" + this._meaningWhenMissing.toString() + "\n"); 
     if(this.orderMeaning != null) builder.append("orderMeaning" + "->" + this.orderMeaning.toString() + "\n"); 
     if(this._orderMeaning != null) builder.append("_orderMeaning" + "->" + this._orderMeaning.toString() + "\n"); 
     if(this.fixedBoolean != null) builder.append("fixedBoolean" + "->" + this.fixedBoolean.toString() + "\n"); 
     if(this._fixedBoolean != null) builder.append("_fixedBoolean" + "->" + this._fixedBoolean.toString() + "\n"); 
     if(this.fixedInteger != null) builder.append("fixedInteger" + "->" + this.fixedInteger.toString() + "\n"); 
     if(this._fixedInteger != null) builder.append("_fixedInteger" + "->" + this._fixedInteger.toString() + "\n"); 
     if(this.fixedDecimal != null) builder.append("fixedDecimal" + "->" + this.fixedDecimal.toString() + "\n"); 
     if(this._fixedDecimal != null) builder.append("_fixedDecimal" + "->" + this._fixedDecimal.toString() + "\n"); 
     if(this.fixedBase64Binary != null) builder.append("fixedBase64Binary" + "->" + this.fixedBase64Binary.toString() + "\n"); 
     if(this._fixedBase64Binary != null) builder.append("_fixedBase64Binary" + "->" + this._fixedBase64Binary.toString() + "\n"); 
     if(this.fixedInstant != null) builder.append("fixedInstant" + "->" + this.fixedInstant.toString() + "\n"); 
     if(this._fixedInstant != null) builder.append("_fixedInstant" + "->" + this._fixedInstant.toString() + "\n"); 
     if(this.fixedString != null) builder.append("fixedString" + "->" + this.fixedString.toString() + "\n"); 
     if(this._fixedString != null) builder.append("_fixedString" + "->" + this._fixedString.toString() + "\n"); 
     if(this.fixedUri != null) builder.append("fixedUri" + "->" + this.fixedUri.toString() + "\n"); 
     if(this._fixedUri != null) builder.append("_fixedUri" + "->" + this._fixedUri.toString() + "\n"); 
     if(this.fixedDate != null) builder.append("fixedDate" + "->" + this.fixedDate.toString() + "\n"); 
     if(this._fixedDate != null) builder.append("_fixedDate" + "->" + this._fixedDate.toString() + "\n"); 
     if(this.fixedDateTime != null) builder.append("fixedDateTime" + "->" + this.fixedDateTime.toString() + "\n"); 
     if(this._fixedDateTime != null) builder.append("_fixedDateTime" + "->" + this._fixedDateTime.toString() + "\n"); 
     if(this.fixedTime != null) builder.append("fixedTime" + "->" + this.fixedTime.toString() + "\n"); 
     if(this._fixedTime != null) builder.append("_fixedTime" + "->" + this._fixedTime.toString() + "\n"); 
     if(this.fixedCode != null) builder.append("fixedCode" + "->" + this.fixedCode.toString() + "\n"); 
     if(this._fixedCode != null) builder.append("_fixedCode" + "->" + this._fixedCode.toString() + "\n"); 
     if(this.fixedOid != null) builder.append("fixedOid" + "->" + this.fixedOid.toString() + "\n"); 
     if(this._fixedOid != null) builder.append("_fixedOid" + "->" + this._fixedOid.toString() + "\n"); 
     if(this.fixedUuid != null) builder.append("fixedUuid" + "->" + this.fixedUuid.toString() + "\n"); 
     if(this._fixedUuid != null) builder.append("_fixedUuid" + "->" + this._fixedUuid.toString() + "\n"); 
     if(this.fixedId != null) builder.append("fixedId" + "->" + this.fixedId.toString() + "\n"); 
     if(this._fixedId != null) builder.append("_fixedId" + "->" + this._fixedId.toString() + "\n"); 
     if(this.fixedUnsignedInt != null) builder.append("fixedUnsignedInt" + "->" + this.fixedUnsignedInt.toString() + "\n"); 
     if(this._fixedUnsignedInt != null) builder.append("_fixedUnsignedInt" + "->" + this._fixedUnsignedInt.toString() + "\n"); 
     if(this.fixedPositiveInt != null) builder.append("fixedPositiveInt" + "->" + this.fixedPositiveInt.toString() + "\n"); 
     if(this._fixedPositiveInt != null) builder.append("_fixedPositiveInt" + "->" + this._fixedPositiveInt.toString() + "\n"); 
     if(this.fixedMarkdown != null) builder.append("fixedMarkdown" + "->" + this.fixedMarkdown.toString() + "\n"); 
     if(this._fixedMarkdown != null) builder.append("_fixedMarkdown" + "->" + this._fixedMarkdown.toString() + "\n"); 
     if(this.fixedElement != null) builder.append("fixedElement" + "->" + this.fixedElement.toString() + "\n"); 
     if(this.fixedExtension != null) builder.append("fixedExtension" + "->" + this.fixedExtension.toString() + "\n"); 
     if(this.fixedBackboneElement != null) builder.append("fixedBackboneElement" + "->" + this.fixedBackboneElement.toString() + "\n"); 
     if(this.fixedNarrative != null) builder.append("fixedNarrative" + "->" + this.fixedNarrative.toString() + "\n"); 
     if(this.fixedAnnotation != null) builder.append("fixedAnnotation" + "->" + this.fixedAnnotation.toString() + "\n"); 
     if(this.fixedAttachment != null) builder.append("fixedAttachment" + "->" + this.fixedAttachment.toString() + "\n"); 
     if(this.fixedIdentifier != null) builder.append("fixedIdentifier" + "->" + this.fixedIdentifier.toString() + "\n"); 
     if(this.fixedCodeableConcept != null) builder.append("fixedCodeableConcept" + "->" + this.fixedCodeableConcept.toString() + "\n"); 
     if(this.fixedCoding != null) builder.append("fixedCoding" + "->" + this.fixedCoding.toString() + "\n"); 
     if(this.fixedQuantity != null) builder.append("fixedQuantity" + "->" + this.fixedQuantity.toString() + "\n"); 
     if(this.fixedDuration != null) builder.append("fixedDuration" + "->" + this.fixedDuration.toString() + "\n"); 
     if(this.fixedSimpleQuantity != null) builder.append("fixedSimpleQuantity" + "->" + this.fixedSimpleQuantity.toString() + "\n"); 
     if(this.fixedDistance != null) builder.append("fixedDistance" + "->" + this.fixedDistance.toString() + "\n"); 
     if(this.fixedCount != null) builder.append("fixedCount" + "->" + this.fixedCount.toString() + "\n"); 
     if(this.fixedMoney != null) builder.append("fixedMoney" + "->" + this.fixedMoney.toString() + "\n"); 
     if(this.fixedAge != null) builder.append("fixedAge" + "->" + this.fixedAge.toString() + "\n"); 
     if(this.fixedRange != null) builder.append("fixedRange" + "->" + this.fixedRange.toString() + "\n"); 
     if(this.fixedPeriod != null) builder.append("fixedPeriod" + "->" + this.fixedPeriod.toString() + "\n"); 
     if(this.fixedRatio != null) builder.append("fixedRatio" + "->" + this.fixedRatio.toString() + "\n"); 
     if(this.fixedReference != null) builder.append("fixedReference" + "->" + this.fixedReference.toString() + "\n"); 
     if(this.fixedSampledData != null) builder.append("fixedSampledData" + "->" + this.fixedSampledData.toString() + "\n"); 
     if(this.fixedSignature != null) builder.append("fixedSignature" + "->" + this.fixedSignature.toString() + "\n"); 
     if(this.fixedHumanName != null) builder.append("fixedHumanName" + "->" + this.fixedHumanName.toString() + "\n"); 
     if(this.fixedAddress != null) builder.append("fixedAddress" + "->" + this.fixedAddress.toString() + "\n"); 
     if(this.fixedContactPoint != null) builder.append("fixedContactPoint" + "->" + this.fixedContactPoint.toString() + "\n"); 
     if(this.fixedTiming != null) builder.append("fixedTiming" + "->" + this.fixedTiming.toString() + "\n"); 
     if(this.fixedMeta != null) builder.append("fixedMeta" + "->" + this.fixedMeta.toString() + "\n"); 
     if(this.fixedElementDefinition != null) builder.append("fixedElementDefinition" + "->" + this.fixedElementDefinition.toString() + "\n"); 
     if(this.fixedContactDetail != null) builder.append("fixedContactDetail" + "->" + this.fixedContactDetail.toString() + "\n"); 
     if(this.fixedContributor != null) builder.append("fixedContributor" + "->" + this.fixedContributor.toString() + "\n"); 
     if(this.fixedDosage != null) builder.append("fixedDosage" + "->" + this.fixedDosage.toString() + "\n"); 
     if(this.fixedRelatedArtifact != null) builder.append("fixedRelatedArtifact" + "->" + this.fixedRelatedArtifact.toString() + "\n"); 
     if(this.fixedUsageContext != null) builder.append("fixedUsageContext" + "->" + this.fixedUsageContext.toString() + "\n"); 
     if(this.fixedDataRequirement != null) builder.append("fixedDataRequirement" + "->" + this.fixedDataRequirement.toString() + "\n"); 
     if(this.fixedParameterDefinition != null) builder.append("fixedParameterDefinition" + "->" + this.fixedParameterDefinition.toString() + "\n"); 
     if(this.fixedTriggerDefinition != null) builder.append("fixedTriggerDefinition" + "->" + this.fixedTriggerDefinition.toString() + "\n"); 
     if(this.patternBoolean != null) builder.append("patternBoolean" + "->" + this.patternBoolean.toString() + "\n"); 
     if(this._patternBoolean != null) builder.append("_patternBoolean" + "->" + this._patternBoolean.toString() + "\n"); 
     if(this.patternInteger != null) builder.append("patternInteger" + "->" + this.patternInteger.toString() + "\n"); 
     if(this._patternInteger != null) builder.append("_patternInteger" + "->" + this._patternInteger.toString() + "\n"); 
     if(this.patternDecimal != null) builder.append("patternDecimal" + "->" + this.patternDecimal.toString() + "\n"); 
     if(this._patternDecimal != null) builder.append("_patternDecimal" + "->" + this._patternDecimal.toString() + "\n"); 
     if(this.patternBase64Binary != null) builder.append("patternBase64Binary" + "->" + this.patternBase64Binary.toString() + "\n"); 
     if(this._patternBase64Binary != null) builder.append("_patternBase64Binary" + "->" + this._patternBase64Binary.toString() + "\n"); 
     if(this.patternInstant != null) builder.append("patternInstant" + "->" + this.patternInstant.toString() + "\n"); 
     if(this._patternInstant != null) builder.append("_patternInstant" + "->" + this._patternInstant.toString() + "\n"); 
     if(this.patternString != null) builder.append("patternString" + "->" + this.patternString.toString() + "\n"); 
     if(this._patternString != null) builder.append("_patternString" + "->" + this._patternString.toString() + "\n"); 
     if(this.patternUri != null) builder.append("patternUri" + "->" + this.patternUri.toString() + "\n"); 
     if(this._patternUri != null) builder.append("_patternUri" + "->" + this._patternUri.toString() + "\n"); 
     if(this.patternDate != null) builder.append("patternDate" + "->" + this.patternDate.toString() + "\n"); 
     if(this._patternDate != null) builder.append("_patternDate" + "->" + this._patternDate.toString() + "\n"); 
     if(this.patternDateTime != null) builder.append("patternDateTime" + "->" + this.patternDateTime.toString() + "\n"); 
     if(this._patternDateTime != null) builder.append("_patternDateTime" + "->" + this._patternDateTime.toString() + "\n"); 
     if(this.patternTime != null) builder.append("patternTime" + "->" + this.patternTime.toString() + "\n"); 
     if(this._patternTime != null) builder.append("_patternTime" + "->" + this._patternTime.toString() + "\n"); 
     if(this.patternCode != null) builder.append("patternCode" + "->" + this.patternCode.toString() + "\n"); 
     if(this._patternCode != null) builder.append("_patternCode" + "->" + this._patternCode.toString() + "\n"); 
     if(this.patternOid != null) builder.append("patternOid" + "->" + this.patternOid.toString() + "\n"); 
     if(this._patternOid != null) builder.append("_patternOid" + "->" + this._patternOid.toString() + "\n"); 
     if(this.patternUuid != null) builder.append("patternUuid" + "->" + this.patternUuid.toString() + "\n"); 
     if(this._patternUuid != null) builder.append("_patternUuid" + "->" + this._patternUuid.toString() + "\n"); 
     if(this.patternId != null) builder.append("patternId" + "->" + this.patternId.toString() + "\n"); 
     if(this._patternId != null) builder.append("_patternId" + "->" + this._patternId.toString() + "\n"); 
     if(this.patternUnsignedInt != null) builder.append("patternUnsignedInt" + "->" + this.patternUnsignedInt.toString() + "\n"); 
     if(this._patternUnsignedInt != null) builder.append("_patternUnsignedInt" + "->" + this._patternUnsignedInt.toString() + "\n"); 
     if(this.patternPositiveInt != null) builder.append("patternPositiveInt" + "->" + this.patternPositiveInt.toString() + "\n"); 
     if(this._patternPositiveInt != null) builder.append("_patternPositiveInt" + "->" + this._patternPositiveInt.toString() + "\n"); 
     if(this.patternMarkdown != null) builder.append("patternMarkdown" + "->" + this.patternMarkdown.toString() + "\n"); 
     if(this._patternMarkdown != null) builder.append("_patternMarkdown" + "->" + this._patternMarkdown.toString() + "\n"); 
     if(this.patternElement != null) builder.append("patternElement" + "->" + this.patternElement.toString() + "\n"); 
     if(this.patternExtension != null) builder.append("patternExtension" + "->" + this.patternExtension.toString() + "\n"); 
     if(this.patternBackboneElement != null) builder.append("patternBackboneElement" + "->" + this.patternBackboneElement.toString() + "\n"); 
     if(this.patternNarrative != null) builder.append("patternNarrative" + "->" + this.patternNarrative.toString() + "\n"); 
     if(this.patternAnnotation != null) builder.append("patternAnnotation" + "->" + this.patternAnnotation.toString() + "\n"); 
     if(this.patternAttachment != null) builder.append("patternAttachment" + "->" + this.patternAttachment.toString() + "\n"); 
     if(this.patternIdentifier != null) builder.append("patternIdentifier" + "->" + this.patternIdentifier.toString() + "\n"); 
     if(this.patternCodeableConcept != null) builder.append("patternCodeableConcept" + "->" + this.patternCodeableConcept.toString() + "\n"); 
     if(this.patternCoding != null) builder.append("patternCoding" + "->" + this.patternCoding.toString() + "\n"); 
     if(this.patternQuantity != null) builder.append("patternQuantity" + "->" + this.patternQuantity.toString() + "\n"); 
     if(this.patternDuration != null) builder.append("patternDuration" + "->" + this.patternDuration.toString() + "\n"); 
     if(this.patternSimpleQuantity != null) builder.append("patternSimpleQuantity" + "->" + this.patternSimpleQuantity.toString() + "\n"); 
     if(this.patternDistance != null) builder.append("patternDistance" + "->" + this.patternDistance.toString() + "\n"); 
     if(this.patternCount != null) builder.append("patternCount" + "->" + this.patternCount.toString() + "\n"); 
     if(this.patternMoney != null) builder.append("patternMoney" + "->" + this.patternMoney.toString() + "\n"); 
     if(this.patternAge != null) builder.append("patternAge" + "->" + this.patternAge.toString() + "\n"); 
     if(this.patternRange != null) builder.append("patternRange" + "->" + this.patternRange.toString() + "\n"); 
     if(this.patternPeriod != null) builder.append("patternPeriod" + "->" + this.patternPeriod.toString() + "\n"); 
     if(this.patternRatio != null) builder.append("patternRatio" + "->" + this.patternRatio.toString() + "\n"); 
     if(this.patternReference != null) builder.append("patternReference" + "->" + this.patternReference.toString() + "\n"); 
     if(this.patternSampledData != null) builder.append("patternSampledData" + "->" + this.patternSampledData.toString() + "\n"); 
     if(this.patternSignature != null) builder.append("patternSignature" + "->" + this.patternSignature.toString() + "\n"); 
     if(this.patternHumanName != null) builder.append("patternHumanName" + "->" + this.patternHumanName.toString() + "\n"); 
     if(this.patternAddress != null) builder.append("patternAddress" + "->" + this.patternAddress.toString() + "\n"); 
     if(this.patternContactPoint != null) builder.append("patternContactPoint" + "->" + this.patternContactPoint.toString() + "\n"); 
     if(this.patternTiming != null) builder.append("patternTiming" + "->" + this.patternTiming.toString() + "\n"); 
     if(this.patternMeta != null) builder.append("patternMeta" + "->" + this.patternMeta.toString() + "\n"); 
     if(this.patternElementDefinition != null) builder.append("patternElementDefinition" + "->" + this.patternElementDefinition.toString() + "\n"); 
     if(this.patternContactDetail != null) builder.append("patternContactDetail" + "->" + this.patternContactDetail.toString() + "\n"); 
     if(this.patternContributor != null) builder.append("patternContributor" + "->" + this.patternContributor.toString() + "\n"); 
     if(this.patternDosage != null) builder.append("patternDosage" + "->" + this.patternDosage.toString() + "\n"); 
     if(this.patternRelatedArtifact != null) builder.append("patternRelatedArtifact" + "->" + this.patternRelatedArtifact.toString() + "\n"); 
     if(this.patternUsageContext != null) builder.append("patternUsageContext" + "->" + this.patternUsageContext.toString() + "\n"); 
     if(this.patternDataRequirement != null) builder.append("patternDataRequirement" + "->" + this.patternDataRequirement.toString() + "\n"); 
     if(this.patternParameterDefinition != null) builder.append("patternParameterDefinition" + "->" + this.patternParameterDefinition.toString() + "\n"); 
     if(this.patternTriggerDefinition != null) builder.append("patternTriggerDefinition" + "->" + this.patternTriggerDefinition.toString() + "\n"); 
     if(this.example != null) builder.append("example" + "->" + this.example.toString() + "\n"); 
     if(this.minValueDate != null) builder.append("minValueDate" + "->" + this.minValueDate.toString() + "\n"); 
     if(this._minValueDate != null) builder.append("_minValueDate" + "->" + this._minValueDate.toString() + "\n"); 
     if(this.minValueDateTime != null) builder.append("minValueDateTime" + "->" + this.minValueDateTime.toString() + "\n"); 
     if(this._minValueDateTime != null) builder.append("_minValueDateTime" + "->" + this._minValueDateTime.toString() + "\n"); 
     if(this.minValueInstant != null) builder.append("minValueInstant" + "->" + this.minValueInstant.toString() + "\n"); 
     if(this._minValueInstant != null) builder.append("_minValueInstant" + "->" + this._minValueInstant.toString() + "\n"); 
     if(this.minValueTime != null) builder.append("minValueTime" + "->" + this.minValueTime.toString() + "\n"); 
     if(this._minValueTime != null) builder.append("_minValueTime" + "->" + this._minValueTime.toString() + "\n"); 
     if(this.minValueDecimal != null) builder.append("minValueDecimal" + "->" + this.minValueDecimal.toString() + "\n"); 
     if(this._minValueDecimal != null) builder.append("_minValueDecimal" + "->" + this._minValueDecimal.toString() + "\n"); 
     if(this.minValueInteger != null) builder.append("minValueInteger" + "->" + this.minValueInteger.toString() + "\n"); 
     if(this._minValueInteger != null) builder.append("_minValueInteger" + "->" + this._minValueInteger.toString() + "\n"); 
     if(this.minValuePositiveInt != null) builder.append("minValuePositiveInt" + "->" + this.minValuePositiveInt.toString() + "\n"); 
     if(this._minValuePositiveInt != null) builder.append("_minValuePositiveInt" + "->" + this._minValuePositiveInt.toString() + "\n"); 
     if(this.minValueUnsignedInt != null) builder.append("minValueUnsignedInt" + "->" + this.minValueUnsignedInt.toString() + "\n"); 
     if(this._minValueUnsignedInt != null) builder.append("_minValueUnsignedInt" + "->" + this._minValueUnsignedInt.toString() + "\n"); 
     if(this.minValueQuantity != null) builder.append("minValueQuantity" + "->" + this.minValueQuantity.toString() + "\n"); 
     if(this.maxValueDate != null) builder.append("maxValueDate" + "->" + this.maxValueDate.toString() + "\n"); 
     if(this._maxValueDate != null) builder.append("_maxValueDate" + "->" + this._maxValueDate.toString() + "\n"); 
     if(this.maxValueDateTime != null) builder.append("maxValueDateTime" + "->" + this.maxValueDateTime.toString() + "\n"); 
     if(this._maxValueDateTime != null) builder.append("_maxValueDateTime" + "->" + this._maxValueDateTime.toString() + "\n"); 
     if(this.maxValueInstant != null) builder.append("maxValueInstant" + "->" + this.maxValueInstant.toString() + "\n"); 
     if(this._maxValueInstant != null) builder.append("_maxValueInstant" + "->" + this._maxValueInstant.toString() + "\n"); 
     if(this.maxValueTime != null) builder.append("maxValueTime" + "->" + this.maxValueTime.toString() + "\n"); 
     if(this._maxValueTime != null) builder.append("_maxValueTime" + "->" + this._maxValueTime.toString() + "\n"); 
     if(this.maxValueDecimal != null) builder.append("maxValueDecimal" + "->" + this.maxValueDecimal.toString() + "\n"); 
     if(this._maxValueDecimal != null) builder.append("_maxValueDecimal" + "->" + this._maxValueDecimal.toString() + "\n"); 
     if(this.maxValueInteger != null) builder.append("maxValueInteger" + "->" + this.maxValueInteger.toString() + "\n"); 
     if(this._maxValueInteger != null) builder.append("_maxValueInteger" + "->" + this._maxValueInteger.toString() + "\n"); 
     if(this.maxValuePositiveInt != null) builder.append("maxValuePositiveInt" + "->" + this.maxValuePositiveInt.toString() + "\n"); 
     if(this._maxValuePositiveInt != null) builder.append("_maxValuePositiveInt" + "->" + this._maxValuePositiveInt.toString() + "\n"); 
     if(this.maxValueUnsignedInt != null) builder.append("maxValueUnsignedInt" + "->" + this.maxValueUnsignedInt.toString() + "\n"); 
     if(this._maxValueUnsignedInt != null) builder.append("_maxValueUnsignedInt" + "->" + this._maxValueUnsignedInt.toString() + "\n"); 
     if(this.maxValueQuantity != null) builder.append("maxValueQuantity" + "->" + this.maxValueQuantity.toString() + "\n"); 
     if(this.maxLength != null) builder.append("maxLength" + "->" + this.maxLength.toString() + "\n"); 
     if(this._maxLength != null) builder.append("_maxLength" + "->" + this._maxLength.toString() + "\n"); 
     if(this.condition != null) builder.append("condition" + "->" + this.condition.toString() + "\n"); 
     if(this._condition != null) builder.append("_condition" + "->" + this._condition.toString() + "\n"); 
     if(this.constraint != null) builder.append("constraint" + "->" + this.constraint.toString() + "\n"); 
     if(this.mustSupport != null) builder.append("mustSupport" + "->" + this.mustSupport.toString() + "\n"); 
     if(this._mustSupport != null) builder.append("_mustSupport" + "->" + this._mustSupport.toString() + "\n"); 
     if(this.isModifier != null) builder.append("isModifier" + "->" + this.isModifier.toString() + "\n"); 
     if(this._isModifier != null) builder.append("_isModifier" + "->" + this._isModifier.toString() + "\n"); 
     if(this.isSummary != null) builder.append("isSummary" + "->" + this.isSummary.toString() + "\n"); 
     if(this._isSummary != null) builder.append("_isSummary" + "->" + this._isSummary.toString() + "\n"); 
     if(this.binding != null) builder.append("binding" + "->" + this.binding.toString() + "\n"); 
     if(this.mapping != null) builder.append("mapping" + "->" + this.mapping.toString() + "\n"); ;
    return builder.toString();
  }

  /**
   * Auto generated from the FHIR specification
   * generated on 07/14/2018
   */
  public enum RepresentationEnum {
  	xmlAttr,
  	xmlText,
  	typeAttr,
  	cdaText,
  	xhtml,
  	UNKNOWN;
  	public static java.util.List<String> fromCode(java.util.List<String> strVal) {
  	  		java.util.List<String> result = new java.util.ArrayList<>();
  	  		for (String s : strVal) {
  	  			switch (s) {
  		  			case "xmlAttr" : { result.add(xmlAttr.toString()); }
  		  			case "xmlText" : { result.add(xmlText.toString()); }
  		  			case "typeAttr" : { result.add(typeAttr.toString()); }
  		  			case "cdaText" : { result.add(cdaText.toString()); }
  		  			case "xhtml" : { result.add(xhtml.toString()); }
  		  			default:
  		  				result.add(UNKNOWN.toString());
  	  			}
  	  		}
  	  		return result;
  	  	}
  }
}