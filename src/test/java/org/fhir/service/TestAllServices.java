package org.fhir.service;

import java.nio.charset.Charset;
import java.util.List;
import java.util.Arrays;
import org.fhir.utils.FileUtils;
import org.fhir.pojo.*;
import org.fhir.entity.*;
import org.fhir.dao.*;
import org.junit.Test;
import static org.junit.Assert.*;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.IsNull.notNullValue;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnit;
import org.mockito.junit.MockitoRule;
/* *
 * Auto generated from the FHIR samples-json
 * Test read json from json file and convert to coresponding Java class
 * testing data are extracted from the json files
 */
public class TestAllServices {
	@Rule
  public MockitoRule mockitoRule = MockitoJUnit.rule();

  @Mock AppointmentDao appointmentDao; 
  @Mock AccountDao accountDao; 
  @Mock ReferralRequestDao referralrequestDao; 
  @Mock MessageDefinitionDao messagedefinitionDao; 
  @Mock DocumentManifestDao documentmanifestDao; 
  @Mock GoalDao goalDao; 
  @Mock EndpointDao endpointDao; 
  @Mock EnrollmentRequestDao enrollmentrequestDao; 
  @Mock ConsentDao consentDao; 
  @Mock MedicationDao medicationDao; 
  @Mock MeasureDao measureDao; 
  @Mock CapabilityStatementDao capabilitystatementDao; 
  @Mock ResearchSubjectDao researchsubjectDao; 
  @Mock SubscriptionDao subscriptionDao; 
  @Mock GraphDefinitionDao graphdefinitionDao; 
  @Mock DocumentReferenceDao documentreferenceDao; 
  @Mock ImagingManifestDao imagingmanifestDao; 
  @Mock FHIRListDao fhirlistDao; 
  @Mock MeasureReportDao measurereportDao; 
  @Mock PractitionerRoleDao practitionerroleDao; 
  @Mock RelatedPersonDao relatedpersonDao; 
  @Mock SupplyRequestDao supplyrequestDao; 
  @Mock PractitionerDao practitionerDao; 
  @Mock ExpansionProfileDao expansionprofileDao; 
  @Mock SlotDao slotDao; 
  @Mock ContractDao contractDao; 
  @Mock PersonDao personDao; 
  @Mock RiskAssessmentDao riskassessmentDao; 
  @Mock PaymentNoticeDao paymentnoticeDao; 
  @Mock GroupDao groupDao; 
  @Mock OrganizationDao organizationDao; 
  @Mock CareTeamDao careteamDao; 
  @Mock ImplementationGuideDao implementationguideDao; 
  @Mock ImagingStudyDao imagingstudyDao; 
  @Mock DeviceComponentDao devicecomponentDao; 
  @Mock FamilyMemberHistoryDao familymemberhistoryDao; 
  @Mock ChargeItemDao chargeitemDao; 
  @Mock SubstanceDao substanceDao; 
  @Mock EncounterDao encounterDao; 
  @Mock ServiceDefinitionDao servicedefinitionDao; 
  @Mock ActivityDefinitionDao activitydefinitionDao; 
  @Mock CommunicationDao communicationDao; 
  @Mock LinkageDao linkageDao; 
  @Mock DeviceUseStatementDao deviceusestatementDao; 
  @Mock RequestGroupDao requestgroupDao; 
  @Mock DeviceRequestDao devicerequestDao; 
  @Mock MessageHeaderDao messageheaderDao; 
  @Mock ImmunizationRecommendationDao immunizationrecommendationDao; 
  @Mock BodySiteDao bodysiteDao; 
  @Mock ProvenanceDao provenanceDao; 
  @Mock TaskDao taskDao; 
  @Mock QuestionnaireDao questionnaireDao; 
  @Mock ExplanationOfBenefitDao explanationofbenefitDao; 
  @Mock ResearchStudyDao researchstudyDao; 
  @Mock SpecimenDao specimenDao; 
  @Mock StructureDefinitionDao structuredefinitionDao; 
  @Mock CarePlanDao careplanDao; 
  @Mock AllergyIntoleranceDao allergyintoleranceDao; 
  @Mock EpisodeOfCareDao episodeofcareDao; 
  @Mock OperationOutcomeDao operationoutcomeDao; 
  @Mock ProcedureDao procedureDao; 
  @Mock ConceptMapDao conceptmapDao; 
  @Mock ValueSetDao valuesetDao; 
  @Mock OperationDefinitionDao operationdefinitionDao; 
  @Mock MedicationRequestDao medicationrequestDao; 
  @Mock ImmunizationDao immunizationDao; 
  @Mock DeviceDao deviceDao; 
  @Mock VisionPrescriptionDao visionprescriptionDao; 
  @Mock MediaDao mediaDao; 
  @Mock ProcedureRequestDao procedurerequestDao; 
  @Mock EligibilityResponseDao eligibilityresponseDao; 
  @Mock SequenceDao sequenceDao; 
  @Mock DeviceMetricDao devicemetricDao; 
  @Mock CodeSystemDao codesystemDao; 
  @Mock FlagDao flagDao; 
  @Mock AppointmentResponseDao appointmentresponseDao; 
  @Mock AdverseEventDao adverseeventDao; 
  @Mock GuidanceResponseDao guidanceresponseDao; 
  @Mock ObservationDao observationDao; 
  @Mock MedicationAdministrationDao medicationadministrationDao; 
  @Mock EnrollmentResponseDao enrollmentresponseDao; 
  @Mock LibraryDao libraryDao; 
  @Mock BinaryDao binaryDao; 
  @Mock MedicationStatementDao medicationstatementDao; 
  @Mock CommunicationRequestDao communicationrequestDao; 
  @Mock BasicDao basicDao; 
  @Mock ProcessRequestDao processrequestDao; 
  @Mock EligibilityRequestDao eligibilityrequestDao; 
  @Mock ClaimResponseDao claimresponseDao; 
  @Mock MedicationDispenseDao medicationdispenseDao; 
  @Mock DiagnosticReportDao diagnosticreportDao; 
  @Mock HealthcareServiceDao healthcareserviceDao; 
  @Mock DataElementDao dataelementDao; 
  @Mock NutritionOrderDao nutritionorderDao; 
  @Mock AuditEventDao auditeventDao; 
  @Mock PaymentReconciliationDao paymentreconciliationDao; 
  @Mock ConditionDao conditionDao; 
  @Mock CompositionDao compositionDao; 
  @Mock DetectedIssueDao detectedissueDao; 
  @Mock BundleDao bundleDao; 
  @Mock CompartmentDefinitionDao compartmentdefinitionDao; 
  @Mock PatientDao patientDao; 
  @Mock CoverageDao coverageDao; 
  @Mock QuestionnaireResponseDao questionnaireresponseDao; 
  @Mock ProcessResponseDao processresponseDao; 
  @Mock NamingSystemDao namingsystemDao; 
  @Mock ScheduleDao scheduleDao; 
  @Mock SupplyDeliveryDao supplydeliveryDao; 
  @Mock ClinicalImpressionDao clinicalimpressionDao; 
  @Mock PlanDefinitionDao plandefinitionDao; 
  @Mock ClaimDao claimDao; 
  @Mock LocationDao locationDao; ;

  @Mock AppointmentServiceImpl appointmentService; 
  @Mock AccountServiceImpl accountService; 
  @Mock ReferralRequestServiceImpl referralrequestService; 
  @Mock MessageDefinitionServiceImpl messagedefinitionService; 
  @Mock DocumentManifestServiceImpl documentmanifestService; 
  @Mock GoalServiceImpl goalService; 
  @Mock EndpointServiceImpl endpointService; 
  @Mock EnrollmentRequestServiceImpl enrollmentrequestService; 
  @Mock ConsentServiceImpl consentService; 
  @Mock MedicationServiceImpl medicationService; 
  @Mock MeasureServiceImpl measureService; 
  @Mock CapabilityStatementServiceImpl capabilitystatementService; 
  @Mock ResearchSubjectServiceImpl researchsubjectService; 
  @Mock SubscriptionServiceImpl subscriptionService; 
  @Mock GraphDefinitionServiceImpl graphdefinitionService; 
  @Mock DocumentReferenceServiceImpl documentreferenceService; 
  @Mock ImagingManifestServiceImpl imagingmanifestService; 
  @Mock FHIRListServiceImpl fhirlistService; 
  @Mock MeasureReportServiceImpl measurereportService; 
  @Mock PractitionerRoleServiceImpl practitionerroleService; 
  @Mock RelatedPersonServiceImpl relatedpersonService; 
  @Mock SupplyRequestServiceImpl supplyrequestService; 
  @Mock PractitionerServiceImpl practitionerService; 
  @Mock ExpansionProfileServiceImpl expansionprofileService; 
  @Mock SlotServiceImpl slotService; 
  @Mock ContractServiceImpl contractService; 
  @Mock PersonServiceImpl personService; 
  @Mock RiskAssessmentServiceImpl riskassessmentService; 
  @Mock PaymentNoticeServiceImpl paymentnoticeService; 
  @Mock GroupServiceImpl groupService; 
  @Mock OrganizationServiceImpl organizationService; 
  @Mock CareTeamServiceImpl careteamService; 
  @Mock ImplementationGuideServiceImpl implementationguideService; 
  @Mock ImagingStudyServiceImpl imagingstudyService; 
  @Mock DeviceComponentServiceImpl devicecomponentService; 
  @Mock FamilyMemberHistoryServiceImpl familymemberhistoryService; 
  @Mock ChargeItemServiceImpl chargeitemService; 
  @Mock SubstanceServiceImpl substanceService; 
  @Mock EncounterServiceImpl encounterService; 
  @Mock ServiceDefinitionServiceImpl servicedefinitionService; 
  @Mock ActivityDefinitionServiceImpl activitydefinitionService; 
  @Mock CommunicationServiceImpl communicationService; 
  @Mock LinkageServiceImpl linkageService; 
  @Mock DeviceUseStatementServiceImpl deviceusestatementService; 
  @Mock RequestGroupServiceImpl requestgroupService; 
  @Mock DeviceRequestServiceImpl devicerequestService; 
  @Mock MessageHeaderServiceImpl messageheaderService; 
  @Mock ImmunizationRecommendationServiceImpl immunizationrecommendationService; 
  @Mock BodySiteServiceImpl bodysiteService; 
  @Mock ProvenanceServiceImpl provenanceService; 
  @Mock TaskServiceImpl taskService; 
  @Mock QuestionnaireServiceImpl questionnaireService; 
  @Mock ExplanationOfBenefitServiceImpl explanationofbenefitService; 
  @Mock ResearchStudyServiceImpl researchstudyService; 
  @Mock SpecimenServiceImpl specimenService; 
  @Mock StructureDefinitionServiceImpl structuredefinitionService; 
  @Mock CarePlanServiceImpl careplanService; 
  @Mock AllergyIntoleranceServiceImpl allergyintoleranceService; 
  @Mock EpisodeOfCareServiceImpl episodeofcareService; 
  @Mock OperationOutcomeServiceImpl operationoutcomeService; 
  @Mock ProcedureServiceImpl procedureService; 
  @Mock ConceptMapServiceImpl conceptmapService; 
  @Mock ValueSetServiceImpl valuesetService; 
  @Mock OperationDefinitionServiceImpl operationdefinitionService; 
  @Mock MedicationRequestServiceImpl medicationrequestService; 
  @Mock ImmunizationServiceImpl immunizationService; 
  @Mock DeviceServiceImpl deviceService; 
  @Mock VisionPrescriptionServiceImpl visionprescriptionService; 
  @Mock MediaServiceImpl mediaService; 
  @Mock ProcedureRequestServiceImpl procedurerequestService; 
  @Mock EligibilityResponseServiceImpl eligibilityresponseService; 
  @Mock SequenceServiceImpl sequenceService; 
  @Mock DeviceMetricServiceImpl devicemetricService; 
  @Mock CodeSystemServiceImpl codesystemService; 
  @Mock FlagServiceImpl flagService; 
  @Mock AppointmentResponseServiceImpl appointmentresponseService; 
  @Mock AdverseEventServiceImpl adverseeventService; 
  @Mock GuidanceResponseServiceImpl guidanceresponseService; 
  @Mock ObservationServiceImpl observationService; 
  @Mock MedicationAdministrationServiceImpl medicationadministrationService; 
  @Mock EnrollmentResponseServiceImpl enrollmentresponseService; 
  @Mock LibraryServiceImpl libraryService; 
  @Mock BinaryServiceImpl binaryService; 
  @Mock MedicationStatementServiceImpl medicationstatementService; 
  @Mock CommunicationRequestServiceImpl communicationrequestService; 
  @Mock BasicServiceImpl basicService; 
  @Mock ProcessRequestServiceImpl processrequestService; 
  @Mock EligibilityRequestServiceImpl eligibilityrequestService; 
  @Mock ClaimResponseServiceImpl claimresponseService; 
  @Mock MedicationDispenseServiceImpl medicationdispenseService; 
  @Mock DiagnosticReportServiceImpl diagnosticreportService; 
  @Mock HealthcareServiceServiceImpl healthcareserviceService; 
  @Mock DataElementServiceImpl dataelementService; 
  @Mock NutritionOrderServiceImpl nutritionorderService; 
  @Mock AuditEventServiceImpl auditeventService; 
  @Mock PaymentReconciliationServiceImpl paymentreconciliationService; 
  @Mock ConditionServiceImpl conditionService; 
  @Mock CompositionServiceImpl compositionService; 
  @Mock DetectedIssueServiceImpl detectedissueService; 
  @Mock BundleServiceImpl bundleService; 
  @Mock CompartmentDefinitionServiceImpl compartmentdefinitionService; 
  @Mock PatientServiceImpl patientService; 
  @Mock CoverageServiceImpl coverageService; 
  @Mock QuestionnaireResponseServiceImpl questionnaireresponseService; 
  @Mock ProcessResponseServiceImpl processresponseService; 
  @Mock NamingSystemServiceImpl namingsystemService; 
  @Mock ScheduleServiceImpl scheduleService; 
  @Mock SupplyDeliveryServiceImpl supplydeliveryService; 
  @Mock ClinicalImpressionServiceImpl clinicalimpressionService; 
  @Mock PlanDefinitionServiceImpl plandefinitionService; 
  @Mock ClaimServiceImpl claimService; 
  @Mock LocationServiceImpl locationService; ;

  @Before
  public void before() {
  	appointmentService = new AppointmentServiceImpl(appointmentDao); 
  	accountService = new AccountServiceImpl(accountDao); 
  	referralrequestService = new ReferralRequestServiceImpl(referralrequestDao); 
  	messagedefinitionService = new MessageDefinitionServiceImpl(messagedefinitionDao); 
  	documentmanifestService = new DocumentManifestServiceImpl(documentmanifestDao); 
  	goalService = new GoalServiceImpl(goalDao); 
  	endpointService = new EndpointServiceImpl(endpointDao); 
  	enrollmentrequestService = new EnrollmentRequestServiceImpl(enrollmentrequestDao); 
  	consentService = new ConsentServiceImpl(consentDao); 
  	medicationService = new MedicationServiceImpl(medicationDao); 
  	measureService = new MeasureServiceImpl(measureDao); 
  	capabilitystatementService = new CapabilityStatementServiceImpl(capabilitystatementDao); 
  	researchsubjectService = new ResearchSubjectServiceImpl(researchsubjectDao); 
  	subscriptionService = new SubscriptionServiceImpl(subscriptionDao); 
  	graphdefinitionService = new GraphDefinitionServiceImpl(graphdefinitionDao); 
  	documentreferenceService = new DocumentReferenceServiceImpl(documentreferenceDao); 
  	imagingmanifestService = new ImagingManifestServiceImpl(imagingmanifestDao); 
  	fhirlistService = new FHIRListServiceImpl(fhirlistDao); 
  	measurereportService = new MeasureReportServiceImpl(measurereportDao); 
  	practitionerroleService = new PractitionerRoleServiceImpl(practitionerroleDao); 
  	relatedpersonService = new RelatedPersonServiceImpl(relatedpersonDao); 
  	supplyrequestService = new SupplyRequestServiceImpl(supplyrequestDao); 
  	practitionerService = new PractitionerServiceImpl(practitionerDao); 
  	expansionprofileService = new ExpansionProfileServiceImpl(expansionprofileDao); 
  	slotService = new SlotServiceImpl(slotDao); 
  	contractService = new ContractServiceImpl(contractDao); 
  	personService = new PersonServiceImpl(personDao); 
  	riskassessmentService = new RiskAssessmentServiceImpl(riskassessmentDao); 
  	paymentnoticeService = new PaymentNoticeServiceImpl(paymentnoticeDao); 
  	groupService = new GroupServiceImpl(groupDao); 
  	organizationService = new OrganizationServiceImpl(organizationDao); 
  	careteamService = new CareTeamServiceImpl(careteamDao); 
  	implementationguideService = new ImplementationGuideServiceImpl(implementationguideDao); 
  	imagingstudyService = new ImagingStudyServiceImpl(imagingstudyDao); 
  	devicecomponentService = new DeviceComponentServiceImpl(devicecomponentDao); 
  	familymemberhistoryService = new FamilyMemberHistoryServiceImpl(familymemberhistoryDao); 
  	chargeitemService = new ChargeItemServiceImpl(chargeitemDao); 
  	substanceService = new SubstanceServiceImpl(substanceDao); 
  	encounterService = new EncounterServiceImpl(encounterDao); 
  	servicedefinitionService = new ServiceDefinitionServiceImpl(servicedefinitionDao); 
  	activitydefinitionService = new ActivityDefinitionServiceImpl(activitydefinitionDao); 
  	communicationService = new CommunicationServiceImpl(communicationDao); 
  	linkageService = new LinkageServiceImpl(linkageDao); 
  	deviceusestatementService = new DeviceUseStatementServiceImpl(deviceusestatementDao); 
  	requestgroupService = new RequestGroupServiceImpl(requestgroupDao); 
  	devicerequestService = new DeviceRequestServiceImpl(devicerequestDao); 
  	messageheaderService = new MessageHeaderServiceImpl(messageheaderDao); 
  	immunizationrecommendationService = new ImmunizationRecommendationServiceImpl(immunizationrecommendationDao); 
  	bodysiteService = new BodySiteServiceImpl(bodysiteDao); 
  	provenanceService = new ProvenanceServiceImpl(provenanceDao); 
  	taskService = new TaskServiceImpl(taskDao); 
  	questionnaireService = new QuestionnaireServiceImpl(questionnaireDao); 
  	explanationofbenefitService = new ExplanationOfBenefitServiceImpl(explanationofbenefitDao); 
  	researchstudyService = new ResearchStudyServiceImpl(researchstudyDao); 
  	specimenService = new SpecimenServiceImpl(specimenDao); 
  	structuredefinitionService = new StructureDefinitionServiceImpl(structuredefinitionDao); 
  	careplanService = new CarePlanServiceImpl(careplanDao); 
  	allergyintoleranceService = new AllergyIntoleranceServiceImpl(allergyintoleranceDao); 
  	episodeofcareService = new EpisodeOfCareServiceImpl(episodeofcareDao); 
  	operationoutcomeService = new OperationOutcomeServiceImpl(operationoutcomeDao); 
  	procedureService = new ProcedureServiceImpl(procedureDao); 
  	conceptmapService = new ConceptMapServiceImpl(conceptmapDao); 
  	valuesetService = new ValueSetServiceImpl(valuesetDao); 
  	operationdefinitionService = new OperationDefinitionServiceImpl(operationdefinitionDao); 
  	medicationrequestService = new MedicationRequestServiceImpl(medicationrequestDao); 
  	immunizationService = new ImmunizationServiceImpl(immunizationDao); 
  	deviceService = new DeviceServiceImpl(deviceDao); 
  	visionprescriptionService = new VisionPrescriptionServiceImpl(visionprescriptionDao); 
  	mediaService = new MediaServiceImpl(mediaDao); 
  	procedurerequestService = new ProcedureRequestServiceImpl(procedurerequestDao); 
  	eligibilityresponseService = new EligibilityResponseServiceImpl(eligibilityresponseDao); 
  	sequenceService = new SequenceServiceImpl(sequenceDao); 
  	devicemetricService = new DeviceMetricServiceImpl(devicemetricDao); 
  	codesystemService = new CodeSystemServiceImpl(codesystemDao); 
  	flagService = new FlagServiceImpl(flagDao); 
  	appointmentresponseService = new AppointmentResponseServiceImpl(appointmentresponseDao); 
  	adverseeventService = new AdverseEventServiceImpl(adverseeventDao); 
  	guidanceresponseService = new GuidanceResponseServiceImpl(guidanceresponseDao); 
  	observationService = new ObservationServiceImpl(observationDao); 
  	medicationadministrationService = new MedicationAdministrationServiceImpl(medicationadministrationDao); 
  	enrollmentresponseService = new EnrollmentResponseServiceImpl(enrollmentresponseDao); 
  	libraryService = new LibraryServiceImpl(libraryDao); 
  	binaryService = new BinaryServiceImpl(binaryDao); 
  	medicationstatementService = new MedicationStatementServiceImpl(medicationstatementDao); 
  	communicationrequestService = new CommunicationRequestServiceImpl(communicationrequestDao); 
  	basicService = new BasicServiceImpl(basicDao); 
  	processrequestService = new ProcessRequestServiceImpl(processrequestDao); 
  	eligibilityrequestService = new EligibilityRequestServiceImpl(eligibilityrequestDao); 
  	claimresponseService = new ClaimResponseServiceImpl(claimresponseDao); 
  	medicationdispenseService = new MedicationDispenseServiceImpl(medicationdispenseDao); 
  	diagnosticreportService = new DiagnosticReportServiceImpl(diagnosticreportDao); 
  	healthcareserviceService = new HealthcareServiceServiceImpl(healthcareserviceDao); 
  	dataelementService = new DataElementServiceImpl(dataelementDao); 
  	nutritionorderService = new NutritionOrderServiceImpl(nutritionorderDao); 
  	auditeventService = new AuditEventServiceImpl(auditeventDao); 
  	paymentreconciliationService = new PaymentReconciliationServiceImpl(paymentreconciliationDao); 
  	conditionService = new ConditionServiceImpl(conditionDao); 
  	compositionService = new CompositionServiceImpl(compositionDao); 
  	detectedissueService = new DetectedIssueServiceImpl(detectedissueDao); 
  	bundleService = new BundleServiceImpl(bundleDao); 
  	compartmentdefinitionService = new CompartmentDefinitionServiceImpl(compartmentdefinitionDao); 
  	patientService = new PatientServiceImpl(patientDao); 
  	coverageService = new CoverageServiceImpl(coverageDao); 
  	questionnaireresponseService = new QuestionnaireResponseServiceImpl(questionnaireresponseDao); 
  	processresponseService = new ProcessResponseServiceImpl(processresponseDao); 
  	namingsystemService = new NamingSystemServiceImpl(namingsystemDao); 
  	scheduleService = new ScheduleServiceImpl(scheduleDao); 
  	supplydeliveryService = new SupplyDeliveryServiceImpl(supplydeliveryDao); 
  	clinicalimpressionService = new ClinicalImpressionServiceImpl(clinicalimpressionDao); 
  	plandefinitionService = new PlanDefinitionServiceImpl(plandefinitionDao); 
  	claimService = new ClaimServiceImpl(claimDao); 
  	locationService = new LocationServiceImpl(locationDao); ;
  }

    @Test
    public void testLoadSequence1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/hdlcholesterol.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "hdlcholesterol", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-example-fda-vcfeval.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "fda-vcfeval-comparison", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/immunization-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-familymemberhistory-severity.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "familymemberhistory-severity", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-contract-signer-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "contract-signer-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadFHIRList1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/list-example-allergies.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     FHIRList fhirlist = FHIRList.fromJson(json);

     List<FHIRList> list = Arrays.asList(new FHIRList[] {fhirlist});

      when(fhirlistService.selectAll()).thenReturn(list);

      List<FHIRList> result = fhirlistService.selectAll();

      assertEquals("Expect ", "current-allergies", result.get(0).getId()); 
    }
    @Test
    public void testLoadNutritionOrder1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder-example-pureeddiet.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NutritionOrder nutritionorder = NutritionOrder.fromJson(json);

     List<NutritionOrder> list = Arrays.asList(new NutritionOrder[] {nutritionorder});

      when(nutritionorderService.selectAll()).thenReturn(list);

      List<NutritionOrder> result = nutritionorderService.selectAll();

      assertEquals("Expect ", "pureeddiet", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careteam-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operationoutcome-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitioner1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-example-f002-pv.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Practitioner practitioner = Practitioner.fromJson(json);

     List<Practitioner> list = Arrays.asList(new Practitioner[] {practitioner});

      when(practitionerService.selectAll()).thenReturn(list);

      List<Practitioner> result = practitionerService.selectAll();

      assertEquals("Expect ", "f002", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/eligibilityresponse.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "EligibilityResponse", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/hlaresult.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "hlaresult", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/familymemberhistory-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/measure.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Measure", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-parameter-group.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "parameter-group", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-device-statement-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "device-statement-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-structuremap-transform.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "StructureMap-transform", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/v2-tables.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "v2-valuesets", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-examples-general.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "72ac8493-52ac-41bd-8d5d-7258c289b5ea", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-postbox.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-postBox", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/searchparameter.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "SearchParameter", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bodytemp.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "bodytemp", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bodyweight-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-condition-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "condition-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-encounter-location-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "encounter-location-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-contract-content-derivative.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "contract-content-derivative", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-additional-instruction-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "additional-instruction-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0315.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0315", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0308.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0308", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/subscription-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadDiagnosticReport1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DiagnosticReport diagnosticreport = DiagnosticReport.fromJson(json);

     List<DiagnosticReport> list = Arrays.asList(new DiagnosticReport[] {diagnosticreport});

      when(diagnosticreportService.selectAll()).thenReturn(list);

      List<DiagnosticReport> result = diagnosticreportService.selectAll();

      assertEquals("Expect ", "101", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/condition-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-search-entry-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "search-entry-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-all-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "all-types", result.get(0).getId()); 
    }
    @Test
    public void testLoadActivityDefinition1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/activitydefinition-provide-mosquito-prevention-advice.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ActivityDefinition activitydefinition = ActivityDefinition.fromJson(json);

     List<ActivityDefinition> list = Arrays.asList(new ActivityDefinition[] {activitydefinition});

      when(activitydefinitionService.selectAll()).thenReturn(list);

      List<ActivityDefinition> result = activitydefinitionService.selectAll();

      assertEquals("Expect ", "provide-mosquito-prevention-advice", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/devicemetricobservation.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "devicemetricobservation", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaire-example-bluebook.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "bb", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-observation-relationshiptypes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "observation-relationshiptypes", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0306.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0306", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-surface.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "surface", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bodyweight.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "bodyweight", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-clinical-findings.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "clinical-findings", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/plandefinition-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadFamilyMemberHistory1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/familymemberhistory-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     FamilyMemberHistory familymemberhistory = FamilyMemberHistory.fromJson(json);

     List<FamilyMemberHistory> list = Arrays.asList(new FamilyMemberHistory[] {familymemberhistory});

      when(familymemberhistoryService.selectAll()).thenReturn(list);

      List<FamilyMemberHistory> result = familymemberhistoryService.selectAll();

      assertEquals("Expect ", "father", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-composition-document.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Composition-document", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-auditevent-anonymized.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "auditevent-Anonymized", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-capabilitystatement-conforms.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "CapabilityStatement-conforms", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-entformula-additive.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "entformula-additive", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/clinicalimpression.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ClinicalImpression", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-elementdefinition-bestpractice.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "elementdefinition-bestpractice", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/linkage.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Linkage", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-humanname-own-prefix.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "humanname-own-prefix", result.get(0).getId()); 
    }
    @Test
    public void testLoadAuditEvent1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/audit-event-example-pixQuery.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     AuditEvent auditevent = AuditEvent.fromJson(json);

     List<AuditEvent> list = Arrays.asList(new AuditEvent[] {auditevent});

      when(auditeventService.selectAll()).thenReturn(list);

      List<AuditEvent> result = auditeventService.selectAll();

      assertEquals("Expect ", "example-pixQuery", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careteam.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "CareTeam", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example-pgx.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "example-pgx", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-medication-statement-status-v3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-medication-statement-status-v3", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition17FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/resource.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Resource", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/coord-0base-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "coord-0-base", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-ex-diagnosistype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "ex-diagnosistype", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-missing-tooth-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "missing-tooth-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-list-item-flag.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "list-item-flag", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-participationstatus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "participationstatus", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-bodysite-relative-location.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "bodysite-relative-location", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition18FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-translation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "translation", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition19FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/metadataresource.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "MetadataResource", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition20FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/researchsubject.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ResearchSubject", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0328.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0328", result.get(0).getId()); 
    }
    @Test
    public void testLoadVisionPrescription1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/visionprescription-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     VisionPrescription visionprescription = VisionPrescription.fromJson(json);

     List<VisionPrescription> list = Arrays.asList(new VisionPrescription[] {visionprescription});

      when(visionprescriptionService.selectAll()).thenReturn(list);

      List<VisionPrescription> result = visionprescriptionService.selectAll();

      assertEquals("Expect ", "33123", result.get(0).getId()); 
    }
    @Test
    public void testLoadOrganization1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/organization-example-mmanu.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Organization organization = Organization.fromJson(json);

     List<Organization> list = Arrays.asList(new Organization[] {organization});

      when(organizationService.selectAll()).thenReturn(list);

      List<Organization> result = organizationService.selectAll();

      assertEquals("Expect ", "mmanu", result.get(0).getId()); 
    }
    @Test
    public void testLoadCarePlan1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careplan-example-f202-malignancy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CarePlan careplan = CarePlan.fromJson(json);

     List<CarePlan> list = Arrays.asList(new CarePlan[] {careplan});

      when(careplanService.selectAll()).thenReturn(list);

      List<CarePlan> result = careplanService.selectAll();

      assertEquals("Expect ", "f202", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition21FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticsdnaregionname.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsDNARegionName", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-testscript-operation-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "testscript-operation-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-graphic-example-2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "graphic-example-2", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-goal-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "goal-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadImmunizationRecommendation1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/immunizationrecommendation-target-disease-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ImmunizationRecommendation immunizationrecommendation = ImmunizationRecommendation.fromJson(json);

     List<ImmunizationRecommendation> list = Arrays.asList(new ImmunizationRecommendation[] {immunizationrecommendation});

      when(immunizationrecommendationService.selectAll()).thenReturn(list);

      List<ImmunizationRecommendation> result = immunizationrecommendationService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example-biopsy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "biopsy", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/conceptmap-example-specimen-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "102", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition22FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/supplyrequest.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "SupplyRequest", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition23FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/immunizationrecommendation.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ImmunizationRecommendation", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-operation-parameter-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "operation-parameter-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadBodySite1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bodysite-example-skin-patch.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     BodySite bodysite = BodySite.fromJson(json);

     List<BodySite> list = Arrays.asList(new BodySite[] {bodysite});

      when(bodysiteService.selectAll()).thenReturn(list);

      List<BodySite> result = bodysiteService.selectAll();

      assertEquals("Expect ", "skin-patch", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-digital-media-subtype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "digital-media-subtype", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/healthcareservice-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-audit-entity-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "audit-entity-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-questionnaire-usage-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "questionnaire-usage-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition24FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/identifier.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Identifier", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-example-yesnodontknow.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "yesnodontknow", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-vision.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "660150", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-goal-relationship-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "goal-relationship-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-variant-state.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "variant-state", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition25FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedure-schedule.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedure-schedule", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-activity-definition-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "activity-definition-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-measure-data-usage.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "measure-data-usage", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-issue-severity.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "issue-severity", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-request-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "request-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition26FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/familymemberhistory-genetic.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "familymemberhistory-genetic", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-measure-scoring.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "measure-scoring", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet17FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-http-operations.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "http-operations", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition27FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/meta.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Meta", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition28FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticsaminoacidchangetype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsAminoAcidChangeType", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition29FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-allergyintolerance-duration.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "allergyintolerance-duration", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet18FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-example-inactive.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "inactive", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet19FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-food-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "food-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0322.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0322", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-TPMT-haplotype-one.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "example-TPMT-haplotype-one", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet20FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-response-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "response-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition30FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/structuredefinition.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "StructureDefinition", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem17FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-communication-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "communication-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition31FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/enrollmentresponse.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "EnrollmentResponse", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet21FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-name-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "name-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadEndpoint1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/endpoint-example-wadors.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Endpoint endpoint = Endpoint.fromJson(json);

     List<Endpoint> list = Arrays.asList(new Endpoint[] {endpoint});

      when(endpointService.selectAll()).thenReturn(list);

      List<Endpoint> result = endpointService.selectAll();

      assertEquals("Expect ", "example-wadors", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaireResponse1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaireresponse-example-f201-lifelines.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     QuestionnaireResponse questionnaireresponse = QuestionnaireResponse.fromJson(json);

     List<QuestionnaireResponse> list = Arrays.asList(new QuestionnaireResponse[] {questionnaireresponse});

      when(questionnaireresponseService.selectAll()).thenReturn(list);

      List<QuestionnaireResponse> result = questionnaireresponseService.selectAll();

      assertEquals("Expect ", "f201", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem18FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-transaction-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "transaction-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet22FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-service-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "service-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem19FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-message-reason-encounter.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "message-reason-encounter", result.get(0).getId()); 
    }
    @Test
    public void testLoadSubstance1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/substance-example-silver-nitrate-product.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Substance substance = Substance.fromJson(json);

     List<Substance> list = Arrays.asList(new Substance[] {substance});

      when(substanceService.selectAll()).thenReturn(list);

      List<Substance> result = substanceService.selectAll();

      assertEquals("Expect ", "f204", result.get(0).getId()); 
    }
    @Test
    public void testLoadAllergyIntolerance1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/allergyintolerance-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     AllergyIntolerance allergyintolerance = AllergyIntolerance.fromJson(json);

     List<AllergyIntolerance> list = Arrays.asList(new AllergyIntolerance[] {allergyintolerance});

      when(allergyintoleranceService.selectAll()).thenReturn(list);

      List<AllergyIntolerance> result = allergyintoleranceService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadConsent1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consent-example-pkb.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Consent consent = Consent.fromJson(json);

     List<Consent> list = Arrays.asList(new Consent[] {consent});

      when(consentService.selectAll()).thenReturn(list);

      List<Consent> result = consentService.selectAll();

      assertEquals("Expect ", "consent-example-pkb", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition32FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedure-targetbodysite.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedure-targetBodySite", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet23FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-relatedperson-relationshiptype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "relatedperson-relationshiptype", result.get(0).getId()); 
    }
    @Test
    public void testLoadActivityDefinition2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/activitydefinition-order-serum-zika-dengue-virus-igm.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ActivityDefinition activitydefinition = ActivityDefinition.fromJson(json);

     List<ActivityDefinition> list = Arrays.asList(new ActivityDefinition[] {activitydefinition});

      when(activitydefinitionService.selectAll()).thenReturn(list);

      List<ActivityDefinition> result = activitydefinitionService.selectAll();

      assertEquals("Expect ", "serum-zika-dengue-virus-igm", result.get(0).getId()); 
    }
    @Test
    public void testLoadPlanDefinition1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/plandefinition-protocol-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     PlanDefinition plandefinition = PlanDefinition.fromJson(json);

     List<PlanDefinition> list = Arrays.asList(new PlanDefinition[] {plandefinition});

      when(plandefinitionService.selectAll()).thenReturn(list);

      List<PlanDefinition> result = plandefinitionService.selectAll();

      assertEquals("Expect ", "protocol-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition33FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-sourcereference.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-sourceReference", result.get(0).getId()); 
    }
    @Test
    public void testLoadNutritionOrder2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder-example-infantenteral.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NutritionOrder nutritionorder = NutritionOrder.fromJson(json);

     List<NutritionOrder> list = Arrays.asList(new NutritionOrder[] {nutritionorder});

      when(nutritionorderService.selectAll()).thenReturn(list);

      List<NutritionOrder> result = nutritionorderService.selectAll();

      assertEquals("Expect ", "infantenteral", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bodylength-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcessRequest1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processrequest-example-reverse.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcessRequest processrequest = ProcessRequest.fromJson(json);

     List<ProcessRequest> list = Arrays.asList(new ProcessRequest[] {processrequest});

      when(processrequestService.selectAll()).thenReturn(list);

      List<ProcessRequest> result = processrequestService.selectAll();

      assertEquals("Expect ", "87654", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0330.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0330", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/library-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/expansionprofile-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition34FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/group.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Group", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationOutcome1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operationoutcome-example-break-the-glass.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationOutcome operationoutcome = OperationOutcome.fromJson(json);

     List<OperationOutcome> list = Arrays.asList(new OperationOutcome[] {operationoutcome});

      when(operationoutcomeService.selectAll()).thenReturn(list);

      List<OperationOutcome> result = operationoutcomeService.selectAll();

      assertEquals("Expect ", "break-the-glass", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition35FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationstatement.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "MedicationStatement", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition36FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-definition.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-definition", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition37FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-dosetype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "pharmacy-core-doseType", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition38FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-humanname-partner-prefix.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "humanname-partner-prefix", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition39FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-patient-adoptioninfo.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "patient-adoptionInfo", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet24FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-dataelement-sdcobjectclassproperty.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "dataelement-sdcobjectclassproperty", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0311.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0311", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processrequest-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet25FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-consent-state-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "consent-state-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire17FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/testscript-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire18FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/provenance-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem20FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-questionnaire-answers-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "questionnaire-answers-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet26FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-supply-item.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "supply-item", result.get(0).getId()); 
    }
    @Test
    public void testLoadContract1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/pcd-example-notThem.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Contract contract = Contract.fromJson(json);

     List<Contract> list = Arrays.asList(new Contract[] {contract});

      when(contractService.selectAll()).thenReturn(list);

      List<Contract> result = contractService.selectAll();

      assertEquals("Expect ", "pcd-example-notThem", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition40FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-optionexclusive.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-optionExclusive", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem21FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-research-study-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "research-study-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem22FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-flag-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "flag-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet27FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-contributor-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "contributor-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem23FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-device-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "device-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem24FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-composite-measure-scoring.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "composite-measure-scoring", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition41FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitionerrole.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "PractitionerRole", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition42FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-careplan-activity-title.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "careplan-activity-title", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition43FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/relatedartifact.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "RelatedArtifact", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet28FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-substance-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "substance-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet29FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-flag-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "flag-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadDevice1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/device-example-pacemaker.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Device device = Device.fromJson(json);

     List<Device> list = Arrays.asList(new Device[] {device});

      when(deviceService.selectAll()).thenReturn(list);

      List<Device> result = deviceService.selectAll();

      assertEquals("Expect ", "example-pacemaker", result.get(0).getId()); 
    }
    @Test
    public void testLoadResearchStudy1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/researchstudy-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ResearchStudy researchstudy = ResearchStudy.fromJson(json);

     List<ResearchStudy> list = Arrays.asList(new ResearchStudy[] {researchstudy});

      when(researchstudyService.selectAll()).thenReturn(list);

      List<ResearchStudy> result = researchstudyService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition44FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-genetics.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedurerequest-genetics", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem25FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-operational-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "operational-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-example-xcda.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "xcda", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet30FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-supplydelivery-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "supplydelivery-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet31FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-specimen-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "specimen-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-phenotype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "example-phenotype", result.get(0).getId()); 
    }
    @Test
    public void testLoadProvenance1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/provenance-example-biocompute-object.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Provenance provenance = Provenance.fromJson(json);

     List<Provenance> list = Arrays.asList(new Provenance[] {provenance});

      when(provenanceService.selectAll()).thenReturn(list);

      List<Provenance> result = provenanceService.selectAll();

      assertEquals("Expect ", "example-biocompute-object", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition45FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-encounter-associatedencounter.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "encounter-associatedEncounter", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem26FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-risk-probability.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "risk-probability", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-haplotype1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "example-haplotype1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem27FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-list-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "list-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition46FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/contract.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Contract", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition47FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-11179-de-effective-period.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "11179-de-effective-period", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition48FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-subsumes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-subsumes", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet32FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-message-events.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "message-events", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-head-circumference.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "head-circumference", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet33FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-doc-classcodes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "doc-classcodes", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem28FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-vaccination-protocol-dose-status-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "vaccination-protocol-dose-status-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition49FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-event-reasoncode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "event-reasonCode", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition50FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/markdown.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "markdown", result.get(0).getId()); 
    }
    @Test
    public void testLoadEncounter1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/encounter-example-emerg.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Encounter encounter = Encounter.fromJson(json);

     List<Encounter> list = Arrays.asList(new Encounter[] {encounter});

      when(encounterService.selectAll()).thenReturn(list);

      List<Encounter> result = encounterService.selectAll();

      assertEquals("Expect ", "emerg", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition51FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/expansionprofile.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ExpansionProfile", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet34FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-benefit-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "benefit-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem29FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-response-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "response-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0316.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0316", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-10minute-apgar-score.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "10minute-apgar-score", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem30FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-action-selection-behavior.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "action-selection-behavior", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem31FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-nutrition-request-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "nutrition-request-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition52FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-geneticsanalysis.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "DiagnosticReport-geneticsAnalysis", result.get(0).getId()); 
    }
    @Test
    public void testLoadEpisodeOfCare1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/episodeofcare-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     EpisodeOfCare episodeofcare = EpisodeOfCare.fromJson(json);

     List<EpisodeOfCare> list = Arrays.asList(new EpisodeOfCare[] {episodeofcare});

      when(episodeofcareService.selectAll()).thenReturn(list);

      List<EpisodeOfCare> result = episodeofcareService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem32FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-measure-scoring.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "measure-scoring", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet35FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-dispense-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-dispense-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet36FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-linkage-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "linkage-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem33FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-map-source-list-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "map-source-list-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet37FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-audit-event-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "audit-event-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition53FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/simplequantity.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "SimpleQuantity", result.get(0).getId()); 
    }
    @Test
    public void testLoadChargeItem1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/chargeitem-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ChargeItem chargeitem = ChargeItem.fromJson(json);

     List<ChargeItem> list = Arrays.asList(new ChargeItem[] {chargeitem});

      when(chargeitemService.selectAll()).thenReturn(list);

      List<ChargeItem> result = chargeitemService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-bloodpressure.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "blood-pressure", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet38FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-adverse-event-outcome.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "adverse-event-outcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-example-TPMT-two.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "example-TPMT-two", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet39FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-consent-content-class.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "consent-content-class", result.get(0).getId()); 
    }
    @Test
    public void testLoadLibrary1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/library-fhir-helpers.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Library library = Library.fromJson(json);

     List<Library> list = Arrays.asList(new Library[] {library});

      when(libraryService.selectAll()).thenReturn(list);

      List<Library> result = libraryService.selectAll();

      assertEquals("Expect ", "library-fhir-helpers", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem34FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-resource-aggregation-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "resource-aggregation-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition54FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cholesterol.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "cholesterol", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem35FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-list-order.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "list-order", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet40FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-contract-term-subtype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "contract-term-subtype", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet41FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-adjudication.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "adjudication", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet42FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-list-item-flag.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "list-item-flag", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bundle-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "bundle-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem36FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-search-modifier-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "search-modifier-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem37FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-repository-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "repository-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example-f002-lung.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "f002", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet43FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-vaccine-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "vaccine-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitioner2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-example-f006-rvdb.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Practitioner practitioner = Practitioner.fromJson(json);

     List<Practitioner> list = Arrays.asList(new Practitioner[] {practitioner});

      when(practitionerService.selectAll()).thenReturn(list);

      List<Practitioner> result = practitionerService.selectAll();

      assertEquals("Expect ", "f006", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem38FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-http-operations.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "http-operations", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition55FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-wg.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-wg", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem39FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-dicom-audit-lifecycle.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "dicom-audit-lifecycle", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-respiratory-rate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "respiratory-rate", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition56FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-encounter-modeofarrival.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "encounter-modeOfArrival", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet44FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-age-units.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "age-units", result.get(0).getId()); 
    }
    @Test
    public void testLoadAuditEvent2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/audit-event-example-vread.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     AuditEvent auditevent = AuditEvent.fromJson(json);

     List<AuditEvent> list = Arrays.asList(new AuditEvent[] {auditevent});

      when(auditeventService.selectAll()).thenReturn(list);

      List<AuditEvent> result = auditeventService.selectAll();

      assertEquals("Expect ", "example-rest", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition57FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-othername.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-otherName", result.get(0).getId()); 
    }
    @Test
    public void testLoadFHIRList2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/list-example-familyhistory-f201-roel.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     FHIRList fhirlist = FHIRList.fromJson(json);

     List<FHIRList> list = Arrays.asList(new FHIRList[] {fhirlist});

      when(fhirlistService.selectAll()).thenReturn(list);

      List<FHIRList> result = fhirlistService.selectAll();

      assertEquals("Expect ", "f201", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-example-fda-comparisons.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "fda-vcf-comparison", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet45FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-implant-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "implant-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem40FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-claim-careteamrole.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "claim-careteamrole", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example-ob.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "ob", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet46FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-jurisdiction.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "jurisdiction", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example-appendectomy-narrative.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "appendectomy-narrative", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet47FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-encounter-special-arrangements.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "encounter-special-arrangements", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem41FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-goal-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "goal-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition58FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-toocostly.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-toocostly", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire19FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaire-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "3141", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition59FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Claim", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-plandefinition-data-requirements.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "PlanDefinition-data-requirements", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem42FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-metric-calibration-state.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "metric-calibration-state", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/message-response-link.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "3a0707d3-549e-4467-b8b8-5a2ab3800efe", result.get(0).getId()); 
    }
    @Test
    public void testLoadCondition1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/condition-example-stroke.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Condition condition = Condition.fromJson(json);

     List<Condition> list = Arrays.asList(new Condition[] {condition});

      when(conditionService.selectAll()).thenReturn(list);

      List<Condition> result = conditionService.selectAll();

      assertEquals("Expect ", "stroke", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0315.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0315", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitioner3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-example-xcda1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Practitioner practitioner = Practitioner.fromJson(json);

     List<Practitioner> list = Arrays.asList(new Practitioner[] {practitioner});

      when(practitionerService.selectAll()).thenReturn(list);

      List<Practitioner> result = practitionerService.selectAll();

      assertEquals("Expect ", "xcda1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet48FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-extension-context.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "extension-context", result.get(0).getId()); 
    }
    @Test
    public void testLoadConsent2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consent-example-Out.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Consent consent = Consent.fromJson(json);

     List<Consent> list = Arrays.asList(new Consent[] {consent});

      when(consentService.selectAll()).thenReturn(list);

      List<Consent> result = consentService.selectAll();

      assertEquals("Expect ", "consent-example-Out", result.get(0).getId()); 
    }
    @Test
    public void testLoadSchedule1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/schedule-provider-location2-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Schedule schedule = Schedule.fromJson(json);

     List<Schedule> list = Arrays.asList(new Schedule[] {schedule});

      when(scheduleService.selectAll()).thenReturn(list);

      List<Schedule> result = scheduleService.selectAll();

      assertEquals("Expect ", "exampleloc2", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem43FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-document-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "document-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition60FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-openehr-management.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "openEHR-management", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet49FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-claim-informationcategory.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "claim-informationcategory", result.get(0).getId()); 
    }
    @Test
    public void testLoadCondition2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/condition-example-f001-heart.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Condition condition = Condition.fromJson(json);

     List<Condition> list = Arrays.asList(new Condition[] {condition});

      when(conditionService.selectAll()).thenReturn(list);

      List<Condition> result = conditionService.selectAll();

      assertEquals("Expect ", "f001", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition61FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-comment.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-comment", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet50FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-resource-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "resource-types", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0331.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0331", result.get(0).getId()); 
    }
    @Test
    public void testLoadCondition3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/condition-example-f203-sepsis.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Condition condition = Condition.fromJson(json);

     List<Condition> list = Arrays.asList(new Condition[] {condition});

      when(conditionService.selectAll()).thenReturn(list);

      List<Condition> result = conditionService.selectAll();

      assertEquals("Expect ", "f203", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet51FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-service-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "service-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition62FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/conceptmap.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ConceptMap", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire20FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire21FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/deviceusestatement-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCoverage1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/coverage-example-2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Coverage coverage = Coverage.fromJson(json);

     List<Coverage> list = Arrays.asList(new Coverage[] {coverage});

      when(coverageService.selectAll()).thenReturn(list);

      List<Coverage> result = coverageService.selectAll();

      assertEquals("Expect ", "7546D", result.get(0).getId()); 
    }
    @Test
    public void testLoadPaymentNotice1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/paymentnotice-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     PaymentNotice paymentnotice = PaymentNotice.fromJson(json);

     List<PaymentNotice> list = Arrays.asList(new PaymentNotice[] {paymentnotice});

      when(paymentnoticeService.selectAll()).thenReturn(list);

      List<PaymentNotice> result = paymentnoticeService.selectAll();

      assertEquals("Expect ", "77654", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition63FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/string.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "string", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet52FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-communication-not-done-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "communication-not-done-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadActivityDefinition3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/activitydefinition-administer-zika-virus-exposure-assessment.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ActivityDefinition activitydefinition = ActivityDefinition.fromJson(json);

     List<ActivityDefinition> list = Arrays.asList(new ActivityDefinition[] {activitydefinition});

      when(activitydefinitionService.selectAll()).thenReturn(list);

      List<ActivityDefinition> result = activitydefinitionService.selectAll();

      assertEquals("Expect ", "administer-zika-virus-exposure-assessment", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0319.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0319", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem44FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-claim-subtype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "claim-subtype", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition64FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-locationperformed.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "diagnosticReport-locationPerformed", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition65FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-patient-clinicaltrial.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "patient-clinicalTrial", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-document-reference-status-v3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-document-reference-status-v3", result.get(0).getId()); 
    }
    @Test
    public void testLoadDeviceComponent1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/devicecomponent-example-prodspec.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DeviceComponent devicecomponent = DeviceComponent.fromJson(json);

     List<DeviceComponent> list = Arrays.asList(new DeviceComponent[] {devicecomponent});

      when(devicecomponentService.selectAll()).thenReturn(list);

      List<DeviceComponent> result = devicecomponentService.selectAll();

      assertEquals("Expect ", "example-prodspec", result.get(0).getId()); 
    }
    @Test
    public void testLoadDetectedIssue1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/detectedissue-example-dup.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DetectedIssue detectedissue = DetectedIssue.fromJson(json);

     List<DetectedIssue> list = Arrays.asList(new DetectedIssue[] {detectedissue});

      when(detectedissueService.selectAll()).thenReturn(list);

      List<DetectedIssue> result = detectedissueService.selectAll();

      assertEquals("Expect ", "duplicate", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet53FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-marital-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "marital-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadNutritionOrder3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder-example-texture-modified.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NutritionOrder nutritionorder = NutritionOrder.fromJson(json);

     List<NutritionOrder> list = Arrays.asList(new NutritionOrder[] {nutritionorder});

      when(nutritionorderService.selectAll()).thenReturn(list);

      List<NutritionOrder> result = nutritionorderService.selectAll();

      assertEquals("Expect ", "texturemodified", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition66FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-event-performerrole.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "event-performerRole", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire22FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/enrollmentresponse-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire23FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/devicemetricobservation-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition67FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/datetime.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "dateTime", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire24FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/flag-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem45FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-search-xpath-usage.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "search-xpath-usage", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem46FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-type-derivation-rule.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "type-derivation-rule", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition68FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-warning.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-warning", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition69FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-trusted-expansion.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-trusted-expansion", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire25FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/coverage-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem47FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-additionalmaterials.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "additionalmaterials", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem48FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-adverse-event-causality-assess.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "adverse-event-causality-assess", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition70FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-tel-address.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-TEL-address", result.get(0).getId()); 
    }
    @Test
    public void testLoadAuditEvent3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/auditevent-example-disclosure.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     AuditEvent auditevent = AuditEvent.fromJson(json);

     List<AuditEvent> list = Arrays.asList(new AuditEvent[] {auditevent});

      when(auditeventService.selectAll()).thenReturn(list);

      List<AuditEvent> result = auditeventService.selectAll();

      assertEquals("Expect ", "example-disclosure", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem49FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-encounter-special-arrangements.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "encounter-special-arrangements", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet54FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-map-context-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "map-context-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-conceptmap-closure.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "ConceptMap-closure", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet55FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-detectedissue-severity.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "detectedissue-severity", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition71FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-communicationrequest-reasonrejected.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "communicationrequest-reasonRejected", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-codesystem-compose.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "CodeSystem-compose", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition72FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaire.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Questionnaire", result.get(0).getId()); 
    }
    @Test
    public void testLoadNamingSystem1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/namingsystem-example-id.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NamingSystem namingsystem = NamingSystem.fromJson(json);

     List<NamingSystem> list = Arrays.asList(new NamingSystem[] {namingsystem});

      when(namingsystemService.selectAll()).thenReturn(list);

      List<NamingSystem> result = namingsystemService.selectAll();

      assertEquals("Expect ", "example-id", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0333.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0333", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet56FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-surface.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "surface", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet57FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-sequence-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "sequence-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet58FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-issue-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "issue-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition73FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-minvalue.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "minValue", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet59FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-chromosome-human.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "chromosome-human", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem50FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-goal-status-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "goal-status-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition74FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-bodyposition.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-bodyPosition", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition75FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-timing-exact.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "timing-exact", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet60FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-service-referral-method.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "service-referral-method", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet61FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-instance-availability.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "instance-availability", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem51FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-report-participant-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "report-participant-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem52FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-medication-statement-taken.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "medication-statement-taken", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition76FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-geolocation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "geolocation", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition77FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-verification.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-verification", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet62FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-object-role.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "object-role", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet63FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-subscription-tag.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "subscription-tag", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition78FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/heartrate.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "heartrate", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-f206-staphylococcus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "f206", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire26FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/testreport-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem53FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-encounter-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "encounter-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCoverage2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/coverage-example-selfpay.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Coverage coverage = Coverage.fromJson(json);

     List<Coverage> list = Arrays.asList(new Coverage[] {coverage});

      when(coverageService.selectAll()).thenReturn(list);

      List<Coverage> result = coverageService.selectAll();

      assertEquals("Expect ", "SP1234", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition79FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/referralrequest.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ReferralRequest", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet64FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-doc-section-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "doc-section-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0307.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0307", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-resource-meta-add.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Resource-meta-add", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem54FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-operation-kind.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "operation-kind", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet65FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-care-team-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "care-team-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet66FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-network-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "network-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet67FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-object-lifecycle-events.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "object-lifecycle-events", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example-ambulation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "ambulation", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition80FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-targetstructuremap.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-targetStructureMap", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition81FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-patient-birthtime.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "patient-birthTime", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-medication-dispense-status-v3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-medication-dispense-status-v3", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-valueset-expand.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "ValueSet-expand", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition82FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-messageheader-response-request.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "messageheader-response-request", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem55FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-observation-statistics.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "observation-statistics", result.get(0).getId()); 
    }
    @Test
    public void testLoadAppointment1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/appointment-example2doctors.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Appointment appointment = Appointment.fromJson(json);

     List<Appointment> list = Arrays.asList(new Appointment[] {appointment});

      when(appointmentService.selectAll()).thenReturn(list);

      List<Appointment> result = appointmentService.selectAll();

      assertEquals("Expect ", "2docs", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet68FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-claim-modifiers.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "claim-modifiers", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet69FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-coverage-selfpay.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "coverage-selfpay", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet70FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-allerg-intol-substance-exp-risk.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "allerg-intol-substance-exp-risk", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0313.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0313", result.get(0).getId()); 
    }
    @Test
    public void testLoadExplanationOfBenefit1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/explanationofbenefit-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ExplanationOfBenefit explanationofbenefit = ExplanationOfBenefit.fromJson(json);

     List<ExplanationOfBenefit> list = Arrays.asList(new ExplanationOfBenefit[] {explanationofbenefit});

      when(explanationofbenefitService.selectAll()).thenReturn(list);

      List<ExplanationOfBenefit> result = explanationofbenefitService.selectAll();

      assertEquals("Expect ", "EB3500", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem56FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-composition-attestation-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "composition-attestation-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-oral-average.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "100151", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition83FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-genetics.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-genetics", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition84FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/positiveint.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "positiveInt", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet71FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-property-representation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "property-representation", result.get(0).getId()); 
    }
    @Test
    public void testLoadEndpoint2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/endpoint-example-iid.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Endpoint endpoint = Endpoint.fromJson(json);

     List<Endpoint> list = Arrays.asList(new Endpoint[] {endpoint});

      when(endpointService.selectAll()).thenReturn(list);

      List<Endpoint> result = endpointService.selectAll();

      assertEquals("Expect ", "example-iid", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem57FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-benefit-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "benefit-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet72FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-action-participant-role.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "action-participant-role", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire27FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/list-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition85FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-co-value.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-CO-value", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire28FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/hdlcholesterol-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadLocation1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/location-example-ukpharmacy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Location location = Location.fromJson(json);

     List<Location> list = Arrays.asList(new Location[] {location});

      when(locationService.selectAll()).thenReturn(list);

      List<Location> result = locationService.selectAll();

      assertEquals("Expect ", "ukp", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire29FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/basic-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadAuditEvent4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/audit-event-example-media.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     AuditEvent auditevent = AuditEvent.fromJson(json);

     List<AuditEvent> list = Arrays.asList(new AuditEvent[] {auditevent});

      when(auditeventService.selectAll()).thenReturn(list);

      List<AuditEvent> result = auditeventService.selectAll();

      assertEquals("Expect ", "example-media", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition86FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/oxygensat.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "oxygensat", result.get(0).getId()); 
    }
    @Test
    public void testLoadMeasure1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/measure-composite-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Measure measure = Measure.fromJson(json);

     List<Measure> list = Arrays.asList(new Measure[] {measure});

      when(measureService.selectAll()).thenReturn(list);

      List<Measure> result = measureService.selectAll();

      assertEquals("Expect ", "composite-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition87FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-data-absent-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "data-absent-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition88FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/flag.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Flag", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-bloodpressure-cancel.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "blood-pressure-cancel", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet73FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-statement-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-statement-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet74FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-security-role-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "security-role-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet75FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-report-status-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "report-status-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition89FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedurerequest-reasonrefused.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedurerequest-reasonRefused", result.get(0).getId()); 
    }
    @Test
    public void testLoadRiskAssessment1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/riskassessment-example-cardiac.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     RiskAssessment riskassessment = RiskAssessment.fromJson(json);

     List<RiskAssessment> list = Arrays.asList(new RiskAssessment[] {riskassessment});

      when(riskassessmentService.selectAll()).thenReturn(list);

      List<RiskAssessment> result = riskassessmentService.selectAll();

      assertEquals("Expect ", "cardiac", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet76FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-ucum-common.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "ucum-common", result.get(0).getId()); 
    }
    @Test
    public void testLoadPlanDefinition2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/plandefinition-exclusive-breastfeeding-intervention-01.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     PlanDefinition plandefinition = PlanDefinition.fromJson(json);

     List<PlanDefinition> list = Arrays.asList(new PlanDefinition[] {plandefinition});

      when(plandefinitionService.selectAll()).thenReturn(list);

      List<PlanDefinition> result = plandefinitionService.selectAll();

      assertEquals("Expect ", "exclusive-breastfeeding-intervention-01", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem58FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-encounter-location-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "encounter-location-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadActivityDefinition4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/activitydefinition-medicationorder-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ActivityDefinition activitydefinition = ActivityDefinition.fromJson(json);

     List<ActivityDefinition> list = Arrays.asList(new ActivityDefinition[] {activitydefinition});

      when(activitydefinitionService.selectAll()).thenReturn(list);

      List<ActivityDefinition> result = activitydefinitionService.selectAll();

      assertEquals("Expect ", "citalopramPrescription", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet77FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-audit-event-outcome.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "audit-event-outcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet78FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-condition-clinical.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "condition-clinical", result.get(0).getId()); 
    }
    @Test
    public void testLoadAppointment2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/appointment-example-request.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Appointment appointment = Appointment.fromJson(json);

     List<Appointment> list = Arrays.asList(new Appointment[] {appointment});

      when(appointmentService.selectAll()).thenReturn(list);

      List<Appointment> result = appointmentService.selectAll();

      assertEquals("Expect ", "examplereq", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet79FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-metric-calibration-state.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "metric-calibration-state", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0326.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0326", result.get(0).getId()); 
    }
    @Test
    public void testLoadRelatedPerson1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/relatedperson-example-f001-sarah.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     RelatedPerson relatedperson = RelatedPerson.fromJson(json);

     List<RelatedPerson> list = Arrays.asList(new RelatedPerson[] {relatedperson});

      when(relatedpersonService.selectAll()).thenReturn(list);

      List<RelatedPerson> result = relatedpersonService.selectAll();

      assertEquals("Expect ", "f001", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0303.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0303", result.get(0).getId()); 
    }
    @Test
    public void testLoadImmunizationRecommendation2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/immunizationrecommendation-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ImmunizationRecommendation immunizationrecommendation = ImmunizationRecommendation.fromJson(json);

     List<ImmunizationRecommendation> list = Arrays.asList(new ImmunizationRecommendation[] {immunizationrecommendation});

      when(immunizationrecommendationService.selectAll()).thenReturn(list);

      List<ImmunizationRecommendation> result = immunizationrecommendationService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition90FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "MedicationAdministration", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet80FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-immunization-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "immunization-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition91FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bodysite.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "BodySite", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition92FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-deliveryinstallationtype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-deliveryInstallationType", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition93FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticsinterpretation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsInterpretation", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet81FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-metric-calibration-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "metric-calibration-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/xds-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "xds", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-genetics-3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "example-genetics-3", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/profiles-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "types", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-servicedefinition-data-requirements.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "ServiceDefinition-data-requirements", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-pharmacy-compound.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "760152", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition94FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedurerequest-authorizedby.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedurerequest-authorizedBy", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet82FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-action-cardinality-behavior.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "action-cardinality-behavior", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition95FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-capabilitystatement-supported-system.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "capabilitystatement-supported-system", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet83FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-allergy-intolerance-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "allergy-intolerance-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet84FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-report-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "report-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem59FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-location-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "location-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem60FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-address-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "address-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem61FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-allergy-intolerance-criticality.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "allergy-intolerance-criticality", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition96FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/episodeofcare.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "EpisodeOfCare", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem62FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-claim-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "claim-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet85FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-reason-medication-not-taken-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "reason-medication-not-taken-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadBodySite2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bodysite-example-fetus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     BodySite bodysite = BodySite.fromJson(json);

     List<BodySite> list = Arrays.asList(new BodySite[] {bodysite});

      when(bodysiteService.selectAll()).thenReturn(list);

      List<BodySite> result = bodysiteService.selectAll();

      assertEquals("Expect ", "fetus", result.get(0).getId()); 
    }
    @Test
    public void testLoadAppointmentResponse1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/appointmentresponse-example-req.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     AppointmentResponse appointmentresponse = AppointmentResponse.fromJson(json);

     List<AppointmentResponse> list = Arrays.asList(new AppointmentResponse[] {appointmentresponse});

      when(appointmentresponseService.selectAll()).thenReturn(list);

      List<AppointmentResponse> result = appointmentresponseService.selectAll();

      assertEquals("Expect ", "exampleresp", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem63FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-encounter-discharge-disposition.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "encounter-discharge-disposition", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition97FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-deliveryaddressline.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-deliveryAddressLine", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet86FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-definition-topic.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "definition-topic", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet87FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-languages.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "languages", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem64FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-contributor-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "contributor-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadContract2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/contract-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Contract contract = Contract.fromJson(json);

     List<Contract> list = Arrays.asList(new Contract[] {contract});

      when(contractService.selectAll()).thenReturn(list);

      List<Contract> result = contractService.selectAll();

      assertEquals("Expect ", "C-123", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitioner4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-example-f203-jvg.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Practitioner practitioner = Practitioner.fromJson(json);

     List<Practitioner> list = Arrays.asList(new Practitioner[] {practitioner});

      when(practitionerService.selectAll()).thenReturn(list);

      List<Practitioner> result = practitionerService.selectAll();

      assertEquals("Expect ", "f203", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition98FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-ancestor.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-ancestor", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationStatement1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationstatementexample3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationStatement medicationstatement = MedicationStatement.fromJson(json);

     List<MedicationStatement> list = Arrays.asList(new MedicationStatement[] {medicationstatement});

      when(medicationstatementService.selectAll()).thenReturn(list);

      List<MedicationStatement> result = medicationstatementService.selectAll();

      assertEquals("Expect ", "example003", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet88FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-reason-medication-not-given-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "reason-medication-not-given-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition99FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-patient-nationality.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "patient-nationality", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition100FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-housenumber.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-houseNumber", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem65FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-concept-map-equivalence.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "concept-map-equivalence", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet89FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-encounter-discharge-disposition.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "encounter-discharge-disposition", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet90FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-payment-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "payment-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-graphic-example-1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "graphic-example-1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem66FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-practitioner-role.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "practitioner-role", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem67FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-contract-term-subtype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "contract-term-subtype", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition101FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-rendering-stylesensitive.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "rendering-styleSensitive", result.get(0).getId()); 
    }
    @Test
    public void testLoadRiskAssessment2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/riskassessment-example-prognosis.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     RiskAssessment riskassessment = RiskAssessment.fromJson(json);

     List<RiskAssessment> list = Arrays.asList(new RiskAssessment[] {riskassessment});

      when(riskassessmentService.selectAll()).thenReturn(list);

      List<RiskAssessment> result = riskassessmentService.selectAll();

      assertEquals("Expect ", "prognosis", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet91FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-history-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "history-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem68FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-resource-type-link.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "resource-type-link", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem69FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-service-modifiers.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "service-modifiers", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet92FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-measure-population.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "measure-population", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition102FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/familymemberhistory.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "FamilyMemberHistory", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition103FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/humanname.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "HumanName", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition104FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-regex.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "regex", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet93FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-contract-actorrole.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "contract-actorrole", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet94FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-form-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-form-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition105FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-demap.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-deMap", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example-colonoscopy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "colonoscopy", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition106FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/distance.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Distance", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet95FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-action-selection-behavior.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "action-selection-behavior", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition107FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-encounter-reasoncancelled.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "encounter-reasonCancelled", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition108FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-rateincrement.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "pharmacy-core-rateIncrement", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem70FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-action-participant-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "action-participant-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition109FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-organization-preferredcontact.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "organization-preferredContact", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition110FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/narrative.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Narrative", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0312.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0312", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-example-pgx-1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "example-pgx-1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem71FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-cqif-evidence-quality.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "cqif-evidence-quality", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem72FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-reason-medication-not-given-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "reason-medication-not-given-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0305.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0305", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet96FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-timing-abbreviation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "timing-abbreviation", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0320.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0320", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition111FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/oid.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "oid", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet97FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-all-languages.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "all-languages", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem73FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-immunization-origin.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "immunization-origin", result.get(0).getId()); 
    }
    @Test
    public void testLoadSlot1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/slot-example-unavailable.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Slot slot = Slot.fromJson(json);

     List<Slot> list = Arrays.asList(new Slot[] {slot});

      when(slotService.selectAll()).thenReturn(list);

      List<Slot> result = slotService.selectAll();

      assertEquals("Expect ", "3", result.get(0).getId()); 
    }
    @Test
    public void testLoadDeviceComponent2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/devicecomponent-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DeviceComponent devicecomponent = DeviceComponent.fromJson(json);

     List<DeviceComponent> list = Arrays.asList(new DeviceComponent[] {devicecomponent});

      when(devicecomponentService.selectAll()).thenReturn(list);

      List<DeviceComponent> result = devicecomponentService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem74FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-message-significance-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "message-significance-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet98FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-c80-practice-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "c80-practice-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem75FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-substance-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "substance-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition112FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/contributor.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Contributor", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition113FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/address.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Address", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaireResponse2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaireresponse-example-ussg-fht-answers.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     QuestionnaireResponse questionnaireresponse = QuestionnaireResponse.fromJson(json);

     List<QuestionnaireResponse> list = Arrays.asList(new QuestionnaireResponse[] {questionnaireresponse});

      when(questionnaireresponseService.selectAll()).thenReturn(list);

      List<QuestionnaireResponse> result = questionnaireresponseService.selectAll();

      assertEquals("Expect ", "ussg-fht-answers", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire30FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition114FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedurerequest-targetbodysite.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedurerequest-targetBodySite", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet99FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-ex-onsettype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "ex-onsettype", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet100FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-graph-compartment-rule.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "graph-compartment-rule", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem76FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-immunization-recommendation-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "immunization-recommendation-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet101FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-doc-typecodes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "doc-typecodes", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-example-chinese.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "ch-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet102FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-codesystem-hierarchy-meaning.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "codesystem-hierarchy-meaning", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem77FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-w3c-provenance-activity-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "w3c-provenance-activity-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadAccount1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/account-example-with-guarantor.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Account account = Account.fromJson(json);

     List<Account> list = Arrays.asList(new Account[] {account});

      when(accountService.selectAll()).thenReturn(list);

      List<Account> result = accountService.selectAll();

      assertEquals("Expect ", "ewg", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet103FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-ucum-units.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "ucum-units", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition115FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-sourcereference.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-sourceReference", result.get(0).getId()); 
    }
    @Test
    public void testLoadBasic1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/basic-example-narrative.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Basic basic = Basic.fromJson(json);

     List<Basic> list = Arrays.asList(new Basic[] {basic});

      when(basicService.selectAll()).thenReturn(list);

      List<Basic> result = basicService.selectAll();

      assertEquals("Expect ", "basic-example-narrative", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem78FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-resource-slicing-rules.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "resource-slicing-rules", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-body-height.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "body-height", result.get(0).getId()); 
    }
    @Test
    public void testLoadCarePlan2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careplan-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CarePlan careplan = CarePlan.fromJson(json);

     List<CarePlan> list = Arrays.asList(new CarePlan[] {careplan});

      when(careplanService.selectAll()).thenReturn(list);

      List<CarePlan> result = careplanService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem79FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-match-grade.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "match-grade", result.get(0).getId()); 
    }
    @Test
    public void testLoadActivityDefinition5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/activitydefinition-supplyrequest-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ActivityDefinition activitydefinition = ActivityDefinition.fromJson(json);

     List<ActivityDefinition> list = Arrays.asList(new ActivityDefinition[] {activitydefinition});

      when(activitydefinitionService.selectAll()).thenReturn(list);

      List<ActivityDefinition> result = activitydefinitionService.selectAll();

      assertEquals("Expect ", "blood-tubes-supply", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition116FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bp.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "bp", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-examples-general.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "b248b1b2-1686-4b94-9936-37d7a5f94b51", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet104FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-usage-context-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "usage-context-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem80FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-message-events.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "message-events", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet105FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-dataelement-sdcobjectclass.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "dataelement-sdcobjectclass", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire31FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/location-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet106FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-type-restful-interaction.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "type-restful-interaction", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition117FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-maxoccurs.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-maxOccurs", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-oral-identifier.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "100154", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem81FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-adverse-event-outcome.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "adverse-event-outcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition118FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Practitioner", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet107FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-sequence-species.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "sequence-species", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet108FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-event-capability-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "event-capability-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire32FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaire-example-gcs.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "gcs", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet109FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-name-v3-representation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "name-v3-representation", result.get(0).getId()); 
    }
    @Test
    public void testLoadPlanDefinition3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/plandefinition-options-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     PlanDefinition plandefinition = PlanDefinition.fromJson(json);

     List<PlanDefinition> list = Arrays.asList(new PlanDefinition[] {plandefinition});

      when(plandefinitionService.selectAll()).thenReturn(list);

      List<PlanDefinition> result = plandefinitionService.selectAll();

      assertEquals("Expect ", "options-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0304.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0304", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem82FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-identifier-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "identifier-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitionerRole1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitionerrole-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     PractitionerRole practitionerrole = PractitionerRole.fromJson(json);

     List<PractitionerRole> list = Arrays.asList(new PractitionerRole[] {practitionerrole});

      when(practitionerroleService.selectAll()).thenReturn(list);

      List<PractitionerRole> result = practitionerroleService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet110FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-sibling-relationship-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "sibling-relationship-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem83FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-condition-clinical.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "condition-clinical", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition119FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-geneticsfamilymemberhistory.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "DiagnosticReport-geneticsFamilyMemberHistory", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaireResponse3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaireresponse-example-gcs.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     QuestionnaireResponse questionnaireresponse = QuestionnaireResponse.fromJson(json);

     List<QuestionnaireResponse> list = Arrays.asList(new QuestionnaireResponse[] {questionnaireresponse});

      when(questionnaireresponseService.selectAll()).thenReturn(list);

      List<QuestionnaireResponse> result = questionnaireresponseService.selectAll();

      assertEquals("Expect ", "gcs", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition120FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-location-alias.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "location-alias", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet111FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-fips-county.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "fips-county", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem84FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-constraint-severity.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "constraint-severity", result.get(0).getId()); 
    }
    @Test
    public void testLoadSubstance2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/substance-example-f201-dust.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Substance substance = Substance.fromJson(json);

     List<Substance> list = Arrays.asList(new Substance[] {substance});

      when(substanceService.selectAll()).thenReturn(list);

      List<Substance> result = substanceService.selectAll();

      assertEquals("Expect ", "f201", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bundle-response.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "bundle-response", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet112FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-procedure-followup.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "procedure-followup", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet113FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-benefit-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "benefit-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet114FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-adverse-event-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "adverse-event-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem85FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-codesystem-hierarchy-meaning.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "codesystem-hierarchy-meaning", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition121FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/elementdefinition.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ElementDefinition", result.get(0).getId()); 
    }
    @Test
    public void testLoadSubstance3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/substance-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Substance substance = Substance.fromJson(json);

     List<Substance> list = Arrays.asList(new Substance[] {substance});

      when(substanceService.selectAll()).thenReturn(list);

      List<Substance> result = substanceService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire33FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/composition-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet115FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-list-empty-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "list-empty-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem86FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-adverse-event-causality.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "adverse-event-causality", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire34FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitionerrole-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire35FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationstatement-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition122FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-familymemberhistory-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "familymemberhistory-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadProvenance2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/provenance-consent-signature.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Provenance provenance = Provenance.fromJson(json);

     List<Provenance> list = Arrays.asList(new Provenance[] {provenance});

      when(provenanceService.selectAll()).thenReturn(list);

      List<Provenance> result = provenanceService.selectAll();

      assertEquals("Expect ", "consent-signature", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem87FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-metric-color.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "metric-color", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition123FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/relatedperson.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "RelatedPerson", result.get(0).getId()); 
    }
    @Test
    public void testLoadOrganization2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/organization-example-lab.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Organization organization = Organization.fromJson(json);

     List<Organization> list = Arrays.asList(new Organization[] {organization});

      when(organizationService.selectAll()).thenReturn(list);

      List<Organization> result = organizationService.selectAll();

      assertEquals("Expect ", "1832473e-2fe0-452d-abe9-3cdb9879522f", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet116FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-ex-diagnosistype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "ex-diagnosistype", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition124FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-medicationdispense-validityperiod.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "medicationdispense-validityPeriod", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem88FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-remittance-outcome.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "remittance-outcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bundle-request-medsallergies.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "bundle-request-medsallergies", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem89FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-measure-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "measure-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadEncounter2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/encounter-example-f001-heart.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Encounter encounter = Encounter.fromJson(json);

     List<Encounter> list = Arrays.asList(new Encounter[] {encounter});

      when(encounterService.selectAll()).thenReturn(list);

      List<Encounter> result = encounterService.selectAll();

      assertEquals("Expect ", "f001", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition125FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedurerequest-geneticsitem.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedurerequest-geneticsItem", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition126FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-coding-sctdescid.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "coding-sctdescid", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition127FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/usagecontext.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "UsageContext", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0309.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0309", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet117FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-fundsreserve.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "fundsreserve", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition128FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-genetics.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "diagnosticreport-genetics", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition129FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-practitioner-animalspecies.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "practitioner-animalSpecies", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem90FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-procedure-progress-status-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "procedure-progress-status-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition130FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedure-causedby.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedure-causedBy", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet118FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-vaccination-protocol-dose-status-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "vaccination-protocol-dose-status-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet119FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-goal-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "goal-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire36FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/clinicalimpression-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition131FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/parameters.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Parameters", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition132FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-system.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-system", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire37FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire38FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/messageheader-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire39FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/namingsystem-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet120FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-measurement-principle.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "measurement-principle", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet121FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-manifestation-or-symptom.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "manifestation-or-symptom", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem91FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-list-example-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "list-example-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem92FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-testscript-operation-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "testscript-operation-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition133FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-resource-approvaldate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "resource-approvalDate", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationAdministration1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration0302.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationAdministration medicationadministration = MedicationAdministration.fromJson(json);

     List<MedicationAdministration> list = Arrays.asList(new MedicationAdministration[] {medicationadministration});

      when(medicationadministrationService.selectAll()).thenReturn(list);

      List<MedicationAdministration> result = medicationadministrationService.selectAll();

      assertEquals("Expect ", "medadmin0302", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition134FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-communicationrequest-supportinginfo.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "communicationrequest-supportingInfo", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0310.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0310", result.get(0).getId()); 
    }
    @Test
    public void testLoadCareTeam1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careteam-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CareTeam careteam = CareTeam.fromJson(json);

     List<CareTeam> list = Arrays.asList(new CareTeam[] {careteam});

      when(careteamService.selectAll()).thenReturn(list);

      List<CareTeam> result = careteamService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem93FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-slotstatus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "slotstatus", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition135FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-condition-occurredfollowing.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "condition-occurredFollowing", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet122FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-consent-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "consent-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet123FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-goal-acceptance-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "goal-acceptance-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadSpecimen1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/specimen-example-serum.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Specimen specimen = Specimen.fromJson(json);

     List<Specimen> list = Arrays.asList(new Specimen[] {specimen});

      when(specimenService.selectAll()).thenReturn(list);

      List<Specimen> result = specimenService.selectAll();

      assertEquals("Expect ", "sst", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem94FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-allergy-intolerance-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "allergy-intolerance-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-sample-data.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "ekg", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition136FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careplan.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "CarePlan", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem95FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-questionnaire-display-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "questionnaire-display-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-1minute-apgar-score.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "1minute-apgar-score", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition137FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-openehr-careplan.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "openEHR-careplan", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet124FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-namingsystem-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "namingsystem-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-data-absent-reason-v3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-data-absent-reason-v3", result.get(0).getId()); 
    }
    @Test
    public void testLoadLibrary2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/library-zika-virus-intervention-logic.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Library library = Library.fromJson(json);

     List<Library> list = Arrays.asList(new Library[] {library});

      when(libraryService.selectAll()).thenReturn(list);

      List<Library> result = libraryService.selectAll();

      assertEquals("Expect ", "zika-virus-intervention-logic", result.get(0).getId()); 
    }
    @Test
    public void testLoadCondition4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/condition-example-f205-infection.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Condition condition = Condition.fromJson(json);

     List<Condition> list = Arrays.asList(new Condition[] {condition});

      when(conditionService.selectAll()).thenReturn(list);

      List<Condition> result = conditionService.selectAll();

      assertEquals("Expect ", "f205", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire40FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadLibrary3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/library-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Library library = Library.fromJson(json);

     List<Library> list = Arrays.asList(new Library[] {library});

      when(libraryService.selectAll()).thenReturn(list);

      List<Library> result = libraryService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-codesystem-lookup.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "CodeSystem-lookup", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition138FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-sourcestructuremap.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-sourceStructureMap", result.get(0).getId()); 
    }
    @Test
    public void testLoadConsent3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consent-example-notOrg.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Consent consent = Consent.fromJson(json);

     List<Consent> list = Arrays.asList(new Consent[] {consent});

      when(consentService.selectAll()).thenReturn(list);

      List<Consent> result = consentService.selectAll();

      assertEquals("Expect ", "consent-example-notOrg", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition139FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-fhirtype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-fhirType", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem96FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-related-claim-relationship.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "related-claim-relationship", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem97FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-supplyrequest-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "supplyrequest-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet125FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-bundle-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "bundle-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire41FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/guidanceresponse-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire42FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/organization-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition140FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-allergyintolerance-resolutionage.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "allergyintolerance-resolutionAge", result.get(0).getId()); 
    }
    @Test
    public void testLoadActivityDefinition6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/activitydefinition-procedurerequest-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ActivityDefinition activitydefinition = ActivityDefinition.fromJson(json);

     List<ActivityDefinition> list = Arrays.asList(new ActivityDefinition[] {activitydefinition});

      when(activitydefinitionService.selectAll()).thenReturn(list);

      List<ActivityDefinition> result = activitydefinitionService.selectAll();

      assertEquals("Expect ", "heart-valve-replacement", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition141FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/integer.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "integer", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem98FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-adjudication.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "adjudication", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet126FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-immunization-recommendation-date-criterion.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "immunization-recommendation-date-criterion", result.get(0).getId()); 
    }
    @Test
    public void testLoadRiskAssessment3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/riskassessment-example-population.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     RiskAssessment riskassessment = RiskAssessment.fromJson(json);

     List<RiskAssessment> list = Arrays.asList(new RiskAssessment[] {riskassessment});

      when(riskassessmentService.selectAll()).thenReturn(list);

      List<RiskAssessment> result = riskassessmentService.selectAll();

      assertEquals("Expect ", "population", result.get(0).getId()); 
    }
    @Test
    public void testLoadNamingSystem2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/namingsystem-example-replaced.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NamingSystem namingsystem = NamingSystem.fromJson(json);

     List<NamingSystem> list = Arrays.asList(new NamingSystem[] {namingsystem});

      when(namingsystemService.selectAll()).thenReturn(list);

      List<NamingSystem> result = namingsystemService.selectAll();

      assertEquals("Expect ", "example-replaced", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition142FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-buildingnumbersuffix.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-buildingNumberSuffix", result.get(0).getId()); 
    }
    @Test
    public void testLoadDiagnosticReport2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-example-gingival-mass.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DiagnosticReport diagnosticreport = DiagnosticReport.fromJson(json);

     List<DiagnosticReport> list = Arrays.asList(new DiagnosticReport[] {diagnosticreport});

      when(diagnosticreportService.selectAll()).thenReturn(list);

      List<DiagnosticReport> result = diagnosticreportService.selectAll();

      assertEquals("Expect ", "gingival-mass", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition143FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-11179-de-change-description.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "11179-de-change-description", result.get(0).getId()); 
    }
    @Test
    public void testLoadFlag1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/flag-example-encounter.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Flag flag = Flag.fromJson(json);

     List<Flag> list = Arrays.asList(new Flag[] {flag});

      when(flagService.selectAll()).thenReturn(list);

      List<Flag> result = flagService.selectAll();

      assertEquals("Expect ", "example-encounter", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition144FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-http-response-header.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "http-response-header", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem99FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-classification-or-context.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "classification-or-context", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition145FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-warning.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-warning", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0306.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0306", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet127FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-audit-event-sub-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "audit-event-sub-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0321.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0321", result.get(0).getId()); 
    }
    @Test
    public void testLoadCoverage3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/coverage-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Coverage coverage = Coverage.fromJson(json);

     List<Coverage> list = Arrays.asList(new Coverage[] {coverage});

      when(coverageService.selectAll()).thenReturn(list);

      List<Coverage> result = coverageService.selectAll();

      assertEquals("Expect ", "9876B1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet128FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-postal-address-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "postal-address-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition146FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-device-implant-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "device-implant-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition147FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticsdnasequencevarianttype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsDNASequenceVariantType", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition148FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-unittype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-unitType", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition149FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-auditevent-numberofinstances.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "auditevent-NumberOfInstances", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet129FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-testscript-profile-origin-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "testscript-profile-origin-types", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition150FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/riskassessment.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "RiskAssessment", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet130FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-specimen-collection-method.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "specimen-collection-method", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire43FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/endpoint-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire44FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/eligibilityresponse-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition151FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-casesensitive.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-caseSensitive", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition152FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-displaycategory.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-displayCategory", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem100FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-care-team-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "care-team-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-unsat.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "unsat", result.get(0).getId()); 
    }
    @Test
    public void testLoadDeviceMetric1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/devicemetric-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DeviceMetric devicemetric = DeviceMetric.fromJson(json);

     List<DeviceMetric> list = Arrays.asList(new DeviceMetric[] {devicemetric});

      when(devicemetricService.selectAll()).thenReturn(list);

      List<DeviceMetric> result = devicemetricService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem101FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-service-referral-method.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "service-referral-method", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire45FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/schedule-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem102FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-identity-assuranceLevel.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "identity-assuranceLevel", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet131FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-episodeofcare-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "episodeofcare-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition153FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/namingsystem.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "NamingSystem", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet132FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-dicom-cid29.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "dicom-cid29", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet133FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-codesystem-content-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "codesystem-content-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition154FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-sc-coding.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-SC-coding", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition155FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-condition-outcome.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "condition-outcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0303.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0303", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet134FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire46FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/referralrequest-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet135FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-guide-dependency-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "guide-dependency-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem103FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-medication-request-priority.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "medication-request-priority", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition156FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codeableconcept.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "CodeableConcept", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0308.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0308", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet136FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-care-plan-activity-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "care-plan-activity-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition157FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-censustract.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-censusTract", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition158FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/appointmentresponse.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "AppointmentResponse", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition159FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticsdnasequencevariantname.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsDNASequenceVariantName", result.get(0).getId()); 
    }
    @Test
    public void testLoadOrganization3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/organization-example-f001-burgers.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Organization organization = Organization.fromJson(json);

     List<Organization> list = Arrays.asList(new Organization[] {organization});

      when(organizationService.selectAll()).thenReturn(list);

      List<Organization> result = organizationService.selectAll();

      assertEquals("Expect ", "f001", result.get(0).getId()); 
    }
    @Test
    public void testLoadMeasure2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/measure-component-a-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Measure measure = Measure.fromJson(json);

     List<Measure> list = Arrays.asList(new Measure[] {measure});

      when(measureService.selectAll()).thenReturn(list);

      List<Measure> result = measureService.selectAll();

      assertEquals("Expect ", "component-a-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet137FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-care-plan-activity-outcome.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "care-plan-activity-outcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet138FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-task-performer-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "task-performer-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadNutritionOrder4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder-example-cardiacdiet.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NutritionOrder nutritionorder = NutritionOrder.fromJson(json);

     List<NutritionOrder> list = Arrays.asList(new NutritionOrder[] {nutritionorder});

      when(nutritionorderService.selectAll()).thenReturn(list);

      List<NutritionOrder> result = nutritionorderService.selectAll();

      assertEquals("Expect ", "cardiacdiet", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationOutcome2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operationoutcome-example-allok.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationOutcome operationoutcome = OperationOutcome.fromJson(json);

     List<OperationOutcome> list = Arrays.asList(new OperationOutcome[] {operationoutcome});

      when(operationoutcomeService.selectAll()).thenReturn(list);

      List<OperationOutcome> result = operationoutcomeService.selectAll();

      assertEquals("Expect ", "allok", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem104FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-policyholder-relationship.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "policyholder-relationship", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire47FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/appointment-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition160FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-referralrequest-reasonrefused.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "referralrequest-reasonRefused", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition161FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticsphaseset.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsPhaseSet", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem105FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-guide-dependency-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "guide-dependency-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition162FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-elementdefinition-bindingname.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "elementdefinition-bindingName", result.get(0).getId()); 
    }
    @Test
    public void testLoadPlanDefinition4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/plandefinition-predecessor-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     PlanDefinition plandefinition = PlanDefinition.fromJson(json);

     List<PlanDefinition> list = Arrays.asList(new PlanDefinition[] {plandefinition});

      when(plandefinitionService.selectAll()).thenReturn(list);

      List<PlanDefinition> result = plandefinitionService.selectAll();

      assertEquals("Expect ", "zika-virus-intervention-initial", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem106FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-map-model-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "map-model-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet139FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-search-modifier-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "search-modifier-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition163FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-expirationdate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-expirationDate", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem107FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-extension-context.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "extension-context", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem108FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-payment-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "payment-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem109FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-audit-entity-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "audit-entity-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition164FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Extension", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition165FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/testscript.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "TestScript", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition166FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-11179-de-is-data-element-concept.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "11179-de-is-data-element-concept", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example-colonoscopy-bx.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "colon-biopsy", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition167FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/supplydelivery.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "SupplyDelivery", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationAdministration2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration0301.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationAdministration medicationadministration = MedicationAdministration.fromJson(json);

     List<MedicationAdministration> list = Arrays.asList(new MedicationAdministration[] {medicationadministration});

      when(medicationadministrationService.selectAll()).thenReturn(list);

      List<MedicationAdministration> result = medicationadministrationService.selectAll();

      assertEquals("Expect ", "medadmin0301", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet140FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-subscription-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "subscription-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem110FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-filter-operator.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "filter-operator", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example-implant.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "example-implant", result.get(0).getId()); 
    }
    @Test
    public void testLoadDiagnosticReport3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-example-dxa.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DiagnosticReport diagnosticreport = DiagnosticReport.fromJson(json);

     List<DiagnosticReport> list = Arrays.asList(new DiagnosticReport[] {diagnosticreport});

      when(diagnosticreportService.selectAll()).thenReturn(list);

      List<DiagnosticReport> result = diagnosticreportService.selectAll();

      assertEquals("Expect ", "102", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem111FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-flag-priority.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "flag-priority", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-satO2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "satO2", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition168FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-replacedby.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-replacedby", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem112FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-flag-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "flag-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem113FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-coverage-selfpay.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "coverage-selfpay", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire48FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/heartrate-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition169FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-composition-clindoc-otherconfidentiality.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "composition-clindoc-otherConfidentiality", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet141FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-endpoint-payload-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "endpoint-payload-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadBinary1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/binary-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Binary binary = Binary.fromJson(json);

     List<Binary> list = Arrays.asList(new Binary[] {binary});

      when(binaryService.selectAll()).thenReturn(list);

      List<Binary> result = binaryService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-example-ihe-pcd.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "ihe-pcd", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-genetics-2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "example-genetics-2", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet142FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-binding-strength.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "binding-strength", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem114FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-iso-21089-lifecycle.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "iso-21089-lifecycle", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet143FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-service-pharmacy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "service-pharmacy", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem115FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-assert-direction-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "assert-direction-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0302.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0302", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet144FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-service-product.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "service-product", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet145FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-action-required-behavior.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "action-required-behavior", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire49FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operationdefinition-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition170FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-minoccurs.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-minOccurs", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem116FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-fundsreserve.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "fundsreserve", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationOutcome3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operationoutcome-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationOutcome operationoutcome = OperationOutcome.fromJson(json);

     List<OperationOutcome> list = Arrays.asList(new OperationOutcome[] {operationoutcome});

      when(operationoutcomeService.selectAll()).thenReturn(list);

      List<OperationOutcome> result = operationoutcomeService.selectAll();

      assertEquals("Expect ", "101", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem117FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-signature-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "signature-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire50FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-genetics-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem118FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-list-empty-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "list-empty-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadAppointmentResponse2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/appointmentresponse-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     AppointmentResponse appointmentresponse = AppointmentResponse.fromJson(json);

     List<AppointmentResponse> list = Arrays.asList(new AppointmentResponse[] {appointmentresponse});

      when(appointmentresponseService.selectAll()).thenReturn(list);

      List<AppointmentResponse> result = appointmentresponseService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition171FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/implementationguide.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ImplementationGuide", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire51FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bodytemp-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet146FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-search-xpath-usage.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "search-xpath-usage", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-oral-orthoplan.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "100153", result.get(0).getId()); 
    }
    @Test
    public void testLoadCarePlan3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careplan-example-f001-heart.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CarePlan careplan = CarePlan.fromJson(json);

     List<CarePlan> list = Arrays.asList(new CarePlan[] {careplan});

      when(careplanService.selectAll()).thenReturn(list);

      List<CarePlan> result = careplanService.selectAll();

      assertEquals("Expect ", "f001", result.get(0).getId()); 
    }
    @Test
    public void testLoadPlanDefinition5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/plandefinition-exclusive-breastfeeding-intervention-02.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     PlanDefinition plandefinition = PlanDefinition.fromJson(json);

     List<PlanDefinition> list = Arrays.asList(new PlanDefinition[] {plandefinition});

      when(plandefinitionService.selectAll()).thenReturn(list);

      List<PlanDefinition> result = plandefinitionService.selectAll();

      assertEquals("Expect ", "exclusive-breastfeeding-intervention-02", result.get(0).getId()); 
    }
    @Test
    public void testLoadTask1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/task-example2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Task task = Task.fromJson(json);

     List<Task> list = Arrays.asList(new Task[] {task});

      when(taskService.selectAll()).thenReturn(list);

      List<Task> result = taskService.selectAll();

      assertEquals("Expect ", "example2", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition172FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-humanname-own-name.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "humanname-own-name", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition173FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-identifier-validdate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "identifier-validDate", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem119FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-conditional-delete-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "conditional-delete-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation17FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-f203-bicarbonate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "f203", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet147FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-sequence-quality-standardSequence.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "sequence-quality-standardSequence", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition174FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-task-replaces.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "task-replaces", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition175FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/binary.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Binary", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet148FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-observation-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "observation-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet149FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-contract-content-derivative.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "contract-content-derivative", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire52FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/lipidprofile-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition176FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-hla-genotyping-results-haploid.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "hla-genotyping-results-haploid", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-example-c.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "pat3", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation18FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-body-length.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "body-length", result.get(0).getId()); 
    }
    @Test
    public void testLoadDiagnosticReport4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-genetics-comprehensive-bone-marrow-report.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DiagnosticReport diagnosticreport = DiagnosticReport.fromJson(json);

     List<DiagnosticReport> list = Arrays.asList(new DiagnosticReport[] {diagnosticreport});

      when(diagnosticreportService.selectAll()).thenReturn(list);

      List<DiagnosticReport> result = diagnosticreportService.selectAll();

      assertEquals("Expect ", "report", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem120FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-service-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "service-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition177FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-ballot-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-ballot-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/location-examples-general.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "3ad0687e-f477-468c-afd5-fcc2bf897819", result.get(0).getId()); 
    }
    @Test
    public void testLoadDiagnosticReport5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-example-f202-bloodculture.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DiagnosticReport diagnosticreport = DiagnosticReport.fromJson(json);

     List<DiagnosticReport> list = Arrays.asList(new DiagnosticReport[] {diagnosticreport});

      when(diagnosticreportService.selectAll()).thenReturn(list);

      List<DiagnosticReport> result = diagnosticreportService.selectAll();

      assertEquals("Expect ", "f202", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem121FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-allergy-verification-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "allergy-verification-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition178FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/parameterdefinition.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ParameterDefinition", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet150FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-teeth.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "teeth", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet151FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-nutrient-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "nutrient-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition179FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-deliveryinstallationqualifier.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-deliveryInstallationQualifier", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0329.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0329", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet152FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-unknown-content-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "unknown-content-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadGraphDefinition1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/graphdefinition-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     GraphDefinition graphdefinition = GraphDefinition.fromJson(json);

     List<GraphDefinition> list = Arrays.asList(new GraphDefinition[] {graphdefinition});

      when(graphdefinitionService.selectAll()).thenReturn(list);

      List<GraphDefinition> result = graphdefinitionService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitioner5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-example-f007-sh.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Practitioner practitioner = Practitioner.fromJson(json);

     List<Practitioner> list = Arrays.asList(new Practitioner[] {practitioner});

      when(practitionerService.selectAll()).thenReturn(list);

      List<Practitioner> result = practitionerService.selectAll();

      assertEquals("Expect ", "f007", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition180FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/task.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Task", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition181FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-consent-witness.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "consent-Witness", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet153FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-encounter-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "encounter-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadNutritionOrder5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder-example-enteralbolus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NutritionOrder nutritionorder = NutritionOrder.fromJson(json);

     List<NutritionOrder> list = Arrays.asList(new NutritionOrder[] {nutritionorder});

      when(nutritionorderService.selectAll()).thenReturn(list);

      List<NutritionOrder> result = nutritionorderService.selectAll();

      assertEquals("Expect ", "enteralbolus", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem122FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-immunization-recommendation-date-criterion.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "immunization-recommendation-date-criterion", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire53FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/goal-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitioner6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-example-f003-mv.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Practitioner practitioner = Practitioner.fromJson(json);

     List<Practitioner> list = Arrays.asList(new Practitioner[] {practitioner});

      when(practitionerService.selectAll()).thenReturn(list);

      List<Practitioner> result = practitionerService.selectAll();

      assertEquals("Expect ", "f003", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet154FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-sequence-quality-method.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "sequence-quality-method", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition182FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-effectivedate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-effectiveDate", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet155FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-adjudication-error.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "adjudication-error", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition183FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedurerequest-approachbodysite.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedurerequest-approachBodySite", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition184FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-elementdefinition-translatable.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "elementdefinition-translatable", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem123FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-trigger-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "trigger-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire54FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/enrollmentrequest-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire55FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/riskassessment-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem124FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-location-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "location-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition185FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-rategoal.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "pharmacy-core-rateGoal", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem125FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-vaccination-protocol-dose-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "vaccination-protocol-dose-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition186FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-table-name.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-table-name", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition187FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-rateincrementinterval.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "pharmacy-core-rateIncrementInterval", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0317.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0317", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem126FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-namingsystem-identifier-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "namingsystem-identifier-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition188FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "MedicationDispense", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet156FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-location-physical-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "location-physical-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example-appendectomy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "appendectomy-narrative", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-structuredefinition-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "StructureDefinition-questionnaire", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example-colonoscopy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "colonoscopy", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation19FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-genetics-5.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "example-genetics-5", result.get(0).getId()); 
    }
    @Test
    public void testLoadDiagnosticReport6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-example-ghp.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DiagnosticReport diagnosticreport = DiagnosticReport.fromJson(json);

     List<DiagnosticReport> list = Arrays.asList(new DiagnosticReport[] {diagnosticreport});

      when(diagnosticreportService.selectAll()).thenReturn(list);

      List<DiagnosticReport> result = diagnosticreportService.selectAll();

      assertEquals("Expect ", "ghp", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet157FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-allergy-clinical-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "allergy-clinical-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadFHIRList3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/list-example-medlist.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     FHIRList fhirlist = FHIRList.fromJson(json);

     List<FHIRList> list = Arrays.asList(new FHIRList[] {fhirlist});

      when(fhirlistService.selectAll()).thenReturn(list);

      List<FHIRList> result = fhirlistService.selectAll();

      assertEquals("Expect ", "med-list", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem127FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-claim-exception.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "claim-exception", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition189FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-expirationdate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-expirationDate", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation20FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-glasgow.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "glasgow", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition190FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-keyword.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-keyWord", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet158FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-udi.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "udi", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet159FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-contact-point-system.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "contact-point-system", result.get(0).getId()); 
    }
    @Test
    public void testLoadSpecimen2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/specimen-example-isolate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Specimen specimen = Specimen.fromJson(json);

     List<Specimen> list = Arrays.asList(new Specimen[] {specimen});

      when(specimenService.selectAll()).thenReturn(list);

      List<Specimen> result = specimenService.selectAll();

      assertEquals("Expect ", "isolate", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition191FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/researchstudy.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ResearchStudy", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem128FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-nhin-purposeofuse.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "nhin-purposeofuse", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem129FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-subscription-channel-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "subscription-channel-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem130FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-actionlist.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "actionlist", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem131FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCommunicationRequest1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/communicationrequest-example-fm-solicit-attachment.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CommunicationRequest communicationrequest = CommunicationRequest.fromJson(json);

     List<CommunicationRequest> list = Arrays.asList(new CommunicationRequest[] {communicationrequest});

      when(communicationrequestService.selectAll()).thenReturn(list);

      List<CommunicationRequest> result = communicationrequestService.selectAll();

      assertEquals("Expect ", "fm-solicit", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet160FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-c80-doc-classcodes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "c80-doc-classcodes", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-contact-point-use-v3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-contact-point-use-v3", result.get(0).getId()); 
    }
    @Test
    public void testLoadDetectedIssue2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/detectedissue-example-allergy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DetectedIssue detectedissue = DetectedIssue.fromJson(json);

     List<DetectedIssue> list = Arrays.asList(new DetectedIssue[] {detectedissue});

      when(detectedissueService.selectAll()).thenReturn(list);

      List<DetectedIssue> result = detectedissueService.selectAll();

      assertEquals("Expect ", "allergy", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire56FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/structuremap-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example-education.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "education", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet161FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-ex-diagnosisrelatedgroup.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "ex-diagnosisrelatedgroup", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem132FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-encounter-participant-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "encounter-participant-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet162FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-specimen-processing-procedure.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "specimen-processing-procedure", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem133FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-usage-context-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "usage-context-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet163FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-versioning-policy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "versioning-policy", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-servicedefinition-evaluate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "ServiceDefinition-evaluate", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-definitions.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "extensions", result.get(0).getId()); 
    }
    @Test
    public void testLoadEligibilityResponse1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/eligibilityresponse-example-benefits-2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     EligibilityResponse eligibilityresponse = EligibilityResponse.fromJson(json);

     List<EligibilityResponse> list = Arrays.asList(new EligibilityResponse[] {eligibilityresponse});

      when(eligibilityresponseService.selectAll()).thenReturn(list);

      List<EligibilityResponse> result = eligibilityresponseService.selectAll();

      assertEquals("Expect ", "E2502", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition192FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-match-grade.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "match-grade", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire57FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/measurereport-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire58FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/slot-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire59FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/oxygensat-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadAllergyIntolerance2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/allergyintolerance-medication.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     AllergyIntolerance allergyintolerance = AllergyIntolerance.fromJson(json);

     List<AllergyIntolerance> list = Arrays.asList(new AllergyIntolerance[] {allergyintolerance});

      when(allergyintoleranceService.selectAll()).thenReturn(list);

      List<AllergyIntolerance> result = allergyintoleranceService.selectAll();

      assertEquals("Expect ", "medication", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem134FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-search-comparator.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "search-comparator", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition193FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-11179-de-contact-address.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "11179-de-contact-address", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition194FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-template-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-template-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition195FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/money.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Money", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem135FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-adjudication-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "adjudication-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition196FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/devicerequest.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "DeviceRequest", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet164FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-condition-outcome.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "condition-outcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadCarePlan4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careplan-example-integrated.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CarePlan careplan = CarePlan.fromJson(json);

     List<CarePlan> list = Arrays.asList(new CarePlan[] {careplan});

      when(careplanService.selectAll()).thenReturn(list);

      List<CarePlan> result = careplanService.selectAll();

      assertEquals("Expect ", "integrate", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem136FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-clinical-impression-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "clinical-impression-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadOrganization4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/organization-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Organization organization = Organization.fromJson(json);

     List<Organization> list = Arrays.asList(new Organization[] {organization});

      when(organizationService.selectAll()).thenReturn(list);

      List<Organization> result = organizationService.selectAll();

      assertEquals("Expect ", "hl7", result.get(0).getId()); 
    }
    @Test
    public void testLoadNutritionOrder6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder-example-enteralcontinuous.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NutritionOrder nutritionorder = NutritionOrder.fromJson(json);

     List<NutritionOrder> list = Arrays.asList(new NutritionOrder[] {nutritionorder});

      when(nutritionorderService.selectAll()).thenReturn(list);

      List<NutritionOrder> result = nutritionorderService.selectAll();

      assertEquals("Expect ", "enteralcontinuous", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire60FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/communication-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet165FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-claim-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "claim-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadAuditEvent5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/audit-event-example-logout.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     AuditEvent auditevent = AuditEvent.fromJson(json);

     List<AuditEvent> list = Arrays.asList(new AuditEvent[] {auditevent});

      when(auditeventService.selectAll()).thenReturn(list);

      List<AuditEvent> result = auditeventService.selectAll();

      assertEquals("Expect ", "example-logout", result.get(0).getId()); 
    }
    @Test
    public void testLoadCompartmentDefinition1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/compartmentdefinition-device.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CompartmentDefinition compartmentdefinition = CompartmentDefinition.fromJson(json);

     List<CompartmentDefinition> list = Arrays.asList(new CompartmentDefinition[] {compartmentdefinition});

      when(compartmentdefinitionService.selectAll()).thenReturn(list);

      List<CompartmentDefinition> result = compartmentdefinitionService.selectAll();

      assertEquals("Expect ", "device", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem137FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-detectedissue-severity.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "detectedissue-severity", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem138FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-note-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "note-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem139FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-location-physical-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "location-physical-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet166FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-adverse-event-seriousness.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "adverse-event-seriousness", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0322.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0322", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitioner7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-example-f004-rb.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Practitioner practitioner = Practitioner.fromJson(json);

     List<Practitioner> list = Arrays.asList(new Practitioner[] {practitioner});

      when(practitionerService.selectAll()).thenReturn(list);

      List<Practitioner> result = practitionerService.selectAll();

      assertEquals("Expect ", "f004", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet167FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-condition-stage.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "condition-stage", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition197FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/immunization.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Immunization", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0327.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0327", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem140FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-operation-outcome.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "operation-outcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem141FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-research-subject-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "research-subject-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-medication-request-status-v3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-medication-request-status-v3", result.get(0).getId()); 
    }
    @Test
    public void testLoadResearchSubject1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/researchsubject-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ResearchSubject researchsubject = ResearchSubject.fromJson(json);

     List<ResearchSubject> list = Arrays.asList(new ResearchSubject[] {researchsubject});

      when(researchsubjectService.selectAll()).thenReturn(list);

      List<ResearchSubject> result = researchsubjectService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0313.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0313", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem142FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-condition-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "condition-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadReferralRequest1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/referralrequest-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ReferralRequest referralrequest = ReferralRequest.fromJson(json);

     List<ReferralRequest> list = Arrays.asList(new ReferralRequest[] {referralrequest});

      when(referralrequestService.selectAll()).thenReturn(list);

      List<ReferralRequest> result = referralrequestService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem143FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-quality-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "quality-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition198FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/headcircum.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "headcircum", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire61FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/immunizationrecommendation-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet168FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-reference-version-rules.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "reference-version-rules", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet169FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-messageheader-response-request.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "messageheader-response-request", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition199FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operationdefinition.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "OperationDefinition", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire62FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet170FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-name-part-qualifier.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "name-part-qualifier", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition200FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/paymentreconciliation.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "PaymentReconciliation", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem144FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-content-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "content-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet171FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-list-example-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "list-example-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition201FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedure-progressstatus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedure-progressStatus", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem145FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-medication-statement-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "medication-statement-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire63FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadBasic2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/basic-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Basic basic = Basic.fromJson(json);

     List<Basic> list = Arrays.asList(new Basic[] {basic});

      when(basicService.selectAll()).thenReturn(list);

      List<Basic> result = basicService.selectAll();

      assertEquals("Expect ", "referral", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet172FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-question-max-occurs.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "question-max-occurs", result.get(0).getId()); 
    }
    @Test
    public void testLoadProvenance3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/provenance-example-cwl.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Provenance provenance = Provenance.fromJson(json);

     List<Provenance> list = Arrays.asList(new Provenance[] {provenance});

      when(provenanceService.selectAll()).thenReturn(list);

      List<Provenance> result = provenanceService.selectAll();

      assertEquals("Expect ", "example-cwl", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition202FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-elementdefinition-selector.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "elementdefinition-selector", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet173FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-digital-media-subtype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "digital-media-subtype", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire64FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medication-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitioner8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-example-f001-evdb.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Practitioner practitioner = Practitioner.fromJson(json);

     List<Practitioner> list = Arrays.asList(new Practitioner[] {practitioner});

      when(practitionerService.selectAll()).thenReturn(list);

      List<Practitioner> result = practitionerService.selectAll();

      assertEquals("Expect ", "f001", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition203FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-11179-objectclassproperty.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "11179-objectClassProperty", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem146FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-medication-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "medication-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet174FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-supplyrequest-kind.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "supplyrequest-kind", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition204FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-trusted-expansion.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-trusted-expansion", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition205FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-openehr-exposureduration.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "openEHR-exposureDuration", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet175FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-parent-relationship-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "parent-relationship-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example-pt.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "physical-therapy", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet176FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-history-not-done-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "history-not-done-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation21FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-bloodpressure-dar.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "blood-pressure-dar", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition206FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/decimal.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "decimal", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet177FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-resource-slicing-rules.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "resource-slicing-rules", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire65FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/relatedperson-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet178FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-action-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "action-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition207FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/list.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "List", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem147FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-referencerange-meaning.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "referencerange-meaning", result.get(0).getId()); 
    }
    @Test
    public void testLoadLocation2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/location-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Location location = Location.fromJson(json);

     List<Location> list = Arrays.asList(new Location[] {location});

      when(locationService.selectAll()).thenReturn(list);

      List<Location> result = locationService.selectAll();

      assertEquals("Expect ", "1", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0332.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0332", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem148FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-basic-resource-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "basic-resource-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadDataElement1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/dataelement-labtestmaster-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DataElement dataelement = DataElement.fromJson(json);

     List<DataElement> list = Arrays.asList(new DataElement[] {dataelement});

      when(dataelementService.selectAll()).thenReturn(list);

      List<DataElement> result = dataelementService.selectAll();

      assertEquals("Expect ", "prothrombin", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet179FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-diet-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "diet-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCoverage4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/coverage-example-ehic.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Coverage coverage = Coverage.fromJson(json);

     List<Coverage> list = Arrays.asList(new Coverage[] {coverage});

      when(coverageService.selectAll()).thenReturn(list);

      List<Coverage> result = coverageService.selectAll();

      assertEquals("Expect ", "7547E", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet180FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-conditional-read-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "conditional-read-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition208FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/contactpoint.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ContactPoint", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition209FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-conceptorder.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-conceptOrder", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet181FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-use-context.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "use-context", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition210FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-11179-de-document-reference.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "11179-de-document-reference", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet182FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-provenance-entity-role.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "provenance-entity-role", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem149FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-benefit-network.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "benefit-network", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition211FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Observation", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition212FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-choiceorientation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-choiceOrientation", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0311.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0311", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationAdministration3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration0313.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationAdministration medicationadministration = MedicationAdministration.fromJson(json);

     List<MedicationAdministration> list = Arrays.asList(new MedicationAdministration[] {medicationadministration});

      when(medicationadministrationService.selectAll()).thenReturn(list);

      List<MedicationAdministration> result = medicationadministrationService.selectAll();

      assertEquals("Expect ", "medadmin0313", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition213FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/base64binary.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "base64Binary", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet183FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-allergy-intolerance-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "allergy-intolerance-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition214FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/event.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Event", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation22FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-5minute-apgar-score.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "5minute-apgar-score", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire66FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/devicecomponent-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet184FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-metric-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "metric-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition215FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-reference.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-reference", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem150FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-ex-revenue-center.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "ex-revenue-center", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem151FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-fm-conditions.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "fm-conditions", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition216FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-devicerequest-patientinstruction.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "devicerequest-patientInstruction", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition217FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-comments.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-comments", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet185FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-system-restful-interaction.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "system-restful-interaction", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem152FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-administrative-gender.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "administrative-gender", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition218FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-humanname-assembly-order.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "humanname-assembly-order", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet186FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-detectedissue-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "detectedissue-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition219FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/shareablevalueset.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "shareablevalueset", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition220FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-resource-lastreviewdate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "resource-lastReviewDate", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition221FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/imagingstudy.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ImagingStudy", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0325.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0325", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition222FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaireresponse-author.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaireresponse-author", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition223FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/duration.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Duration", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet187FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-allergy-intolerance-criticality.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "allergy-intolerance-criticality", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem153FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-subscription-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "subscription-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet188FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-actionlist.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "actionlist", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationStatement2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationstatementexample1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationStatement medicationstatement = MedicationStatement.fromJson(json);

     List<MedicationStatement> list = Arrays.asList(new MedicationStatement[] {medicationstatement});

      when(medicationstatementService.selectAll()).thenReturn(list);

      List<MedicationStatement> result = medicationstatementService.selectAll();

      assertEquals("Expect ", "example001", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet189FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-observation-interpretation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "observation-interpretation", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet190FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-detectedissue-mitigation-action.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "detectedissue-mitigation-action", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem154FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-fm-itemtype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "fm-itemtype", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition224FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/unsignedint.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "unsignedInt", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0304.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0304", result.get(0).getId()); 
    }
    @Test
    public void testLoadActivityDefinition7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/activitydefinition-predecessor-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ActivityDefinition activitydefinition = ActivityDefinition.fromJson(json);

     List<ActivityDefinition> list = Arrays.asList(new ActivityDefinition[] {activitydefinition});

      when(activitydefinitionService.selectAll()).thenReturn(list);

      List<ActivityDefinition> result = activitydefinitionService.selectAll();

      assertEquals("Expect ", "referralPrimaryCareMentalHealth-initial", result.get(0).getId()); 
    }
    @Test
    public void testLoadNutritionOrder7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder-example-proteinsupplement.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NutritionOrder nutritionorder = NutritionOrder.fromJson(json);

     List<NutritionOrder> list = Arrays.asList(new NutritionOrder[] {nutritionorder});

      when(nutritionorderService.selectAll()).thenReturn(list);

      List<NutritionOrder> result = nutritionorderService.selectAll();

      assertEquals("Expect ", "proteinsupplement", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition225FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-usage.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-usage", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem155FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-plan-definition-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "plan-definition-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadImagingStudy1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/imagingstudy-example-xr.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ImagingStudy imagingstudy = ImagingStudy.fromJson(json);

     List<ImagingStudy> list = Arrays.asList(new ImagingStudy[] {imagingstudy});

      when(imagingstudyService.selectAll()).thenReturn(list);

      List<ImagingStudy> result = imagingstudyService.selectAll();

      assertEquals("Expect ", "example-xr", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet191FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-content-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "content-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition226FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-effectivedate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-effectiveDate", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet192FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-measure-report-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "measure-report-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet193FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-care-team-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "care-team-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-genetics-example1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "genetics-example1", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example-colon-biopsy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "colon-biopsy", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet194FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-request-intent.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-request-intent", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition227FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-streetnamebase.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-streetNameBase", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition228FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-organization-alias.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "organization-alias", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-activitydefinition-apply.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "ActivityDefinition-apply", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet195FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-vision-eye-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "vision-eye-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire67FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/linkage-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet196FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-ucum-vitals-common.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "ucum-vitals-common", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition229FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-11179-de-registry-org.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "11179-de-registry-org", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition230FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-label.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-label", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet197FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-care-plan-activity-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "care-plan-activity-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadFHIRList4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/list-example-familyhistory-genetics-profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     FHIRList fhirlist = FHIRList.fromJson(json);

     List<FHIRList> list = Arrays.asList(new FHIRList[] {fhirlist});

      when(fhirlistService.selectAll()).thenReturn(list);

      List<FHIRList> result = fhirlistService.selectAll();

      assertEquals("Expect ", "genetic", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet198FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-search-comparator.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "search-comparator", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-address-use-v3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-address-use-v3", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-graphic-example-4.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "graphic-example-4", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet199FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-formatcodes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "formatcodes", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet200FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-communication-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "communication-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition231FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/count.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Count", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0306.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0306", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition232FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/resprate.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "resprate", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem156FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-capability-statement-kind.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "capability-statement-kind", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition233FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-goal-relationship.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "goal-relationship", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire68FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bodyheight-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition234FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-display-hint.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-display-hint", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet201FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-message-significance-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "message-significance-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition235FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/chargeitem.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ChargeItem", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem157FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-account-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "account-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition236FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-usagemode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-usageMode", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire69FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/ldlcholesterol-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet202FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-consent-except-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "consent-except-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense17FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0303.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0303", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet203FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-task-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "task-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCommunication1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/communication-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Communication communication = Communication.fromJson(json);

     List<Communication> list = Arrays.asList(new Communication[] {communication});

      when(communicationService.selectAll()).thenReturn(list);

      List<Communication> result = communicationService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadRelatedPerson2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/relatedperson-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     RelatedPerson relatedperson = RelatedPerson.fromJson(json);

     List<RelatedPerson> list = Arrays.asList(new RelatedPerson[] {relatedperson});

      when(relatedpersonService.selectAll()).thenReturn(list);

      List<RelatedPerson> result = relatedpersonService.selectAll();

      assertEquals("Expect ", "benedicte", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet204FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-procedure-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "procedure-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition237FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/timing.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Timing", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem158FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-appointmentstatus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "appointmentstatus", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0324.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0324", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-questionnaire-populatelink.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Questionnaire-populatelink", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem159FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-chargeitem-billingcodes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "chargeitem-billingcodes", result.get(0).getId()); 
    }
    @Test
    public void testLoadEligibilityRequest1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/eligibilityrequest-example-2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     EligibilityRequest eligibilityrequest = EligibilityRequest.fromJson(json);

     List<EligibilityRequest> list = Arrays.asList(new EligibilityRequest[] {eligibilityrequest});

      when(eligibilityrequestService.selectAll()).thenReturn(list);

      List<EligibilityRequest> result = eligibilityrequestService.selectAll();

      assertEquals("Expect ", "52346", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition238FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sampleddata.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "SampledData", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationAdministration4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration0306.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationAdministration medicationadministration = MedicationAdministration.fromJson(json);

     List<MedicationAdministration> list = Arrays.asList(new MedicationAdministration[] {medicationadministration});

      when(medicationadministrationService.selectAll()).thenReturn(list);

      List<MedicationAdministration> result = medicationadministrationService.selectAll();

      assertEquals("Expect ", "medadmin0306", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0314.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0314", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet205FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-quantity-comparator.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "quantity-comparator", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem160FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-medication-dispense-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "medication-dispense-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet206FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-questionnaire-display-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "questionnaire-display-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet207FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-example-expansion.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "example-expansion", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition239FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-housenumbernumeric.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-houseNumberNumeric", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire70FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/supplydelivery-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem161FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-network-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "network-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem162FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-teeth.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "teeth", result.get(0).getId()); 
    }
    @Test
    public void testLoadBinary2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/binary-f006.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Binary binary = Binary.fromJson(json);

     List<Binary> list = Arrays.asList(new Binary[] {binary});

      when(binaryService.selectAll()).thenReturn(list);

      List<Binary> result = binaryService.selectAll();

      assertEquals("Expect ", "f006", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire71FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-genetics-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire72FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/specimen-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-example-a.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "pat1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet208FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-procedure-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "procedure-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition240FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-time-offset.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-time-offset", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/document-example-dischargesummary.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "father", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition241FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-condition-partof.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "condition-partOf", result.get(0).getId()); 
    }
    @Test
    public void testLoadEncounter3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/encounter-example-f201-20130404.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Encounter encounter = Encounter.fromJson(json);

     List<Encounter> list = Arrays.asList(new Encounter[] {encounter});

      when(encounterService.selectAll()).thenReturn(list);

      List<Encounter> result = encounterService.selectAll();

      assertEquals("Expect ", "f201", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationAdministration5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration0309.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationAdministration medicationadministration = MedicationAdministration.fromJson(json);

     List<MedicationAdministration> list = Arrays.asList(new MedicationAdministration[] {medicationadministration});

      when(medicationadministrationService.selectAll()).thenReturn(list);

      List<MedicationAdministration> result = medicationadministrationService.selectAll();

      assertEquals("Expect ", "medadmin0309", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0318.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0318", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition242FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/basic.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Basic", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition243FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-familymemberhistory-patient-record.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "familymemberhistory-patient-record", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/search-parameters.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "searchParams", result.get(0).getId()); 
    }
    @Test
    public void testLoadCondition5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/condition-example-f002-lung.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Condition condition = Condition.fromJson(json);

     List<Condition> list = Arrays.asList(new Condition[] {condition});

      when(conditionService.selectAll()).thenReturn(list);

      List<Condition> result = conditionService.selectAll();

      assertEquals("Expect ", "f002", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition244FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/clinicaldocument.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "clinicaldocument", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire73FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/searchparameter-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition245FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-map.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-map", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem163FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-extra-activity-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "extra-activity-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadSubstance4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/substance-example-f202-staphylococcus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Substance substance = Substance.fromJson(json);

     List<Substance> list = Arrays.asList(new Substance[] {substance});

      when(substanceService.selectAll()).thenReturn(list);

      List<Substance> result = substanceService.selectAll();

      assertEquals("Expect ", "f202", result.get(0).getId()); 
    }
    @Test
    public void testLoadCarePlan5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careplan-example-f203-sepsis.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CarePlan careplan = CarePlan.fromJson(json);

     List<CarePlan> list = Arrays.asList(new CarePlan[] {careplan});

      when(careplanService.selectAll()).thenReturn(list);

      List<CarePlan> result = careplanService.selectAll();

      assertEquals("Expect ", "f203", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition246FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-device-din.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "device-din", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem164FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-assert-response-code-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "assert-response-code-types", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet209FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-system-version-processing-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "system-version-processing-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem165FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-search-param-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "search-param-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition247FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-openehr-test.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "openEHR-test", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet210FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-immunization-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "immunization-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet211FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-structure-definition-kind.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "structure-definition-kind", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition248FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-deliveryinstallationarea.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-deliveryInstallationArea", result.get(0).getId()); 
    }
    @Test
    public void testLoadCommunication2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/communication-example-fm-attachment.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Communication communication = Communication.fromJson(json);

     List<Communication> list = Arrays.asList(new Communication[] {communication});

      when(communicationService.selectAll()).thenReturn(list);

      List<Communication> result = communicationService.selectAll();

      assertEquals("Expect ", "fm-attachment", result.get(0).getId()); 
    }
    @Test
    public void testLoadDevice2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/device-example-f001-feedingtube.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Device device = Device.fromJson(json);

     List<Device> list = Arrays.asList(new Device[] {device});

      when(deviceService.selectAll()).thenReturn(list);

      List<Device> result = deviceService.selectAll();

      assertEquals("Expect ", "f001", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedia1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/media-example-dicom.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Media media = Media.fromJson(json);

     List<Media> list = Arrays.asList(new Media[] {media});

      when(mediaService.selectAll()).thenReturn(list);

      List<Media> result = mediaService.selectAll();

      assertEquals("Expect ", "1.2.840.11361907579238403408700.3.0.14.19970327150033", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition249FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-communicationrequest-relevanthistory.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "communicationrequest-relevantHistory", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-examples-cypress-template.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "b0a5e4277-83c4-4adb-87e2-e3efe3369b6f", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem166FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-contact-point-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "contact-point-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadDevice3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/device-example-ihe-pcd.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Device device = Device.fromJson(json);

     List<Device> list = Arrays.asList(new Device[] {device});

      when(deviceService.selectAll()).thenReturn(list);

      List<Device> result = deviceService.selectAll();

      assertEquals("Expect ", "ihe-pcd", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition250FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bundle.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Bundle", result.get(0).getId()); 
    }
    @Test
    public void testLoadRequestGroup1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/requestgroup-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     RequestGroup requestgroup = RequestGroup.fromJson(json);

     List<RequestGroup> list = Arrays.asList(new RequestGroup[] {requestgroup});

      when(requestgroupService.selectAll()).thenReturn(list);

      List<RequestGroup> result = requestgroupService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet212FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-action-participant-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "action-participant-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadDevice4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/device-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Device device = Device.fromJson(json);

     List<Device> list = Arrays.asList(new Device[] {device});

      when(deviceService.selectAll()).thenReturn(list);

      List<Device> result = deviceService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition251FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-specimen-isdryweight.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "specimen-isDryWeight", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition252FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-deprecated.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-deprecated", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem167FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-endpoint-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "endpoint-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition253FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/devicemetric.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "DeviceMetric", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition254FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/signature.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Signature", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem168FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-concept-properties.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "concept-properties", result.get(0).getId()); 
    }
    @Test
    public void testLoadCarePlan6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careplan-example-pregnancy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CarePlan careplan = CarePlan.fromJson(json);

     List<CarePlan> list = Arrays.asList(new CarePlan[] {careplan});

      when(careplanService.selectAll()).thenReturn(list);

      List<CarePlan> result = careplanService.selectAll();

      assertEquals("Expect ", "preg", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition255FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-rendering-style.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "rendering-style", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet213FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-subscription-channel-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "subscription-channel-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire74FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaire-zika-virus-exposure-assessment.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "zika-virus-exposure-assessment", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition256FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/messagedefinition.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "MessageDefinition", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet214FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-contract-subtype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "contract-subtype", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem169FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-forms.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "forms", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet215FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-forms.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "forms", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/namingsystem-terminologies.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "terminologies", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet216FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-cpt-all.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "cpt-all", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition257FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/request.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Request", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire75FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/clinicaldocument-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire76FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/vitalsigns-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet217FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-action-precheck-behavior.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "action-precheck-behavior", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0319.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0319", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition258FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-precinct.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-precinct", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire77FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/headcircum-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet218FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-clinicalimpression-prognosis.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "clinicalimpression-prognosis", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire78FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claimresponse-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet219FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-administration-method-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "administration-method-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet220FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-observation-vitalsignresult.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "observation-vitalsignresult", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationOutcome4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operationoutcome-example-validationfail.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationOutcome operationoutcome = OperationOutcome.fromJson(json);

     List<OperationOutcome> list = Arrays.asList(new OperationOutcome[] {operationoutcome});

      when(operationoutcomeService.selectAll()).thenReturn(list);

      List<OperationOutcome> result = operationoutcomeService.selectAll();

      assertEquals("Expect ", "validationfail", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-oral-contained.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "100152", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire79FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consentdirective-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationOutcome5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operationoutcome-example-searchfail.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationOutcome operationoutcome = OperationOutcome.fromJson(json);

     List<OperationOutcome> list = Arrays.asList(new OperationOutcome[] {operationoutcome});

      when(operationoutcomeService.selectAll()).thenReturn(list);

      List<OperationOutcome> result = operationoutcomeService.selectAll();

      assertEquals("Expect ", "searchfail", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition259FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticsgene.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsGene", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet221FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-focal-subject.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "focal-subject", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example-lipid.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "lipid", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet222FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-oral-prosthodontic-material.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "oral-prosthodontic-material", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition260FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bodyheight.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "bodyheight", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire80FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/imagingstudy-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-institutional.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "960150", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition261FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-unit.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-unit", result.get(0).getId()); 
    }
    @Test
    public void testLoadTask2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/task-example6.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Task task = Task.fromJson(json);

     List<Task> list = Arrays.asList(new Task[] {task});

      when(taskService.selectAll()).thenReturn(list);

      List<Task> result = taskService.selectAll();

      assertEquals("Expect ", "example6", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet223FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-guidance-response-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "guidance-response-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition262FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-flag-priority.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "flag-priority", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition263FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Sequence", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet224FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-entformula-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "entformula-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet225FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-contract-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "contract-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet226FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-sequence-referenceSeq.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "sequence-referenceSeq", result.get(0).getId()); 
    }
    @Test
    public void testLoadEligibilityResponse2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/eligibilityresponse-example-benefits.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     EligibilityResponse eligibilityresponse = EligibilityResponse.fromJson(json);

     List<EligibilityResponse> list = Arrays.asList(new EligibilityResponse[] {eligibilityresponse});

      when(eligibilityresponseService.selectAll()).thenReturn(list);

      List<EligibilityResponse> result = eligibilityresponseService.selectAll();

      assertEquals("Expect ", "E2501", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet227FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-observation-methods.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "observation-methods", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem170FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-library-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "library-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem171FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-medication-request-intent.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "medication-request-intent", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem172FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-audit-event-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "audit-event-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition264FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-flag-detail.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "flag-detail", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem173FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-device-action.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "device-action", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet228FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-dicm-405-mediatype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "dicm-405-mediatype", result.get(0).getId()); 
    }
    @Test
    public void testLoadGoal1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/goal-example-stop-smoking.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Goal goal = Goal.fromJson(json);

     List<Goal> list = Arrays.asList(new Goal[] {goal});

      when(goalService.selectAll()).thenReturn(list);

      List<Goal> result = goalService.selectAll();

      assertEquals("Expect ", "stop-smoking", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-codesystem-subsumes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "CodeSystem-subsumes", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition265FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/goal.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Goal", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-example-xds.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "xds", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet229FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-payment-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "payment-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCondition6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/condition-example-f204-renal.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Condition condition = Condition.fromJson(json);

     List<Condition> list = Arrays.asList(new Condition[] {condition});

      when(conditionService.selectAll()).thenReturn(list);

      List<Condition> result = conditionService.selectAll();

      assertEquals("Expect ", "f204", result.get(0).getId()); 
    }
    @Test
    public void testLoadContract3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/pcd-example-notAuthor.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Contract contract = Contract.fromJson(json);

     List<Contract> list = Arrays.asList(new Contract[] {contract});

      when(contractService.selectAll()).thenReturn(list);

      List<Contract> result = contractService.selectAll();

      assertEquals("Expect ", "pcd-example-notAuthor", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition266FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-addendumof.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "diagnosticReport-addendumOf", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition267FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-eventtiming.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-eventTiming", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet230FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-goal-relationship-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "goal-relationship-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition268FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/triggerdefinition.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "TriggerDefinition", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationAdministration6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration0310.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationAdministration medicationadministration = MedicationAdministration.fromJson(json);

     List<MedicationAdministration> list = Arrays.asList(new MedicationAdministration[] {medicationadministration});

      when(medicationadministrationService.selectAll()).thenReturn(list);

      List<MedicationAdministration> result = medicationadministrationService.selectAll();

      assertEquals("Expect ", "medadmin0310", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition269FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-location-distance.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "location-distance", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/v3-codesystems.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "v3-valuesets", result.get(0).getId()); 
    }
    @Test
    public void testLoadOrganization5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/organization-example-f003-burgers-ENT.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Organization organization = Organization.fromJson(json);

     List<Organization> list = Arrays.asList(new Organization[] {organization});

      when(organizationService.selectAll()).thenReturn(list);

      List<Organization> result = organizationService.selectAll();

      assertEquals("Expect ", "f003", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet231FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-request-intent.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "request-intent", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation23FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-glasgow-qa.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "gcs-qa", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem174FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-resource-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "resource-types", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense18FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0301.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0301", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire81FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/imagingmanifest-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-capabilitystatement-implements.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "CapabilityStatement-implements", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem175FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-history-not-done-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "history-not-done-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation24FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-f204-creatinine.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "f204", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition270FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/paymentnotice.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "PaymentNotice", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem176FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-name-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "name-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0320.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0320", result.get(0).getId()); 
    }
    @Test
    public void testLoadGoal2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/goal-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Goal goal = Goal.fromJson(json);

     List<Goal> list = Arrays.asList(new Goal[] {goal});

      when(goalService.selectAll()).thenReturn(list);

      List<Goal> result = goalService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation25FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-haplotype2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "example-haplotype2", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition271FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-auditevent-participantobjectcontainsstudy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "auditevent-ParticipantObjectContainsStudy", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet232FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-measure-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "measure-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCarePlan7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careplan-example-GPVisit.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CarePlan careplan = CarePlan.fromJson(json);

     List<CarePlan> list = Arrays.asList(new CarePlan[] {careplan});

      when(careplanService.selectAll()).thenReturn(list);

      List<CarePlan> result = careplanService.selectAll();

      assertEquals("Expect ", "gpvisit", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet233FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-immunization-origin.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "immunization-origin", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet234FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-encounter-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "encounter-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem177FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-payment-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "payment-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem178FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-metric-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "metric-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet235FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-resource-validation-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "resource-validation-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle17FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-examples-general.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "3ad0687e-f477-468c-afd5-fcc2bf897809", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet236FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-additionalmaterials.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "additionalmaterials", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition272FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/attachment.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Attachment", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationStatement3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationstatementexample6.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationStatement medicationstatement = MedicationStatement.fromJson(json);

     List<MedicationStatement> list = Arrays.asList(new MedicationStatement[] {medicationstatement});

      when(medicationstatementService.selectAll()).thenReturn(list);

      List<MedicationStatement> result = medicationstatementService.selectAll();

      assertEquals("Expect ", "example006", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition273FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-rdf-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-rdf-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadAuditEvent6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/auditevent-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     AuditEvent auditevent = AuditEvent.fromJson(json);

     List<AuditEvent> list = Arrays.asList(new AuditEvent[] {auditevent});

      when(auditeventService.selectAll()).thenReturn(list);

      List<AuditEvent> result = auditeventService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitioner9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-example-xcda-author.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Practitioner practitioner = Practitioner.fromJson(json);

     List<Practitioner> list = Arrays.asList(new Practitioner[] {practitioner});

      when(practitionerService.selectAll()).thenReturn(list);

      List<Practitioner> result = practitionerService.selectAll();

      assertEquals("Expect ", "xcda-author", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationAdministration7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration0304.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationAdministration medicationadministration = MedicationAdministration.fromJson(json);

     List<MedicationAdministration> list = Arrays.asList(new MedicationAdministration[] {medicationadministration});

      when(medicationadministrationService.selectAll()).thenReturn(list);

      List<MedicationAdministration> result = medicationadministrationService.selectAll();

      assertEquals("Expect ", "medadmin0304", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle18FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/profiles-resources.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "resources", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition274FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedure-approachbodysite.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedure-approachBodySite", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet237FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-substance-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "substance-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition275FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/element.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Element", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition17FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-list-find.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "List-find", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet238FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-assert-response-code-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "assert-response-code-types", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire82FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/allergyintolerance-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition276FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-ordinalvalue.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-ordinalValue", result.get(0).getId()); 
    }
    @Test
    public void testLoadDiagnosticReport7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-genetics-example-2-familyhistory.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DiagnosticReport diagnosticreport = DiagnosticReport.fromJson(json);

     List<DiagnosticReport> list = Arrays.asList(new DiagnosticReport[] {diagnosticreport});

      when(diagnosticreportService.selectAll()).thenReturn(list);

      List<DiagnosticReport> result = diagnosticreportService.selectAll();

      assertEquals("Expect ", "dg2", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition277FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/documentreference.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "DocumentReference", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem179FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-conditional-read-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "conditional-read-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem180FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-action-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "action-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet239FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-narrative-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "narrative-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition278FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/coverage.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Coverage", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0330.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0330", result.get(0).getId()); 
    }
    @Test
    public void testLoadOrganization6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/organization-example-f002-burgers-card.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Organization organization = Organization.fromJson(json);

     List<Organization> list = Arrays.asList(new Organization[] {organization});

      when(organizationService.selectAll()).thenReturn(list);

      List<Organization> result = organizationService.selectAll();

      assertEquals("Expect ", "f002", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition279FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-rendering-xhtml.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "rendering-xhtml", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitioner10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-example-f204-ce.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Practitioner practitioner = Practitioner.fromJson(json);

     List<Practitioner> list = Arrays.asList(new Practitioner[] {practitioner});

      when(practitionerService.selectAll()).thenReturn(list);

      List<Practitioner> result = practitionerService.selectAll();

      assertEquals("Expect ", "f204", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet240FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-statement-taken.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-statement-taken", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem181FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-service-pharmacy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "service-pharmacy", result.get(0).getId()); 
    }
    @Test
    public void testLoadEligibilityResponse3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/eligibilityresponse-example-error.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     EligibilityResponse eligibilityresponse = EligibilityResponse.fromJson(json);

     List<EligibilityResponse> list = Arrays.asList(new EligibilityResponse[] {eligibilityresponse});

      when(eligibilityresponseService.selectAll()).thenReturn(list);

      List<EligibilityResponse> result = eligibilityresponseService.selectAll();

      assertEquals("Expect ", "E2503", result.get(0).getId()); 
    }
    @Test
    public void testLoadConsent4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consent-example-notAuthor.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Consent consent = Consent.fromJson(json);

     List<Consent> list = Arrays.asList(new Consent[] {consent});

      when(consentService.selectAll()).thenReturn(list);

      List<Consent> result = consentService.selectAll();

      assertEquals("Expect ", "consent-example-notAuthor", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0307.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0307", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem182FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-guide-page-kind.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "guide-page-kind", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem183FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-benefit-subcategory.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "benefit-subcategory", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet241FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-ucum-bodyweight.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "ucum-bodyweight", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition280FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-patient-disability.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "patient-disability", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition281FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-auditevent-encrypted.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "auditevent-Encrypted", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition18FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-capabilitystatement-subset.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "CapabilityStatement-subset", result.get(0).getId()); 
    }
    @Test
    public void testLoadMeasure3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/measure-exclusive-breastfeeding.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Measure measure = Measure.fromJson(json);

     List<Measure> list = Arrays.asList(new Measure[] {measure});

      when(measureService.selectAll()).thenReturn(list);

      List<Measure> result = measureService.selectAll();

      assertEquals("Expect ", "measure-exclusive-breastfeeding", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet242FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-bodysite-laterality.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "bodysite-laterality", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition282FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/servicedefinition.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ServiceDefinition", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet243FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-dataelement-stringency.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "dataelement-stringency", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition283FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/encounter.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Encounter", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem184FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-adverse-event-causality-method.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "adverse-event-causality-method", result.get(0).getId()); 
    }
    @Test
    public void testLoadLocation3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/location-example-room.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Location location = Location.fromJson(json);

     List<Location> list = Arrays.asList(new Location[] {location});

      when(locationService.selectAll()).thenReturn(list);

      List<Location> result = locationService.selectAll();

      assertEquals("Expect ", "2", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcessResponse1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processresponse-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcessResponse processresponse = ProcessResponse.fromJson(json);

     List<ProcessResponse> list = Arrays.asList(new ProcessResponse[] {processresponse});

      when(processresponseService.selectAll()).thenReturn(list);

      List<ProcessResponse> result = processresponseService.selectAll();

      assertEquals("Expect ", "SR2500", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet244FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-resource-type-link.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "resource-type-link", result.get(0).getId()); 
    }
    @Test
    public void testLoadNutritionOrder8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder-example-energysupplement.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NutritionOrder nutritionorder = NutritionOrder.fromJson(json);

     List<NutritionOrder> list = Arrays.asList(new NutritionOrder[] {nutritionorder});

      when(nutritionorderService.selectAll()).thenReturn(list);

      List<NutritionOrder> result = nutritionorderService.selectAll();

      assertEquals("Expect ", "energysupplement", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem185FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-quantity-comparator.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "quantity-comparator", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition284FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/slot.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Slot", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition285FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticsallelename.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsAlleleName", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet245FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-composite-measure-scoring.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "composite-measure-scoring", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet246FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-action-condition-kind.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "action-condition-kind", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition286FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-humanname-fathers-family.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "humanname-fathers-family", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet247FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-device-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "device-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition287FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-maxsize.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "maxSize", result.get(0).getId()); 
    }
    @Test
    public void testLoadCarePlan8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careplan-example-f201-renal.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CarePlan careplan = CarePlan.fromJson(json);

     List<CarePlan> list = Arrays.asList(new CarePlan[] {careplan});

      when(careplanService.selectAll()).thenReturn(list);

      List<CarePlan> result = careplanService.selectAll();

      assertEquals("Expect ", "f201", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition288FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-communicationrequest-orderedby.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "communicationrequest-orderedBy", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition289FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-event-partof.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "event-partOf", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet248FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-ex-program-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "ex-program-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition290FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-systemref.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-systemRef", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet249FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-operation-kind.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "operation-kind", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example-subrequest.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "subrequest", result.get(0).getId()); 
    }
    @Test
    public void testLoadPlanDefinition6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/plandefinition-chlamydia-screening-intervention.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     PlanDefinition plandefinition = PlanDefinition.fromJson(json);

     List<PlanDefinition> list = Arrays.asList(new PlanDefinition[] {plandefinition});

      when(plandefinitionService.selectAll()).thenReturn(list);

      List<PlanDefinition> result = plandefinitionService.selectAll();

      assertEquals("Expect ", "chlamydia-screening-intervention", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem186FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-group-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "group-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadLibrary4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/library-quick-model-definition.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Library library = Library.fromJson(json);

     List<Library> list = Arrays.asList(new Library[] {library});

      when(libraryService.selectAll()).thenReturn(list);

      List<Library> result = libraryService.selectAll();

      assertEquals("Expect ", "library-quick-model-definition", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire83FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/resprate-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition291FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-auditevent-mpps.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "auditevent-MPPS", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet250FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-procedure-outcome.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "procedure-outcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaireResponse4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaireresponse-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     QuestionnaireResponse questionnaireresponse = QuestionnaireResponse.fromJson(json);

     List<QuestionnaireResponse> list = Arrays.asList(new QuestionnaireResponse[] {questionnaireresponse});

      when(questionnaireresponseService.selectAll()).thenReturn(list);

      List<QuestionnaireResponse> result = questionnaireresponseService.selectAll();

      assertEquals("Expect ", "3141", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationStatement4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationstatementexample4.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationStatement medicationstatement = MedicationStatement.fromJson(json);

     List<MedicationStatement> list = Arrays.asList(new MedicationStatement[] {medicationstatement});

      when(medicationstatementService.selectAll()).thenReturn(list);

      List<MedicationStatement> result = medicationstatementService.selectAll();

      assertEquals("Expect ", "example004", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet251FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-benefit-unit.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "benefit-unit", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet252FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-payment-adjustment-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "payment-adjustment-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem187FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-cqif-recommendation-strength.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "cqif-recommendation-strength", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem188FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-ex-paymenttype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "ex-paymenttype", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcessRequest2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processrequest-example-reprocess.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcessRequest processrequest = ProcessRequest.fromJson(json);

     List<ProcessRequest> list = Arrays.asList(new ProcessRequest[] {processrequest});

      when(processrequestService.selectAll()).thenReturn(list);

      List<ProcessRequest> result = processrequestService.selectAll();

      assertEquals("Expect ", "44654", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet253FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-list-order.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "list-order", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire84FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/visionprescription-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition292FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-capabilitystatement-expectation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "capabilitystatement-expectation", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet254FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-adverse-event-causality-result.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "adverse-event-causality-result", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem189FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-audit-event-action.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "audit-event-action", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-example-f201-roel.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "f201", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet255FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-supplement-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "supplement-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition293FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/vitalspanel.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "vitalspanel", result.get(0).getId()); 
    }
    @Test
    public void testLoadDiagnosticReport8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-example-ultrasound.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DiagnosticReport diagnosticreport = DiagnosticReport.fromJson(json);

     List<DiagnosticReport> list = Arrays.asList(new DiagnosticReport[] {diagnosticreport});

      when(diagnosticreportService.selectAll()).thenReturn(list);

      List<DiagnosticReport> result = diagnosticreportService.selectAll();

      assertEquals("Expect ", "ultrasound", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet256FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-identity-assuranceLevel.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "identity-assuranceLevel", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition294FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/structuredefinition-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem190FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-organization-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "organization-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet257FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-benefit-term.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "benefit-term", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem191FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-substance-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "substance-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition295FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/time.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "time", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem192FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-encounter-diet.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "encounter-diet", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet258FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-animal-species.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "animal-species", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem193FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-service-uscls.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "service-uscls", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example-ob.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "ob", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire85FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition296FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-goal-reasonrejected.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "goal-reasonRejected", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation26FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-TPMT-diplotype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "example-TPMT-diplotype", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet259FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-admin-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-admin-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition297FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-extends.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "diagnosticReport-extends", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem194FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-goal-priority.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "goal-priority", result.get(0).getId()); 
    }
    @Test
    public void testLoadImagingStudy2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/imagingstudy-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ImagingStudy imagingstudy = ImagingStudy.fromJson(json);

     List<ImagingStudy> list = Arrays.asList(new ImagingStudy[] {imagingstudy});

      when(imagingstudyService.selectAll()).thenReturn(list);

      List<ImagingStudy> result = imagingstudyService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadDevice5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/device-example-udi4.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Device device = Device.fromJson(json);

     List<Device> list = Arrays.asList(new Device[] {device});

      when(deviceService.selectAll()).thenReturn(list);

      List<Device> result = deviceService.selectAll();

      assertEquals("Expect ", "example-udi4", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition298FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/uri.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "uri", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition299FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/date.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "date", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition300FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-communication-media.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "communication-media", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire86FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/person-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense19FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0314.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0314", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition301FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-specimen-sequencenumber.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "specimen-sequenceNumber", result.get(0).getId()); 
    }
    @Test
    public void testLoadOrganization7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/organization-example-f203-bumc.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Organization organization = Organization.fromJson(json);

     List<Organization> list = Arrays.asList(new Organization[] {organization});

      when(organizationService.selectAll()).thenReturn(list);

      List<Organization> result = organizationService.selectAll();

      assertEquals("Expect ", "f203", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition302FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedurerequest-reasonrejected.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedurerequest-reasonRejected", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition303FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-focal-subject.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-focal-subject", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet260FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-flag-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "flag-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet261FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-filter-operator.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "filter-operator", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest17FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0301.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0301", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition304FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-patient-religion.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "patient-religion", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet262FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-relationship.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "relationship", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem195FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-item-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "item-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle19FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/namingsystem-registry.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "registry", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet263FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-condition-predecessor.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "condition-predecessor", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet264FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-adverse-event-causality-method.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "adverse-event-causality-method", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition305FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/code.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "code", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet265FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-organization-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "organization-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest18FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0325.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0325", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet266FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-choice-list-orientation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "choice-list-orientation", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition306FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/communicationrequest.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "CommunicationRequest", result.get(0).getId()); 
    }
    @Test
    public void testLoadSubscription1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/subscription-example-error.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Subscription subscription = Subscription.fromJson(json);

     List<Subscription> list = Arrays.asList(new Subscription[] {subscription});

      when(subscriptionService.selectAll()).thenReturn(list);

      List<Subscription> result = subscriptionService.selectAll();

      assertEquals("Expect ", "example-error", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet267FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-c80-doc-typecodes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "c80-doc-typecodes", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "physiotherapy", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition307FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ProcedureRequest", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet268FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-plan-definition-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "plan-definition-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition308FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/endpoint.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Endpoint", result.get(0).getId()); 
    }
    @Test
    public void testLoadEncounter4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/encounter-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Encounter encounter = Encounter.fromJson(json);

     List<Encounter> list = Arrays.asList(new Encounter[] {encounter});

      when(encounterService.selectAll()).thenReturn(list);

      List<Encounter> result = encounterService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition309FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-elementdefinition-namespace.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "elementdefinition-namespace", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition310FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedure-incisiondatetime.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedure-incisionDateTime", result.get(0).getId()); 
    }
    @Test
    public void testLoadBodySite3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bodysite-example-tumor.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     BodySite bodysite = BodySite.fromJson(json);

     List<BodySite> list = Arrays.asList(new BodySite[] {bodysite});

      when(bodysiteService.selectAll()).thenReturn(list);

      List<BodySite> result = bodysiteService.selectAll();

      assertEquals("Expect ", "tumor", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet269FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-conceptmap-unmapped-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "conceptmap-unmapped-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet270FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-identifier-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "identifier-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-detectedissue-severity-v3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-detectedissue-severity-v3", result.get(0).getId()); 
    }
    @Test
    public void testLoadGroup1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/group-example-member.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Group group = Group.fromJson(json);

     List<Group> list = Arrays.asList(new Group[] {group});

      when(groupService.selectAll()).thenReturn(list);

      List<Group> result = groupService.selectAll();

      assertEquals("Expect ", "102", result.get(0).getId()); 
    }
    @Test
    public void testLoadComposition1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/composition-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Composition composition = Composition.fromJson(json);

     List<Composition> list = Arrays.asList(new Composition[] {composition});

      when(compositionService.selectAll()).thenReturn(list);

      List<Composition> result = compositionService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadConsent5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consent-example-notThem.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Consent consent = Consent.fromJson(json);

     List<Consent> list = Arrays.asList(new Consent[] {consent});

      when(consentService.selectAll()).thenReturn(list);

      List<Consent> result = consentService.selectAll();

      assertEquals("Expect ", "consent-example-notThem", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem196FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-binding-strength.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "binding-strength", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition311FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-rendered-value.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "rendered-value", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet271FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-trigger-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "trigger-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadFHIRList5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/list-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     FHIRList fhirlist = FHIRList.fromJson(json);

     List<FHIRList> list = Arrays.asList(new FHIRList[] {fhirlist});

      when(fhirlistService.selectAll()).thenReturn(list);

      List<FHIRList> result = fhirlistService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example-ambulation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "ambulation", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem197FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-intervention.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "intervention", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet272FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-action-relationship-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "action-relationship-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet273FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-publication-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "publication-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition312FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/allergyintolerance.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "AllergyIntolerance", result.get(0).getId()); 
    }
    @Test
    public void testLoadNutritionOrder9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder-example-fiberrestricteddiet.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NutritionOrder nutritionorder = NutritionOrder.fromJson(json);

     List<NutritionOrder> list = Arrays.asList(new NutritionOrder[] {nutritionorder});

      when(nutritionorderService.selectAll()).thenReturn(list);

      List<NutritionOrder> result = nutritionorderService.selectAll();

      assertEquals("Expect ", "fiberrestricteddiet", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition313FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedure-method.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedure-method", result.get(0).getId()); 
    }
    @Test
    public void testLoadCompartmentDefinition2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/compartmentdefinition-patient.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CompartmentDefinition compartmentdefinition = CompartmentDefinition.fromJson(json);

     List<CompartmentDefinition> list = Arrays.asList(new CompartmentDefinition[] {compartmentdefinition});

      when(compartmentdefinitionService.selectAll()).thenReturn(list);

      List<CompartmentDefinition> result = compartmentdefinitionService.selectAll();

      assertEquals("Expect ", "patient", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example-f003-abscess.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "f003", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition314FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-operationoutcome-issue-source.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "operationoutcome-issue-source", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem198FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-event-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "event-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle20FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bundle-transaction.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "bundle-transaction", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem199FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-definition-topic.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "definition-topic", result.get(0).getId()); 
    }
    @Test
    public void testLoadEncounter5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/encounter-example-f003-abscess.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Encounter encounter = Encounter.fromJson(json);

     List<Encounter> list = Arrays.asList(new Encounter[] {encounter});

      when(encounterService.selectAll()).thenReturn(list);

      List<Encounter> result = encounterService.selectAll();

      assertEquals("Expect ", "f003", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet274FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-encounter-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "encounter-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet275FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-compartment-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "compartment-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet276FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-probability-distribution-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "probability-distribution-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet277FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-service-modifiers.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "service-modifiers", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition315FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaireresponse-note.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaireresponse-note", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition316FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-consent-notificationendpoint.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "consent-NotificationEndpoint", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet278FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-udi-entry-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "udi-entry-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet279FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-device-action.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "device-action", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet280FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-map-input-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "map-input-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem200FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-supplydelivery-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "supplydelivery-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet281FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-ex-revenue-center.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "ex-revenue-center", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem201FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-sequence-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "sequence-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense20FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0318.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0318", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition317FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-label.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-label", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem202FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-consent-data-meaning.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "consent-data-meaning", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition318FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/visionprescription.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "VisionPrescription", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition319FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/account.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Account", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcessRequest3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processrequest-example-poll-exclusive.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcessRequest processrequest = ProcessRequest.fromJson(json);

     List<ProcessRequest> list = Arrays.asList(new ProcessRequest[] {processrequest});

      when(processrequestService.selectAll()).thenReturn(list);

      List<ProcessRequest> result = processrequestService.selectAll();

      assertEquals("Expect ", "1113", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation27FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-2minute-apgar-score.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "2minute-apgar-score", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet282FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-library-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "library-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition320FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-annotation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-annotation", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition321FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/graphdefinition.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "GraphDefinition", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition322FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-hidden.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-hidden", result.get(0).getId()); 
    }
    @Test
    public void testLoadSubstance5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/substance-example-amoxicillin-clavulanate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Substance substance = Substance.fromJson(json);

     List<Substance> list = Arrays.asList(new Substance[] {substance});

      when(substanceService.selectAll()).thenReturn(list);

      List<Substance> result = substanceService.selectAll();

      assertEquals("Expect ", "f205", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem203FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-supplydelivery-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "supplydelivery-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition323FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-refillsremaining.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "pharmacy-core-refillsRemaining", result.get(0).getId()); 
    }
    @Test
    public void testLoadLibrary5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/library-cms146-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Library library = Library.fromJson(json);

     List<Library> list = Arrays.asList(new Library[] {library});

      when(libraryService.selectAll()).thenReturn(list);

      List<Library> result = libraryService.selectAll();

      assertEquals("Expect ", "library-cms146-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition324FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-openehr-exposuredate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "openEHR-exposureDate", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition325FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-optionprefix.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-optionPrefix", result.get(0).getId()); 
    }
    @Test
    public void testLoadCondition7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/condition-example-f003-abscess.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Condition condition = Condition.fromJson(json);

     List<Condition> list = Arrays.asList(new Condition[] {condition});

      when(conditionService.selectAll()).thenReturn(list);

      List<Condition> result = conditionService.selectAll();

      assertEquals("Expect ", "f003", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest19FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0326.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0326", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire87FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/supplyrequest-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem204FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-specimen-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "specimen-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet283FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-composition-attestation-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "composition-attestation-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadCapabilityStatement1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/capabilitystatement-terminology-server.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CapabilityStatement capabilitystatement = CapabilityStatement.fromJson(json);

     List<CapabilityStatement> list = Arrays.asList(new CapabilityStatement[] {capabilitystatement});

      when(capabilitystatementService.selectAll()).thenReturn(list);

      List<CapabilityStatement> result = capabilitystatementService.selectAll();

      assertEquals("Expect ", "terminology-server", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem205FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-encounter-admit-source.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "encounter-admit-source", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet284FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-care-plan-intent.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "care-plan-intent", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem206FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-chromosome-human.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "chromosome-human", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet285FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-encounter-diet.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "encounter-diet", result.get(0).getId()); 
    }
    @Test
    public void testLoadConsent6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consent-example-signature.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Consent consent = Consent.fromJson(json);

     List<Consent> list = Arrays.asList(new Consent[] {consent});

      when(consentService.selectAll()).thenReturn(list);

      List<Consent> result = consentService.selectAll();

      assertEquals("Expect ", "consent-example-signature", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition326FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-maxdeliveryvolume.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "pharmacy-core-maxDeliveryVolume", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet286FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-reference-handling-policy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "reference-handling-policy", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem207FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-endpoint-connection-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "endpoint-connection-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet287FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-specification-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "specification-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadLocation4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/location-example-patients-home.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Location location = Location.fromJson(json);

     List<Location> list = Arrays.asList(new Location[] {location});

      when(locationService.selectAll()).thenReturn(list);

      List<Location> result = locationService.selectAll();

      assertEquals("Expect ", "ph", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition327FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Procedure", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation28FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-date-lastmp.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "date-lastmp", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition328FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-condition-criticality.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "condition-criticality", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire88FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/group-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem208FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-conformance-expectation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "conformance-expectation", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition329FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consent.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Consent", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition330FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processrequest.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ProcessRequest", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem209FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-document-relationship-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "document-relationship-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest20FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0335.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0335", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation29FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-f205-egfr.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "f205", result.get(0).getId()); 
    }
    @Test
    public void testLoadCapabilityStatement2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/capabilitystatement-messagedefinition.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CapabilityStatement capabilitystatement = CapabilityStatement.fromJson(json);

     List<CapabilityStatement> list = Arrays.asList(new CapabilityStatement[] {capabilitystatement});

      when(capabilitystatementService.selectAll()).thenReturn(list);

      List<CapabilityStatement> result = capabilitystatementService.selectAll();

      assertEquals("Expect ", "messagedefinition", result.get(0).getId()); 
    }
    @Test
    public void testLoadMessageDefinition1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/messagedefinition-patient-link-notification.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MessageDefinition messagedefinition = MessageDefinition.fromJson(json);

     List<MessageDefinition> list = Arrays.asList(new MessageDefinition[] {messagedefinition});

      when(messagedefinitionService.selectAll()).thenReturn(list);

      List<MessageDefinition> result = messagedefinitionService.selectAll();

      assertEquals("Expect ", "patient-link-notification", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet288FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-search-param-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "search-param-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet289FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-icd-10.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "icd-10", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem210FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-definition-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "definition-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition19FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-questionnaire-populate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Questionnaire-populate", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem211FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-contactentity-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "contactentity-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet290FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-message-transport.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "message-transport", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition331FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-comments.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-comments", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation30FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-genetics-1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "example-genetics-1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem212FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-episodeofcare-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "episodeofcare-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadRiskAssessment4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/riskassessment-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     RiskAssessment riskassessment = RiskAssessment.fromJson(json);

     List<RiskAssessment> list = Arrays.asList(new RiskAssessment[] {riskassessment});

      when(riskassessmentService.selectAll()).thenReturn(list);

      List<RiskAssessment> result = riskassessmentService.selectAll();

      assertEquals("Expect ", "genetic", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest21FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0323.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0323", result.get(0).getId()); 
    }
    @Test
    public void testLoadDiagnosticReport9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-example-lipids.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DiagnosticReport diagnosticreport = DiagnosticReport.fromJson(json);

     List<DiagnosticReport> list = Arrays.asList(new DiagnosticReport[] {diagnosticreport});

      when(diagnosticreportService.selectAll()).thenReturn(list);

      List<DiagnosticReport> result = diagnosticreportService.selectAll();

      assertEquals("Expect ", "lipids", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem213FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-condition-ver-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "condition-ver-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest22FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0305.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0305", result.get(0).getId()); 
    }
    @Test
    public void testLoadConsent7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consent-example-notThis.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Consent consent = Consent.fromJson(json);

     List<Consent> list = Arrays.asList(new Consent[] {consent});

      when(consentService.selectAll()).thenReturn(list);

      List<Consent> result = consentService.selectAll();

      assertEquals("Expect ", "consent-example-notThis", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense21FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0324.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0324", result.get(0).getId()); 
    }
    @Test
    public void testLoadDeviceRequest1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/devicerequest-example-insulinpump.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DeviceRequest devicerequest = DeviceRequest.fromJson(json);

     List<DeviceRequest> list = Arrays.asList(new DeviceRequest[] {devicerequest});

      when(devicerequestService.selectAll()).thenReturn(list);

      List<DeviceRequest> result = devicerequestService.selectAll();

      assertEquals("Expect ", "insulinpump", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-example-pgx-2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "example-pgx-2", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition332FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-explicit-type-name.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-explicit-type-name", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation31FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-f002-excess.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "f002", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet291FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-immunization-recommendation-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "immunization-recommendation-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0317.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0317", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition333FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/schedule.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Schedule", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition334FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticsdnavariantid.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsDNAVariantId", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem214FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-adverse-event-causality-result.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "adverse-event-causality-result", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet292FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-audit-event-action.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "audit-event-action", result.get(0).getId()); 
    }
    @Test
    public void testLoadSlot2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/slot-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Slot slot = Slot.fromJson(json);

     List<Slot> list = Arrays.asList(new Slot[] {slot});

      when(slotService.selectAll()).thenReturn(list);

      List<Slot> result = slotService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadMessageDefinition2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/messagedefinition-patient-link-response.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MessageDefinition messagedefinition = MessageDefinition.fromJson(json);

     List<MessageDefinition> list = Arrays.asList(new MessageDefinition[] {messagedefinition});

      when(messagedefinitionService.selectAll()).thenReturn(list);

      List<MessageDefinition> result = messagedefinitionService.selectAll();

      assertEquals("Expect ", "patient-link-response", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire89FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/shareablecodesystem-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadClinicalImpression1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/clinicalimpression-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ClinicalImpression clinicalimpression = ClinicalImpression.fromJson(json);

     List<ClinicalImpression> list = Arrays.asList(new ClinicalImpression[] {clinicalimpression});

      when(clinicalimpressionService.selectAll()).thenReturn(list);

      List<ClinicalImpression> result = clinicalimpressionService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadEndpoint3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/endpoint-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Endpoint endpoint = Endpoint.fromJson(json);

     List<Endpoint> list = Arrays.asList(new Endpoint[] {endpoint});

      when(endpointService.selectAll()).thenReturn(list);

      List<Endpoint> result = endpointService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest23FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0316.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0316", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet293FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-policyholder-relationship.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "policyholder-relationship", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet294FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-reaction-event-certainty.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "reaction-event-certainty", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet295FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-namingsystem-identifier-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "namingsystem-identifier-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem215FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-metric-calibration-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "metric-calibration-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet296FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-consent-content-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "consent-content-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet297FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-request-priority.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "request-priority", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet298FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-statement-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-statement-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition335FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/devicecomponent.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "DeviceComponent", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet299FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-data-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "data-types", result.get(0).getId()); 
    }
    @Test
    public void testLoadSlot3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/slot-example-busy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Slot slot = Slot.fromJson(json);

     List<Slot> list = Arrays.asList(new Slot[] {slot});

      when(slotService.selectAll()).thenReturn(list);

      List<Slot> result = slotService.selectAll();

      assertEquals("Expect ", "1", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation32FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-f004-erythrocyte.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "f004", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet300FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-assert-direction-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "assert-direction-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet301FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-observation-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "observation-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition336FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-auditevent-sopclass.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "auditevent-SOPClass", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition337FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-summaryof.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "diagnosticReport-summaryOf", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense22FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0316.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0316", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition338FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/device.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Device", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition339FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "MedicationRequest", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet302FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-signature-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "signature-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadPlanDefinition7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/plandefinition-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     PlanDefinition plandefinition = PlanDefinition.fromJson(json);

     List<PlanDefinition> list = Arrays.asList(new PlanDefinition[] {plandefinition});

      when(plandefinitionService.selectAll()).thenReturn(list);

      List<PlanDefinition> result = plandefinitionService.selectAll();

      assertEquals("Expect ", "low-suicide-risk-order-set", result.get(0).getId()); 
    }
    @Test
    public void testLoadMeasure4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/measure-component-b-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Measure measure = Measure.fromJson(json);

     List<Measure> list = Arrays.asList(new Measure[] {measure});

      when(measureService.selectAll()).thenReturn(list);

      List<Measure> result = measureService.selectAll();

      assertEquals("Expect ", "component-b-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet303FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-location-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "location-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition340FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claimresponse.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ClaimResponse", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest24FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0314.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0314", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition341FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-patient-mothersmaidenname.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "patient-mothersMaidenName", result.get(0).getId()); 
    }
    @Test
    public void testLoadCondition8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/condition-example-f202-malignancy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Condition condition = Condition.fromJson(json);

     List<Condition> list = Arrays.asList(new Condition[] {condition});

      when(conditionService.selectAll()).thenReturn(list);

      List<Condition> result = conditionService.selectAll();

      assertEquals("Expect ", "f202", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition342FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/location.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Location", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire90FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem216FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-unknown-content-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "unknown-content-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet304FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-metric-operational-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "metric-operational-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem217FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-allerg-intol-substance-exp-risk.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "allerg-intol-substance-exp-risk", result.get(0).getId()); 
    }
    @Test
    public void testLoadCondition9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/condition-example-f201-fever.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Condition condition = Condition.fromJson(json);

     List<Condition> list = Arrays.asList(new Condition[] {condition});

      when(conditionService.selectAll()).thenReturn(list);

      List<Condition> result = conditionService.selectAll();

      assertEquals("Expect ", "f201", result.get(0).getId()); 
    }
    @Test
    public void testLoadCompartmentDefinition3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/compartmentdefinition-encounter.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CompartmentDefinition compartmentdefinition = CompartmentDefinition.fromJson(json);

     List<CompartmentDefinition> list = Arrays.asList(new CompartmentDefinition[] {compartmentdefinition});

      when(compartmentdefinitionService.selectAll()).thenReturn(list);

      List<CompartmentDefinition> result = compartmentdefinitionService.selectAll();

      assertEquals("Expect ", "encounter", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem218FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-goal-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "goal-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition343FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/measurereport.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "MeasureReport", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition344FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/period.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Period", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet305FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-claim-exception.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "claim-exception", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example-f201-tpf.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "f201", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition345FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bmi.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "bmi", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationOutcome6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operationoutcome-example-exception.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationOutcome operationoutcome = OperationOutcome.fromJson(json);

     List<OperationOutcome> list = Arrays.asList(new OperationOutcome[] {operationoutcome});

      when(operationoutcomeService.selectAll()).thenReturn(list);

      List<OperationOutcome> result = operationoutcomeService.selectAll();

      assertEquals("Expect ", "exception", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet306FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-report-result-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "report-result-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet307FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-immunization-recommendation-target-disease.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "immunization-recommendation-target-disease", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle21FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/message-request-link.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "10bb101f-a121-4264-a920-67be9cb82c74", result.get(0).getId()); 
    }
    @Test
    public void testLoadNutritionOrder10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder-example-pureeddiet-simple.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NutritionOrder nutritionorder = NutritionOrder.fromJson(json);

     List<NutritionOrder> list = Arrays.asList(new NutritionOrder[] {nutritionorder});

      when(nutritionorderService.selectAll()).thenReturn(list);

      List<NutritionOrder> result = nutritionorderService.selectAll();

      assertEquals("Expect ", "pureeddiet-simple", result.get(0).getId()); 
    }
    @Test
    public void testLoadCarePlan9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careplan-example-obesity-narrative.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CarePlan careplan = CarePlan.fromJson(json);

     List<CarePlan> list = Arrays.asList(new CarePlan[] {careplan});

      when(careplanService.selectAll()).thenReturn(list);

      List<CarePlan> result = careplanService.selectAll();

      assertEquals("Expect ", "obesity-narrative", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition346FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/guidanceresponse.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "GuidanceResponse", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition347FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/range.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Range", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire91FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/account-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCommunication3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/communication-example-fm-solicited-attachment.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Communication communication = Communication.fromJson(json);

     List<Communication> list = Arrays.asList(new Communication[] {communication});

      when(communicationService.selectAll()).thenReturn(list);

      List<Communication> result = communicationService.selectAll();

      assertEquals("Expect ", "fm-solicited", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem219FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-vision-product.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "vision-product", result.get(0).getId()); 
    }
    @Test
    public void testLoadImagingManifest1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/imagingmanifest-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ImagingManifest imagingmanifest = ImagingManifest.fromJson(json);

     List<ImagingManifest> list = Arrays.asList(new ImagingManifest[] {imagingmanifest});

      when(imagingmanifestService.selectAll()).thenReturn(list);

      List<ImagingManifest> result = imagingmanifestService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem220FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-medication-admin-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "medication-admin-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition20FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-patient-everything.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Patient-everything", result.get(0).getId()); 
    }
    @Test
    public void testLoadDataElement2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/dataelement-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DataElement dataelement = DataElement.fromJson(json);

     List<DataElement> list = Arrays.asList(new DataElement[] {dataelement});

      when(dataelementService.selectAll()).thenReturn(list);

      List<DataElement> result = dataelementService.selectAll();

      assertEquals("Expect ", "gender", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition21FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-messageheader-process-message.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "MessageHeader-process-message", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem221FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-medication-request-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "medication-request-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire92FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/researchsubject-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem222FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-audit-event-outcome.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "audit-event-outcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem223FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-restful-capability-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "restful-capability-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition348FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-en-representation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-EN-representation", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet308FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-intervention.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "intervention", result.get(0).getId()); 
    }
    @Test
    public void testLoadImplementationGuide1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/implementationguide-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ImplementationGuide implementationguide = ImplementationGuide.fromJson(json);

     List<ImplementationGuide> list = Arrays.asList(new ImplementationGuide[] {implementationguide});

      when(implementationguideService.selectAll()).thenReturn(list);

      List<ImplementationGuide> result = implementationguideService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem224FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-publication-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "publication-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadLibrary6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/library-exclusive-breastfeeding-cqm-logic.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Library library = Library.fromJson(json);

     List<Library> list = Arrays.asList(new Library[] {library});

      when(libraryService.selectAll()).thenReturn(list);

      List<Library> result = libraryService.selectAll();

      assertEquals("Expect ", "library-exclusive-breastfeeding-cqm-logic", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem225FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-history-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "history-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition349FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-unclosed.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-unclosed", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem226FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-composition-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "composition-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadDevice6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/device-example-udi1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Device device = Device.fromJson(json);

     List<Device> list = Arrays.asList(new Device[] {device});

      when(deviceService.selectAll()).thenReturn(list);

      List<Device> result = deviceService.selectAll();

      assertEquals("Expect ", "example-udi1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet309FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-usps-state.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "usps-state", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem227FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-action-grouping-behavior.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "action-grouping-behavior", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle22FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/dataelements.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "dataelements", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire93FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadMeasureReport1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/measurereport-cms146-cat1-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MeasureReport measurereport = MeasureReport.fromJson(json);

     List<MeasureReport> list = Arrays.asList(new MeasureReport[] {measurereport});

      when(measurereportService.selectAll()).thenReturn(list);

      List<MeasureReport> result = measurereportService.selectAll();

      assertEquals("Expect ", "measurereport-cms146-cat1-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet310FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-claim-careteamrole.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "claim-careteamrole", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition350FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-11179-objectclass.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "11179-objectClass", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense23FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0329.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0329", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet311FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-reaction-event-severity.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "reaction-event-severity", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation33FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-heart-rate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "heart-rate", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle23FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitionerrole-examples-general.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "3ad0687e-f477-468c-afd5-fcc2bf897808", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition351FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/coding.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Coding", result.get(0).getId()); 
    }
    @Test
    public void testLoadMeasure5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/measure-cms146-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Measure measure = Measure.fromJson(json);

     List<Measure> list = Arrays.asList(new Measure[] {measure});

      when(measureService.selectAll()).thenReturn(list);

      List<Measure> result = measureService.selectAll();

      assertEquals("Expect ", "measure-cms146-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem228FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-relationship.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "relationship", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet312FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-device-safety.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "device-safety", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet313FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-goal-start-event.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "goal-start-event", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition352FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/ldlcholesterol.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ldlcholesterol", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem229FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-chargeitem-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "chargeitem-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem230FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-report-action-result-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "report-action-result-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadCompartmentDefinition4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/compartmentdefinition-practitioner.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CompartmentDefinition compartmentdefinition = CompartmentDefinition.fromJson(json);

     List<CompartmentDefinition> list = Arrays.asList(new CompartmentDefinition[] {compartmentdefinition});

      when(compartmentdefinitionService.selectAll()).thenReturn(list);

      List<CompartmentDefinition> result = compartmentdefinitionService.selectAll();

      assertEquals("Expect ", "practitioner", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet314FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-profile-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "profile-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem231FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-episode-of-care-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "episode-of-care-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition353FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-direction.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-direction", result.get(0).getId()); 
    }
    @Test
    public void testLoadConsent8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consent-example-notTime.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Consent consent = Consent.fromJson(json);

     List<Consent> list = Arrays.asList(new Consent[] {consent});

      when(consentService.selectAll()).thenReturn(list);

      List<Consent> result = consentService.selectAll();

      assertEquals("Expect ", "consent-example-notTime", result.get(0).getId()); 
    }
    @Test
    public void testLoadEnrollmentRequest1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/enrollmentrequest-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     EnrollmentRequest enrollmentrequest = EnrollmentRequest.fromJson(json);

     List<EnrollmentRequest> list = Arrays.asList(new EnrollmentRequest[] {enrollmentrequest});

      when(enrollmentrequestService.selectAll()).thenReturn(list);

      List<EnrollmentRequest> result = enrollmentrequestService.selectAll();

      assertEquals("Expect ", "22345", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet315FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-questionnaire-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "questionnaire-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem232FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-resource-validation-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "resource-validation-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadDiagnosticReport10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-example-pgx.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DiagnosticReport diagnosticreport = DiagnosticReport.fromJson(json);

     List<DiagnosticReport> list = Arrays.asList(new DiagnosticReport[] {diagnosticreport});

      when(diagnosticreportService.selectAll()).thenReturn(list);

      List<DiagnosticReport> result = diagnosticreportService.selectAll();

      assertEquals("Expect ", "example-pgx", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition354FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-delimiter.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-delimiter", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem233FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-care-plan-intent.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "care-plan-intent", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition355FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-patient-citizenship.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "patient-citizenship", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire94FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/servicedefinition-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition356FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-elementdefinition-equivalence.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "elementdefinition-equivalence", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition22FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-library-data-requirements.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Library-data-requirements", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet316FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-common-tags.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "common-tags", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet317FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-conditional-delete-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "conditional-delete-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadSupplyRequest1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/supplyrequest-example-simpleorder.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     SupplyRequest supplyrequest = SupplyRequest.fromJson(json);

     List<SupplyRequest> list = Arrays.asList(new SupplyRequest[] {supplyrequest});

      when(supplyrequestService.selectAll()).thenReturn(list);

      List<SupplyRequest> result = supplyrequestService.selectAll();

      assertEquals("Expect ", "simpleorder", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/conceptmap-103.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "103", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation34FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-diplotype1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "example-diplotype1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem234FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-example-summary.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "summary", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition357FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/uuid.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "uuid", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet318FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-definition-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "definition-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem235FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-animal-genderstatus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "animal-genderstatus", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition358FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticsgenomicsourceclass.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsGenomicSourceClass", result.get(0).getId()); 
    }
    @Test
    public void testLoadDocumentReference1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/documentreference-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DocumentReference documentreference = DocumentReference.fromJson(json);

     List<DocumentReference> list = Arrays.asList(new DocumentReference[] {documentreference});

      when(documentreferenceService.selectAll()).thenReturn(list);

      List<DocumentReference> result = documentreferenceService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet319FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-adverse-event-causality-assess.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "adverse-event-causality-assess", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationAdministration8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration0311.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationAdministration medicationadministration = MedicationAdministration.fromJson(json);

     List<MedicationAdministration> list = Arrays.asList(new MedicationAdministration[] {medicationadministration});

      when(medicationadministrationService.selectAll()).thenReturn(list);

      List<MedicationAdministration> result = medicationadministrationService.selectAll();

      assertEquals("Expect ", "medadmin0311", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet320FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-copy-number-event.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "copy-number-event", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition23FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-questionnaire-populatehtml.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Questionnaire-populatehtml", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem236FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-observation-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "observation-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition359FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-studyprotocolidentifier.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-studyprotocolIdentifier", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet321FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-goal-priority.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "goal-priority", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet322FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-classification-or-context.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "classification-or-context", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-contact-point-use-v2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-contact-point-use-v2", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest25FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0312.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0312", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition360FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-capabilitystatement-prohibited.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "capabilitystatement-prohibited", result.get(0).getId()); 
    }
    @Test
    public void testLoadGroup2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/group-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Group group = Group.fromJson(json);

     List<Group> list = Arrays.asList(new Group[] {group});

      when(groupService.selectAll()).thenReturn(list);

      List<Group> result = groupService.selectAll();

      assertEquals("Expect ", "101", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem237FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-contract-action.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "contract-action", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet323FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-days-of-week.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "days-of-week", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation35FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-TPMT-haplotype-two.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "example-TPMT-haplotype-two", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem238FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-action-required-behavior.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "action-required-behavior", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition361FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-rendering-markdown.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "rendering-markdown", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle24FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/conceptmaps.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "conceptmaps", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem239FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-task-performer-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "task-performer-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet324FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-assert-operator-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "assert-operator-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitioner11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-example-f202-lm.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Practitioner practitioner = Practitioner.fromJson(json);

     List<Practitioner> list = Arrays.asList(new Practitioner[] {practitioner});

      when(practitionerService.selectAll()).thenReturn(list);

      List<Practitioner> result = practitionerService.selectAll();

      assertEquals("Expect ", "f202", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem240FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-address-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "address-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadCapabilityStatement3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/capabilitystatement-base.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CapabilityStatement capabilitystatement = CapabilityStatement.fromJson(json);

     List<CapabilityStatement> list = Arrays.asList(new CapabilityStatement[] {capabilitystatement});

      when(capabilitystatementService.selectAll()).thenReturn(list);

      List<CapabilityStatement> result = capabilitystatementService.selectAll();

      assertEquals("Expect ", "base", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem241FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-tooth.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "tooth", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet325FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-note-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "note-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet326FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-diagnosis-role.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "diagnosis-role", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet327FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-coverage-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "coverage-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem242FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-adverse-event-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "adverse-event-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadPerson1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/person-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Person person = Person.fromJson(json);

     List<Person> list = Arrays.asList(new Person[] {person});

      when(personService.selectAll()).thenReturn(list);

      List<Person> result = personService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire95FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processresponse-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCapabilityStatement4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/capabilitystatement-knowledge-repository.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CapabilityStatement capabilitystatement = CapabilityStatement.fromJson(json);

     List<CapabilityStatement> list = Arrays.asList(new CapabilityStatement[] {capabilitystatement});

      when(capabilitystatementService.selectAll()).thenReturn(list);

      List<CapabilityStatement> result = capabilitystatementService.selectAll();

      assertEquals("Expect ", "knowledge-repository", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition362FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/id.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "id", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet328FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-care-plan-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "care-plan-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition363FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-fmm.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-fmm", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition364FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-family-member-history-genetics-parent.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "family-member-history-genetics-parent", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet329FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-service-place.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "service-place", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition365FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/plandefinition.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "PlanDefinition", result.get(0).getId()); 
    }
    @Test
    public void testLoadEligibilityResponse4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/eligibilityresponse-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     EligibilityResponse eligibilityresponse = EligibilityResponse.fromJson(json);

     List<EligibilityResponse> list = Arrays.asList(new EligibilityResponse[] {eligibilityresponse});

      when(eligibilityresponseService.selectAll()).thenReturn(list);

      List<EligibilityResponse> result = eligibilityresponseService.selectAll();

      assertEquals("Expect ", "E2500", result.get(0).getId()); 
    }
    @Test
    public void testLoadOrganization8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/organization-example-f201-aumc.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Organization organization = Organization.fromJson(json);

     List<Organization> list = Arrays.asList(new Organization[] {organization});

      when(organizationService.selectAll()).thenReturn(list);

      List<Organization> result = organizationService.selectAll();

      assertEquals("Expect ", "f201", result.get(0).getId()); 
    }
    @Test
    public void testLoadGuidanceResponse1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/guidanceresponse-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     GuidanceResponse guidanceresponse = GuidanceResponse.fromJson(json);

     List<GuidanceResponse> list = Arrays.asList(new GuidanceResponse[] {guidanceresponse});

      when(guidanceresponseService.selectAll()).thenReturn(list);

      List<GuidanceResponse> result = guidanceresponseService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadPerson2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/person-grahame.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Person person = Person.fromJson(json);

     List<Person> list = Arrays.asList(new Person[] {person});

      when(personService.selectAll()).thenReturn(list);

      List<Person> result = personService.selectAll();

      assertEquals("Expect ", "grahame", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem243FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-care-plan-activity-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "care-plan-activity-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadOrganization9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/organization-example-good-health-care.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Organization organization = Organization.fromJson(json);

     List<Organization> list = Arrays.asList(new Organization[] {organization});

      when(organizationService.selectAll()).thenReturn(list);

      List<Organization> result = organizationService.selectAll();

      assertEquals("Expect ", "2.16.840.1.113883.19.5", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet330FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-participantrequired.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "participantrequired", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem244FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-contract-term-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "contract-term-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet331FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-service-provision-conditions.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "service-provision-conditions", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-graphic-example-3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "graphic-example-3", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem245FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-icd-10-procedures.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "icd-10-procedures", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet332FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-map-transform.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "map-transform", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet333FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-observation-statistics.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "observation-statistics", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-address-type-v3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-address-type-v3", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense24FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0308.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0308", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet334FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-transaction-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "transaction-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadConsent9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consent-example-grantor.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Consent consent = Consent.fromJson(json);

     List<Consent> list = Arrays.asList(new Consent[] {consent});

      when(consentService.selectAll()).thenReturn(list);

      List<Consent> result = consentService.selectAll();

      assertEquals("Expect ", "consent-example-grantor", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet335FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-nutrition-request-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "nutrition-request-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire96FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/detectedissue-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet336FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-referencerange-meaning.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "referencerange-meaning", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition366FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-goal-pertainstogoal.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "goal-pertainsToGoal", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet337FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-procedure-progress-status-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "procedure-progress-status-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet338FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-activity-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "activity-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem246FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-request-intent.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "request-intent", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire97FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/shareablevalueset-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet339FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-match-grade.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "match-grade", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem247FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-concept-property-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "concept-property-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-pharmacy-medication.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "760151", result.get(0).getId()); 
    }
    @Test
    public void testLoadSpecimen3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/specimen-example-urine.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Specimen specimen = Specimen.fromJson(json);

     List<Specimen> list = Arrays.asList(new Specimen[] {specimen});

      when(specimenService.selectAll()).thenReturn(list);

      List<Specimen> result = specimenService.selectAll();

      assertEquals("Expect ", "vma-urine", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire98FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaire-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition367FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bodylength.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "bodylength", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-complex-variant.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "sequence-complex-variant", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet340FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-ucum-bodylength.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "ucum-bodylength", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation36FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-bmi.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "bmi", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet341FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-condition-cause.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "condition-cause", result.get(0).getId()); 
    }
    @Test
    public void testLoadCapabilityStatement5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/capabilitystatement-measure-processor.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CapabilityStatement capabilitystatement = CapabilityStatement.fromJson(json);

     List<CapabilityStatement> list = Arrays.asList(new CapabilityStatement[] {capabilitystatement});

      when(capabilitystatementService.selectAll()).thenReturn(list);

      List<CapabilityStatement> result = capabilitystatementService.selectAll();

      assertEquals("Expect ", "measure-processor", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition368FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-resource-effectiveperiod.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "resource-effectivePeriod", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition24FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-valueset-validate-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "ValueSet-validate-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem248FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-map-context-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "map-context-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem249FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-issue-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "issue-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadMeasureReport2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/measurereport-cms146-cat2-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MeasureReport measurereport = MeasureReport.fromJson(json);

     List<MeasureReport> list = Arrays.asList(new MeasureReport[] {measurereport});

      when(measurereportService.selectAll()).thenReturn(list);

      List<MeasureReport> result = measurereportService.selectAll();

      assertEquals("Expect ", "measurereport-cms146-cat2-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-example-animal.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "animal", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet342FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-constraint-severity.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "constraint-severity", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition369FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-mapsourcepublisher.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "mapSourcePublisher", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet343FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-endpoint-connection-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "endpoint-connection-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet344FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-device-kind.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "device-kind", result.get(0).getId()); 
    }
    @Test
    public void testLoadLibrary7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/library-mmi-suiciderisk-orderset-logic.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Library library = Library.fromJson(json);

     List<Library> list = Arrays.asList(new Library[] {library});

      when(libraryService.selectAll()).thenReturn(list);

      List<Library> result = libraryService.selectAll();

      assertEquals("Expect ", "suiciderisk-orderset-logic", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcessRequest4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processrequest-example-poll-payrec.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcessRequest processrequest = ProcessRequest.fromJson(json);

     List<ProcessRequest> list = Arrays.asList(new ProcessRequest[] {processrequest});

      when(processrequestService.selectAll()).thenReturn(list);

      List<ProcessRequest> result = processrequestService.selectAll();

      assertEquals("Expect ", "1114", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-example-f001-pieter.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "f001", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet345FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-observation-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "observation-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet346FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-episode-of-care-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "episode-of-care-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem250FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-action-cardinality-behavior.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "action-cardinality-behavior", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition370FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "NutritionOrder", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition371FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/backboneelement.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "BackboneElement", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire99FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/researchstudy-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcessRequest5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processrequest-example-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcessRequest processrequest = ProcessRequest.fromJson(json);

     List<ProcessRequest> list = Arrays.asList(new ProcessRequest[] {processrequest});

      when(processrequestService.selectAll()).thenReturn(list);

      List<ProcessRequest> result = processrequestService.selectAll();

      assertEquals("Expect ", "87655", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition372FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/reference.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Reference", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet347FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-operational-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "operational-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet348FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-questionnaire-usage-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "questionnaire-usage-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem251FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-linkage-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "linkage-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem252FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-allergy-clinical-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "allergy-clinical-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition373FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-history.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-history", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem253FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-related-artifact-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "related-artifact-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem254FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-specification-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "specification-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation37FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-20minute-apgar-score.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "20minute-apgar-score", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet349FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-restful-security-service.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "restful-security-service", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationStatement5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationstatementexample5.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationStatement medicationstatement = MedicationStatement.fromJson(json);

     List<MedicationStatement> list = Arrays.asList(new MedicationStatement[] {medicationstatement});

      when(medicationstatementService.selectAll()).thenReturn(list);

      List<MedicationStatement> result = medicationstatementService.selectAll();

      assertEquals("Expect ", "example005", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem255FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-name-assembly-order.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "name-assembly-order", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition25FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operationdefinition-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadEncounter6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/encounter-example-f202-20130128.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Encounter encounter = Encounter.fromJson(json);

     List<Encounter> list = Arrays.asList(new Encounter[] {encounter});

      when(encounterService.selectAll()).thenReturn(list);

      List<Encounter> result = encounterService.selectAll();

      assertEquals("Expect ", "f202", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet350FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-explanationofbenefit-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "explanationofbenefit-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition374FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-systemname.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-systemName", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet351FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-ucum-bodytemp.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "ucum-bodytemp", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem256FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-benefit-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "benefit-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem257FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-contract-actorrole.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "contract-actorrole", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet352FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-condition-state.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "condition-state", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem258FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-contract-subtype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "contract-subtype", result.get(0).getId()); 
    }
    @Test
    public void testLoadPlanDefinition8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/plandefinition-exclusive-breastfeeding-intervention-04.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     PlanDefinition plandefinition = PlanDefinition.fromJson(json);

     List<PlanDefinition> list = Arrays.asList(new PlanDefinition[] {plandefinition});

      when(plandefinitionService.selectAll()).thenReturn(list);

      List<PlanDefinition> result = plandefinitionService.selectAll();

      assertEquals("Expect ", "exclusive-breastfeeding-intervention-04", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition375FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-nullflavor.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-nullFlavor", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire100FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/familymemberhistory-genetic-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadPaymentReconciliation1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/paymentreconciliation-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     PaymentReconciliation paymentreconciliation = PaymentReconciliation.fromJson(json);

     List<PaymentReconciliation> list = Arrays.asList(new PaymentReconciliation[] {paymentreconciliation});

      when(paymentreconciliationService.selectAll()).thenReturn(list);

      List<PaymentReconciliation> result = paymentreconciliationService.selectAll();

      assertEquals("Expect ", "ER2500", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition376FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-hla-genotyping-results-method.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "hla-genotyping-results-method", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire101FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaire-example-f201-lifelines.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "f201", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense25FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispenseexample8.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp008", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle25FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaire-profile-example-ussg-fht.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "ussg-fht", result.get(0).getId()); 
    }
    @Test
    public void testLoadSubscription2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/subscription-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Subscription subscription = Subscription.fromJson(json);

     List<Subscription> list = Arrays.asList(new Subscription[] {subscription});

      when(subscriptionService.selectAll()).thenReturn(list);

      List<Subscription> result = subscriptionService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet353FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-contactentity-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "contactentity-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadDevice7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/device-example-software.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Device device = Device.fromJson(json);

     List<Device> list = Arrays.asList(new Device[] {device});

      when(deviceService.selectAll()).thenReturn(list);

      List<Device> result = deviceService.selectAll();

      assertEquals("Expect ", "software", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem259FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-contract-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "contract-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0310.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0310", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem260FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-payeetype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "payeetype", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition377FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-patient-importance.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "patient-importance", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire102FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition378FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/requestgroup.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "RequestGroup", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet354FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-example-intensional.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "example-intensional", result.get(0).getId()); 
    }
    @Test
    public void testLoadRequestGroup2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/requestgroup-kdn5-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     RequestGroup requestgroup = RequestGroup.fromJson(json);

     List<RequestGroup> list = Arrays.asList(new RequestGroup[] {requestgroup});

      when(requestgroupService.selectAll()).thenReturn(list);

      List<RequestGroup> result = requestgroupService.selectAll();

      assertEquals("Expect ", "kdn5-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcessRequest6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processrequest-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcessRequest processrequest = ProcessRequest.fromJson(json);

     List<ProcessRequest> list = Arrays.asList(new ProcessRequest[] {processrequest});

      when(processrequestService.selectAll()).thenReturn(list);

      List<ProcessRequest> result = processrequestService.selectAll();

      assertEquals("Expect ", "1110", result.get(0).getId()); 
    }
    @Test
    public void testLoadExpansionProfile1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/expansionprofile-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ExpansionProfile expansionprofile = ExpansionProfile.fromJson(json);

     List<ExpansionProfile> list = Arrays.asList(new ExpansionProfile[] {expansionprofile});

      when(expansionprofileService.selectAll()).thenReturn(list);

      List<ExpansionProfile> result = expansionprofileService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadProvenance4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/provenance-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Provenance provenance = Provenance.fromJson(json);

     List<Provenance> list = Arrays.asList(new Provenance[] {provenance});

      when(provenanceService.selectAll()).thenReturn(list);

      List<Provenance> result = provenanceService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadPlanDefinition9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/plandefinition-example-kdn5-simplified.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     PlanDefinition plandefinition = PlanDefinition.fromJson(json);

     List<PlanDefinition> list = Arrays.asList(new PlanDefinition[] {plandefinition});

      when(plandefinitionService.selectAll()).thenReturn(list);

      List<PlanDefinition> result = plandefinitionService.selectAll();

      assertEquals("Expect ", "KDN5", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcessResponse2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processresponse-example-error.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcessResponse processresponse = ProcessResponse.fromJson(json);

     List<ProcessResponse> list = Arrays.asList(new ProcessResponse[] {processresponse});

      when(processresponseService.selectAll()).thenReturn(list);

      List<ProcessResponse> result = processresponseService.selectAll();

      assertEquals("Expect ", "SR2349", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet355FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-procedure-not-performed-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "procedure-not-performed-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem261FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-communication-not-done-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "communication-not-done-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem262FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-conceptmap-unmapped-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "conceptmap-unmapped-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcessResponse3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processresponse-example-pended.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcessResponse processresponse = ProcessResponse.fromJson(json);

     List<ProcessResponse> list = Arrays.asList(new ProcessResponse[] {processresponse});

      when(processresponseService.selectAll()).thenReturn(list);

      List<ProcessResponse> result = processresponseService.selectAll();

      assertEquals("Expect ", "SR2499", result.get(0).getId()); 
    }
    @Test
    public void testLoadCompartmentDefinition5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/compartmentdefinition-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CompartmentDefinition compartmentdefinition = CompartmentDefinition.fromJson(json);

     List<CompartmentDefinition> list = Arrays.asList(new CompartmentDefinition[] {compartmentdefinition});

      when(compartmentdefinitionService.selectAll()).thenReturn(list);

      List<CompartmentDefinition> result = compartmentdefinitionService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition379FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-operationoutcome-authority.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "operationoutcome-authority", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition380FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-author.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-author", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition381FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-11179-permitted-value-conceptmap.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "11179-permitted-value-conceptmap", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition382FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/xhtml.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "xhtml", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet356FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-group-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "group-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition383FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticsallelicstate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsAllelicState", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet357FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-ex-payee-resource-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "ex-payee-resource-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition384FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-minlength.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "minLength", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet358FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-dispense-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-dispense-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet359FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-contract-signer-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "contract-signer-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet360FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-basic-resource-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "basic-resource-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem263FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-coverage-level.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "coverage-level", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition385FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedurerequest-precondition.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedurerequest-precondition", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense26FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0331.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0331", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition386FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-ordinalvalue.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-ordinalValue", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet361FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-related-artifact-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "related-artifact-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example-physical-therapy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "physical-therapy", result.get(0).getId()); 
    }
    @Test
    public void testLoadPlanDefinition10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/plandefinition-zika-virus-intervention.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     PlanDefinition plandefinition = PlanDefinition.fromJson(json);

     List<PlanDefinition> list = Arrays.asList(new PlanDefinition[] {plandefinition});

      when(plandefinitionService.selectAll()).thenReturn(list);

      List<PlanDefinition> result = plandefinitionService.selectAll();

      assertEquals("Expect ", "zika-virus-intervention", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem264FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-oral-prosthodontic-material.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "oral-prosthodontic-material", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire103FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/vitalspanel-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet362FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-event-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "event-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem265FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-extra-security-role-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "extra-security-role-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem266FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-restful-security-service.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "restful-security-service", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition387FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/boolean.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "boolean", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem267FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-property-representation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "property-representation", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem268FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-consent-state-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "consent-state-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem269FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-contract-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "contract-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet363FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-issue-severity.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "issue-severity", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition388FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-11179-de-submitter-org.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "11179-de-submitter-org", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet364FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-supplydelivery-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "supplydelivery-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet365FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-no-immunization-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "no-immunization-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet366FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-type-derivation-rule.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "type-derivation-rule", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaimResponse1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claimresponse-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ClaimResponse claimresponse = ClaimResponse.fromJson(json);

     List<ClaimResponse> list = Arrays.asList(new ClaimResponse[] {claimresponse});

      when(claimresponseService.selectAll()).thenReturn(list);

      List<ClaimResponse> result = claimresponseService.selectAll();

      assertEquals("Expect ", "R3500", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition389FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/vitalsigns.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "vitalsigns", result.get(0).getId()); 
    }
    @Test
    public void testLoadPerson3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/person-patient-portal.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Person person = Person.fromJson(json);

     List<Person> list = Arrays.asList(new Person[] {person});

      when(personService.selectAll()).thenReturn(list);

      List<Person> result = personService.selectAll();

      assertEquals("Expect ", "pp", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition390FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/enrollmentrequest.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "EnrollmentRequest", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition391FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-author.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-author", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet367FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-slotstatus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "slotstatus", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense27FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0320.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0320", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem270FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-udi.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "udi", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet368FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-ex-paymenttype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "ex-paymenttype", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem271FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-reference-handling-policy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "reference-handling-policy", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet369FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-encounter-admit-source.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "encounter-admit-source", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationStatement6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationstatementexample2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationStatement medicationstatement = MedicationStatement.fromJson(json);

     List<MedicationStatement> list = Arrays.asList(new MedicationStatement[] {medicationstatement});

      when(medicationstatementService.selectAll()).thenReturn(list);

      List<MedicationStatement> result = medicationstatementService.selectAll();

      assertEquals("Expect ", "example002", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/coord-1base-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "coord-1-base", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem272FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-care-team-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "care-team-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle26FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-hla-genetics-results-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "hla-1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition392FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-humanname-mothers-family.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "humanname-mothers-family", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest26FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0328.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0328", result.get(0).getId()); 
    }
    @Test
    public void testLoadDevice8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/device-example-udi2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Device device = Device.fromJson(json);

     List<Device> list = Arrays.asList(new Device[] {device});

      when(deviceService.selectAll()).thenReturn(list);

      List<Device> result = deviceService.selectAll();

      assertEquals("Expect ", "example-udi2", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem273FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-digital-media-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "digital-media-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem274FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-system-version-processing-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "system-version-processing-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet370FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-administrative-gender.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "administrative-gender", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition393FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-communicationrequest-definition.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "communicationrequest-definition", result.get(0).getId()); 
    }
    @Test
    public void testLoadOrganization10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/organization-example-gastro.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Organization organization = Organization.fromJson(json);

     List<Organization> list = Arrays.asList(new Organization[] {organization});

      when(organizationService.selectAll()).thenReturn(list);

      List<Organization> result = organizationService.selectAll();

      assertEquals("Expect ", "1", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle27FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bundle-response-simplesummary.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "bundle-response-simplesummary", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation38FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-eye-color.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "eye-color", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition394FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-deliverymodeidentifier.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-deliveryModeIdentifier", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest27FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0310.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0310", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet371FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-service-uscls.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "service-uscls", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem275FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-device-statement-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "device-statement-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadImmunization1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/immunization-example-historical.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Immunization immunization = Immunization.fromJson(json);

     List<Immunization> list = Arrays.asList(new Immunization[] {immunization});

      when(immunizationService.selectAll()).thenReturn(list);

      List<Immunization> result = immunizationService.selectAll();

      assertEquals("Expect ", "historical", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationStatement7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationstatementexample7.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationStatement medicationstatement = MedicationStatement.fromJson(json);

     List<MedicationStatement> list = Arrays.asList(new MedicationStatement[] {medicationstatement});

      when(medicationstatementService.selectAll()).thenReturn(list);

      List<MedicationStatement> result = medicationstatementService.selectAll();

      assertEquals("Expect ", "example007", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem276FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-consent-action.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "consent-action", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation39FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-f202-temperature.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "f202", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition395FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-mindoseperperiod.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "pharmacy-core-minDosePerPeriod", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem277FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-medication-request-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "medication-request-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem278FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-list-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "list-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet372FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-kos-title.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "kos-title", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem279FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-care-plan-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "care-plan-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire104FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/media-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem280FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-map-target-list-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "map-target-list-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadPerson4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/person-provider-directory.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Person person = Person.fromJson(json);

     List<Person> list = Arrays.asList(new Person[] {person});

      when(personService.selectAll()).thenReturn(list);

      List<Person> result = personService.selectAll();

      assertEquals("Expect ", "pd", result.get(0).getId()); 
    }
    @Test
    public void testLoadCommunicationRequest2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/communicationrequest-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CommunicationRequest communicationrequest = CommunicationRequest.fromJson(json);

     List<CommunicationRequest> list = Arrays.asList(new CommunicationRequest[] {communicationrequest});

      when(communicationrequestService.selectAll()).thenReturn(list);

      List<CommunicationRequest> result = communicationrequestService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem281FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-identifier-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "identifier-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet373FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-adjudication-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "adjudication-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadPerson5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/person-example-f002-ariadne.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Person person = Person.fromJson(json);

     List<Person> list = Arrays.asList(new Person[] {person});

      when(personService.selectAll()).thenReturn(list);

      List<Person> result = personService.selectAll();

      assertEquals("Expect ", "f002", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet374FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-document-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "document-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-pharmacy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "760150", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet375FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-performer-role.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "performer-role", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-genetics-example-1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "og-example1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet376FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition396FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-workflowstatus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-workflowStatus", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition397FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/library.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Library", result.get(0).getId()); 
    }
    @Test
    public void testLoadProvenance5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/provenance-example-sig.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Provenance provenance = Provenance.fromJson(json);

     List<Provenance> list = Arrays.asList(new Provenance[] {provenance});

      when(provenanceService.selectAll()).thenReturn(list);

      List<Provenance> result = provenanceService.selectAll();

      assertEquals("Expect ", "signature", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition398FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-usage.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-usage", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem282FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-ex-onsettype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "ex-onsettype", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet377FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-modified-foodtype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "modified-foodtype", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation40FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-genetics-4.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "example-genetics-4", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet378FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-composition-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "composition-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition399FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-condition-dueto.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "condition-dueTo", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet379FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-consent-data-meaning.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "consent-data-meaning", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire105FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/conceptmap-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem283FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-action-precheck-behavior.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "action-precheck-behavior", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem284FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-benefit-unit.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "benefit-unit", result.get(0).getId()); 
    }
    @Test
    public void testLoadNutritionOrder11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder-example-renaldiet.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NutritionOrder nutritionorder = NutritionOrder.fromJson(json);

     List<NutritionOrder> list = Arrays.asList(new NutritionOrder[] {nutritionorder});

      when(nutritionorderService.selectAll()).thenReturn(list);

      List<NutritionOrder> result = nutritionorderService.selectAll();

      assertEquals("Expect ", "renaldiet", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet380FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-link-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "link-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadActivityDefinition8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/activitydefinition-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ActivityDefinition activitydefinition = ActivityDefinition.fromJson(json);

     List<ActivityDefinition> list = Arrays.asList(new ActivityDefinition[] {activitydefinition});

      when(activitydefinitionService.selectAll()).thenReturn(list);

      List<ActivityDefinition> result = activitydefinitionService.selectAll();

      assertEquals("Expect ", "referralPrimaryCareMentalHealth", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire106FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/documentreference-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem285FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-dataelement-stringency.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "dataelement-stringency", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem286FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-claim-modifiers.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "claim-modifiers", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem287FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-consent-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "consent-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcessRequest7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processrequest-example-poll-eob.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcessRequest processrequest = ProcessRequest.fromJson(json);

     List<ProcessRequest> list = Arrays.asList(new ProcessRequest[] {processrequest});

      when(processrequestService.selectAll()).thenReturn(list);

      List<ProcessRequest> result = processrequestService.selectAll();

      assertEquals("Expect ", "1115", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire107FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/episodeofcare-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet381FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-name-assembly-order.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "name-assembly-order", result.get(0).getId()); 
    }
    @Test
    public void testLoadDocumentManifest1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/documentmanifest-fm-attachment.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DocumentManifest documentmanifest = DocumentManifest.fromJson(json);

     List<DocumentManifest> list = Arrays.asList(new DocumentManifest[] {documentmanifest});

      when(documentmanifestService.selectAll()).thenReturn(list);

      List<DocumentManifest> result = documentmanifestService.selectAll();

      assertEquals("Expect ", "654789", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem288FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-adjudication-error.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "adjudication-error", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet382FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-template-status-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "template-status-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition400FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ValueSet", result.get(0).getId()); 
    }
    @Test
    public void testLoadLinkage1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/linkage-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Linkage linkage = Linkage.fromJson(json);

     List<Linkage> list = Arrays.asList(new Linkage[] {linkage});

      when(linkageService.selectAll()).thenReturn(list);

      List<Linkage> result = linkageService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle28FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/endpoint-examples-general-template.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "b0a5e4277-83c4-4adb-87e2-e3efe3369b6f", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem289FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-payment-adjustment-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "payment-adjustment-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition401FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-entryformat.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "entryFormat", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition402FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-map.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-map", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire108FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consent-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle29FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valuesets.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "valuesets", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet383FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-hl7-work-group.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "hl7-work-group", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition403FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-additionallocator.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-additionalLocator", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet384FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-map-group-type-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "map-group-type-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire109FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/task-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition404FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/detectedissue.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "DetectedIssue", result.get(0).getId()); 
    }
    @Test
    public void testLoadDiagnosticReport11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-example-f001-bloodexam.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DiagnosticReport diagnosticreport = DiagnosticReport.fromJson(json);

     List<DiagnosticReport> list = Arrays.asList(new DiagnosticReport[] {diagnosticreport});

      when(diagnosticreportService.selectAll()).thenReturn(list);

      List<DiagnosticReport> result = diagnosticreportService.selectAll();

      assertEquals("Expect ", "f001", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-oral-bridge.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "100156", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire110FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/graphdefinition-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet385FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-chargeitem-billingcodes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "chargeitem-billingcodes", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition405FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-goal-acceptance.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "goal-acceptance", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem290FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-namingsystem-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "namingsystem-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire111FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet386FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-contact-point-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "contact-point-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadAccount2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/account-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Account account = Account.fromJson(json);

     List<Account> list = Arrays.asList(new Account[] {account});

      when(accountService.selectAll()).thenReturn(list);

      List<Account> result = accountService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadLibrary8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/library-composition-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Library library = Library.fromJson(json);

     List<Library> list = Arrays.asList(new Library[] {library});

      when(libraryService.selectAll()).thenReturn(list);

      List<Library> result = libraryService.selectAll();

      assertEquals("Expect ", "composition-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition406FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-specimen-processingtime.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "specimen-processingTime", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet387FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-diagnostic-service-sections.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "diagnostic-service-sections", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire112FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-genetics-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0321.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0321", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition407FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/imagingmanifest.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ImagingManifest", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem291FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-discriminator-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "discriminator-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet388FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-fm-itemtype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "fm-itemtype", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition408FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-summary.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-summary", result.get(0).getId()); 
    }
    @Test
    public void testLoadMessageHeader1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/messageheader-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MessageHeader messageheader = MessageHeader.fromJson(json);

     List<MessageHeader> list = Arrays.asList(new MessageHeader[] {messageheader});

      when(messageheaderService.selectAll()).thenReturn(list);

      List<MessageHeader> result = messageheaderService.selectAll();

      assertEquals("Expect ", "1cbdfb97-5859-48a4-8301-d54eab818d68", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet389FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-media-view.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "media-view", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition409FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-maxdecimalplaces.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "maxDecimalPlaces", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition410FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-openehr-location.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "openEHR-location", result.get(0).getId()); 
    }
    @Test
    public void testLoadLibrary9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/library-exclusive-breastfeeding-cds-logic.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Library library = Library.fromJson(json);

     List<Library> list = Arrays.asList(new Library[] {library});

      when(libraryService.selectAll()).thenReturn(list);

      List<Library> result = libraryService.selectAll();

      assertEquals("Expect ", "library-exclusive-breastfeeding-cds-logic", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem292FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-implant-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "implant-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem293FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-messageheader-response-request.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "messageheader-response-request", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem294FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-codesystem-content-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "codesystem-content-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadRelatedPerson3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/relatedperson-example-f002-ariadne.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     RelatedPerson relatedperson = RelatedPerson.fromJson(json);

     List<RelatedPerson> list = Arrays.asList(new RelatedPerson[] {relatedperson});

      when(relatedpersonService.selectAll()).thenReturn(list);

      List<RelatedPerson> result = relatedpersonService.selectAll();

      assertEquals("Expect ", "f002", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet390FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-appointmentstatus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "appointmentstatus", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem295FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-udi-entry-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "udi-entry-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet391FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-provider-qualification.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "provider-qualification", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition411FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/substance.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Substance", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet392FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-encounter-participant-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "encounter-participant-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition412FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-comment.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-comment", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem296FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-practitioner-specialty.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "practitioner-specialty", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition413FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-organization-period.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "organization-period", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet393FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-practitioner-specialty.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "practitioner-specialty", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense28FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0309.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0309", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet394FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-document-relationship-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "document-relationship-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition414FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticsaminoacidchangename.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsAminoAcidChangeName", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet395FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-as-needed-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-as-needed-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet396FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-observation-valueabsentreason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "observation-valueabsentreason", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationAdministration9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration0307.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationAdministration medicationadministration = MedicationAdministration.fromJson(json);

     List<MedicationAdministration> list = Arrays.asList(new MedicationAdministration[] {medicationadministration});

      when(medicationadministrationService.selectAll()).thenReturn(list);

      List<MedicationAdministration> result = medicationadministrationService.selectAll();

      assertEquals("Expect ", "medadmin0307", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet397FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-audit-source-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "audit-source-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition415FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/structuremap.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "StructureMap", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet398FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-vision-product.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "vision-product", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem297FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-dicom-dcim.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "dicom-dcim", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire113FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/adverseevent-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet399FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-ldlcholesterol-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "ldlcholesterol-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet400FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-devicemetric-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "devicemetric-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem298FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-care-plan-activity-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "care-plan-activity-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition416FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-datadictionary.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "datadictionary", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire114FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/hlaresult-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire115FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/paymentnotice-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadRelatedPerson4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/relatedperson-example-peter.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     RelatedPerson relatedperson = RelatedPerson.fromJson(json);

     List<RelatedPerson> list = Arrays.asList(new RelatedPerson[] {relatedperson});

      when(relatedpersonService.selectAll()).thenReturn(list);

      List<RelatedPerson> result = relatedpersonService.selectAll();

      assertEquals("Expect ", "peter", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition417FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaireresponse.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "QuestionnaireResponse", result.get(0).getId()); 
    }
    @Test
    public void testLoadLocation5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/location-example-ambulance.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Location location = Location.fromJson(json);

     List<Location> list = Arrays.asList(new Location[] {location});

      when(locationService.selectAll()).thenReturn(list);

      List<Location> result = locationService.selectAll();

      assertEquals("Expect ", "amb", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition418FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/testreport.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "TestReport", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-composition-status-v3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-composition-status-v3", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem299FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-restful-interaction.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "restful-interaction", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition419FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-itemcontrol.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-itemControl", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedia2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/media-example-xray.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Media media = Media.fromJson(json);

     List<Media> list = Arrays.asList(new Media[] {media});

      when(mediaService.selectAll()).thenReturn(list);

      List<Media> result = mediaService.selectAll();

      assertEquals("Expect ", "xray", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire116FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careplan-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadLocation6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/location-example-hl7hq.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Location location = Location.fromJson(json);

     List<Location> list = Arrays.asList(new Location[] {location});

      when(locationService.selectAll()).thenReturn(list);

      List<Location> result = locationService.selectAll();

      assertEquals("Expect ", "hl7", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire117FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/implementationguide-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem300FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-task-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "task-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition420FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-practitionerrole-primaryind.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "practitionerrole-primaryInd", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet401FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-goal-status-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "goal-status-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet402FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-variant-state.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "variant-state", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-example-TPMT-one.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "example-TPMT-one", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet403FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-data-absent-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "data-absent-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition421FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-lookupquestionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-lookupQuestionnaire", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition422FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-practitioner-classification.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "practitioner-classification", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet404FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-referral-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "referral-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet405FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-questionnaire-item-control.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "questionnaire-item-control", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-example-d.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "pat4", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition423FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-body-site-instance.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "body-site-instance", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet406FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-animal-genderstatus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "animal-genderstatus", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem301FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-choice-list-orientation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "choice-list-orientation", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest28FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0334.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0334", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem302FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-link-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "link-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition424FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-allowedprofile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-allowedProfile", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation41FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-body-temperature.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "body-temperature", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet407FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-allergy-verification-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "allergy-verification-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet408FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-adverse-event-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "adverse-event-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest29FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0315.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0315", result.get(0).getId()); 
    }
    @Test
    public void testLoadMeasureReport3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/measurereport-cms146-cat3-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MeasureReport measurereport = MeasureReport.fromJson(json);

     List<MeasureReport> list = Arrays.asList(new MeasureReport[] {measurereport});

      when(measurereportService.selectAll()).thenReturn(list);

      List<MeasureReport> result = measurereportService.selectAll();

      assertEquals("Expect ", "measurereport-cms146-cat3-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem303FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-report-result-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "report-result-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition425FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-unitid.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-unitID", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem304FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-claim-informationcategory.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "claim-informationcategory", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem305FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-missing-tooth-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "missing-tooth-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition426FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-auditevent-instance.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "auditevent-Instance", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet409FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-icd-10-procedures.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "icd-10-procedures", result.get(0).getId()); 
    }
    @Test
    public void testLoadEncounter7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/encounter-example-f203-20130311.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Encounter encounter = Encounter.fromJson(json);

     List<Encounter> list = Arrays.asList(new Encounter[] {encounter});

      when(encounterService.selectAll()).thenReturn(list);

      List<Encounter> result = encounterService.selectAll();

      assertEquals("Expect ", "f203", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet410FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-clinical-impression-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "clinical-impression-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem306FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-participantrequired.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "participantrequired", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem307FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-object-role.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "object-role", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire118FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/compartmentdefinition-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem308FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-data-absent-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "data-absent-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire119FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/devicerequest-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition427FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-elementdefinition-iscommonbinding.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "elementdefinition-isCommonBinding", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet411FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-message-reason-encounter.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "message-reason-encounter", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet412FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-participant-role.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "participant-role", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet413FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-defined-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "defined-types", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation42FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-f005-hemoglobin.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "f005", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire120FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/measure-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadNutritionOrder12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder-example-diabeticsupplement.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NutritionOrder nutritionorder = NutritionOrder.fromJson(json);

     List<NutritionOrder> list = Arrays.asList(new NutritionOrder[] {nutritionorder});

      when(nutritionorderService.selectAll()).thenReturn(list);

      List<NutritionOrder> result = nutritionorderService.selectAll();

      assertEquals("Expect ", "diabeticsupplement", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet414FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-request-priority.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-request-priority", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet415FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-practitioner-role.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "practitioner-role", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition428FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-family-member-history-genetics-sibling.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "family-member-history-genetics-sibling", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem309FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-action-relationship-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "action-relationship-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet416FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-list-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "list-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadCapabilityStatement6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/capabilitystatement-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CapabilityStatement capabilitystatement = CapabilityStatement.fromJson(json);

     List<CapabilityStatement> list = Arrays.asList(new CapabilityStatement[] {capabilitystatement});

      when(capabilitystatementService.selectAll()).thenReturn(list);

      List<CapabilityStatement> result = capabilitystatementService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest30FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0321.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0321", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet417FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-care-plan-activity.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "care-plan-activity", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet418FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-research-subject-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "research-subject-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition429FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-elementdefinition-identifier.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "elementdefinition-identifier", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition26FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-measure-evaluate-measure.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Measure-evaluate-measure", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet419FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-consistency-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "consistency-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem310FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-adverse-event-seriousness.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "adverse-event-seriousness", result.get(0).getId()); 
    }
    @Test
    public void testLoadFHIRList6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/list-example-empty.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     FHIRList fhirlist = FHIRList.fromJson(json);

     List<FHIRList> list = Arrays.asList(new FHIRList[] {fhirlist});

      when(fhirlistService.selectAll()).thenReturn(list);

      List<FHIRList> result = fhirlistService.selectAll();

      assertEquals("Expect ", "example-empty", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedia3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/media-example-sound.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Media media = Media.fromJson(json);

     List<Media> list = Arrays.asList(new Media[] {media});

      when(mediaService.selectAll()).thenReturn(list);

      List<Media> result = mediaService.selectAll();

      assertEquals("Expect ", "sound", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet420FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-enteral-route.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "enteral-route", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition430FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-patient-congregation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "patient-congregation", result.get(0).getId()); 
    }
    @Test
    public void testLoadCondition10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/condition-example-family-history.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Condition condition = Condition.fromJson(json);

     List<Condition> list = Arrays.asList(new Condition[] {condition});

      when(conditionService.selectAll()).thenReturn(list);

      List<Condition> result = conditionService.selectAll();

      assertEquals("Expect ", "family-history", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationAdministration10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration0305.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationAdministration medicationadministration = MedicationAdministration.fromJson(json);

     List<MedicationAdministration> list = Arrays.asList(new MedicationAdministration[] {medicationadministration});

      when(medicationadministrationService.selectAll()).thenReturn(list);

      List<MedicationAdministration> result = medicationadministrationService.selectAll();

      assertEquals("Expect ", "medadmin0305", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet421FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-address-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "address-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire121FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/requestgroup-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem311FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-request-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "request-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition431FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-concept-bidirectional.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "concept-bidirectional", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition432FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/appointment.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Appointment", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition27FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-resource-validate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Resource-validate", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet422FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-concept-property-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "concept-property-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem312FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-goal-acceptance-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "goal-acceptance-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedia4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/media-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Media media = Media.fromJson(json);

     List<Media> list = Arrays.asList(new Media[] {media});

      when(mediaService.selectAll()).thenReturn(list);

      List<Media> result = mediaService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadEncounter8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/encounter-example-home.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Encounter encounter = Encounter.fromJson(json);

     List<Encounter> list = Arrays.asList(new Encounter[] {encounter});

      when(encounterService.selectAll()).thenReturn(list);

      List<Encounter> result = encounterService.selectAll();

      assertEquals("Expect ", "home", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet423FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-contract-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "contract-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition433FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticssequence.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsSequence", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition434FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/definition.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Definition", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition435FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-allergyintolerance-reasonrefuted.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "allergyintolerance-reasonRefuted", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition436FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/eligibilityrequest.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "EligibilityRequest", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition437FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-reference.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-reference", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition438FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-familymemberhistory-abatement.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "familymemberhistory-abatement", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example-ft4.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "ft4", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-glossy-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "glossy", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet424FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-special-values.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "special-values", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition439FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-usagecontext-group.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "usagecontext-group", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet425FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "example-extensional", result.get(0).getId()); 
    }
    @Test
    public void testLoadEligibilityRequest2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/eligibilityrequest-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     EligibilityRequest eligibilityrequest = EligibilityRequest.fromJson(json);

     List<EligibilityRequest> list = Arrays.asList(new EligibilityRequest[] {eligibilityrequest});

      when(eligibilityrequestService.selectAll()).thenReturn(list);

      List<EligibilityRequest> result = eligibilityrequestService.selectAll();

      assertEquals("Expect ", "52345", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem313FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-copy-number-event.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "copy-number-event", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition28FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-plandefinition-apply.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "PlanDefinition-apply", result.get(0).getId()); 
    }
    @Test
    public void testLoadContract4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/pcd-example-notThis.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Contract contract = Contract.fromJson(json);

     List<Contract> list = Arrays.asList(new Contract[] {contract});

      when(contractService.selectAll()).thenReturn(list);

      List<Contract> result = contractService.selectAll();

      assertEquals("Expect ", "pcd-example-notThis", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet426FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-coverage-level.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "coverage-level", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition440FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/age.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Age", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition441FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-capabilitystatement-websocket.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "capabilitystatement-websocket", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition442FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-specimen-collectionpriority.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "specimen-collectionPriority", result.get(0).getId()); 
    }
    @Test
    public void testLoadVisionPrescription2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/visionprescription-example-1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     VisionPrescription visionprescription = VisionPrescription.fromJson(json);

     List<VisionPrescription> list = Arrays.asList(new VisionPrescription[] {visionprescription});

      when(visionprescriptionService.selectAll()).thenReturn(list);

      List<VisionPrescription> result = visionprescriptionService.selectAll();

      assertEquals("Expect ", "33124", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem314FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-claim-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "claim-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet427FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-map-target-list-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "map-target-list-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition443FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/explanationofbenefit.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ExplanationOfBenefit", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition444FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medication.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Medication", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet428FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-operation-outcome.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "operation-outcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet429FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-research-study-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "research-study-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem315FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-diagnostic-report-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "diagnostic-report-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet430FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-account-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "account-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition445FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/healthcareservice.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "HealthcareService", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire122FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/eligibilityrequest-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition446FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-regex.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-regex", result.get(0).getId()); 
    }
    @Test
    public void testLoadCondition11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/condition-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Condition condition = Condition.fromJson(json);

     List<Condition> list = Arrays.asList(new Condition[] {condition});

      when(conditionService.selectAll()).thenReturn(list);

      List<Condition> result = conditionService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition447FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-xml-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-xml-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire123FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/contract-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense29FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0302.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0302", result.get(0).getId()); 
    }
    @Test
    public void testLoadFHIRList7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/list-example-double-cousin-relationship-pedigree.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     FHIRList fhirlist = FHIRList.fromJson(json);

     List<FHIRList> list = Arrays.asList(new FHIRList[] {fhirlist});

      when(fhirlistService.selectAll()).thenReturn(list);

      List<FHIRList> result = fhirlistService.selectAll();

      assertEquals("Expect ", "example-double-cousin-relationship", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem316FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-explanationofbenefit-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "explanationofbenefit-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition448FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-preferred.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-preferred", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition449FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-auditevent-accession.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "auditevent-Accession", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet431FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-account-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "account-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition450FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-elementdefinition-question.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "elementdefinition-question", result.get(0).getId()); 
    }
    @Test
    public void testLoadDeviceRequest2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/devicerequest-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DeviceRequest devicerequest = DeviceRequest.fromJson(json);

     List<DeviceRequest> list = Arrays.asList(new DeviceRequest[] {devicerequest});

      when(devicerequestService.selectAll()).thenReturn(list);

      List<DeviceRequest> result = devicerequestService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition451FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/provenance.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Provenance", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet432FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-vaccination-protocol-dose-target.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "vaccination-protocol-dose-target", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition452FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-streetaddressline.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-streetAddressLine", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition453FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-event-reasonreference.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "event-reasonReference", result.get(0).getId()); 
    }
    @Test
    public void testLoadCompartmentDefinition6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/compartmentdefinition-relatedperson.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CompartmentDefinition compartmentdefinition = CompartmentDefinition.fromJson(json);

     List<CompartmentDefinition> list = Arrays.asList(new CompartmentDefinition[] {compartmentdefinition});

      when(compartmentdefinitionService.selectAll()).thenReturn(list);

      List<CompartmentDefinition> result = compartmentdefinitionService.selectAll();

      assertEquals("Expect ", "relatedPerson", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example4.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "benchpress", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition29FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-patient-match.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Patient-match", result.get(0).getId()); 
    }
    @Test
    public void testLoadConsent10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consent-example-Emergency.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Consent consent = Consent.fromJson(json);

     List<Consent> list = Arrays.asList(new Consent[] {consent});

      when(consentService.selectAll()).thenReturn(list);

      List<Consent> result = consentService.selectAll();

      assertEquals("Expect ", "consent-example-Emergency", result.get(0).getId()); 
    }
    @Test
    public void testLoadNamingSystem3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/namingsystem-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NamingSystem namingsystem = NamingSystem.fromJson(json);

     List<NamingSystem> list = Arrays.asList(new NamingSystem[] {namingsystem});

      when(namingsystemService.selectAll()).thenReturn(list);

      List<NamingSystem> result = namingsystemService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire124FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/communicationrequest-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet433FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-action-grouping-behavior.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "action-grouping-behavior", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet434FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-map-model-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "map-model-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire125FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/elementdefinition-de-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition454FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/subscription.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Subscription", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet435FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-digital-media-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "digital-media-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire126FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bodysite-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition455FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-procedurerequest-questionnairerequest.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "procedurerequest-questionnaireRequest", result.get(0).getId()); 
    }
    @Test
    public void testLoadTask3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/task-example1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Task task = Task.fromJson(json);

     List<Task> list = Arrays.asList(new Task[] {task});

      when(taskService.selectAll()).thenReturn(list);

      List<Task> result = taskService.selectAll();

      assertEquals("Expect ", "example1", result.get(0).getId()); 
    }
    @Test
    public void testLoadServiceDefinition1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/servicedefinition-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ServiceDefinition servicedefinition = ServiceDefinition.fromJson(json);

     List<ServiceDefinition> list = Arrays.asList(new ServiceDefinition[] {servicedefinition});

      when(servicedefinitionService.selectAll()).thenReturn(list);

      List<ServiceDefinition> result = servicedefinitionService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationAdministration11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration0308.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationAdministration medicationadministration = MedicationAdministration.fromJson(json);

     List<MedicationAdministration> list = Arrays.asList(new MedicationAdministration[] {medicationadministration});

      when(medicationadministrationService.selectAll()).thenReturn(list);

      List<MedicationAdministration> result = medicationadministrationService.selectAll();

      assertEquals("Expect ", "medadmin0308", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition30FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-measure-data-requirements.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Measure-data-requirements", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet436FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-fm-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "fm-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet437FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-supplyrequest-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "supplyrequest-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition456FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-family-member-history-genetics-observation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "family-member-history-genetics-observation", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem317FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-observation-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "observation-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet438FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-condition-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "condition-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet439FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-procedure-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "procedure-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition457FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-fmm-no-warnings.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-fmm-no-warnings", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem318FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-ex-payee-resource-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "ex-payee-resource-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem319FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-observation-relationshiptypes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "observation-relationshiptypes", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition458FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-replaces.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "diagnosticReport-replaces", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0305.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0305", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem320FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-service-place.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "service-place", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition459FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-json-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-json-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition460FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-specimen-specialhandling.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "specimen-specialHandling", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition461FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/annotation.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Annotation", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition462FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-streetname.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-streetName", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle30FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bundle-response-medsallergies.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "bundle-response-medsallergies", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition463FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-humanname-partner-name.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "humanname-partner-name", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitioner12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-example-f005-al.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Practitioner practitioner = Practitioner.fromJson(json);

     List<Practitioner> list = Arrays.asList(new Practitioner[] {practitioner});

      when(practitionerService.selectAll()).thenReturn(list);

      List<Practitioner> result = practitionerService.selectAll();

      assertEquals("Expect ", "f005", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-address-use-v2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-address-use-v2", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition464FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-task-candidatelist.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "task-candidateList", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet440FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-questionnaire-questions.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "questionnaire-questions", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet441FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-substance-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "substance-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet442FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-care-plan-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "care-plan-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadDiagnosticReport12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-example-f201-brainct.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DiagnosticReport diagnosticreport = DiagnosticReport.fromJson(json);

     List<DiagnosticReport> list = Arrays.asList(new DiagnosticReport[] {diagnosticreport});

      when(diagnosticreportService.selectAll()).thenReturn(list);

      List<DiagnosticReport> result = diagnosticreportService.selectAll();

      assertEquals("Expect ", "f201", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition465FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/dosage.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Dosage", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet443FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-tooth.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "tooth", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem321FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-message-transport.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "message-transport", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet444FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-entformula-additive.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "entformula-additive", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition466FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-condition-ruledout.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "condition-ruledOut", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire127FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/messagedefinition-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition467FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-hla-genotyping-results-allele-database.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "hla-genotyping-results-allele-database", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition468FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/activitydefinition.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ActivityDefinition", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire128FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/documentmanifest-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet445FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-package-form.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-package-form", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet446FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-immunization-route.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "immunization-route", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet447FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-units-of-time.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "units-of-time", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem322FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-question-max-occurs.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "question-max-occurs", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition469FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-uncertaintytype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-uncertaintyType", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-observation-relationshiptypes-v3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-observation-relationshiptypes-v3", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire129FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/auditevent-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem323FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-http-verb.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "http-verb", result.get(0).getId()); 
    }
    @Test
    public void testLoadMeasure6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/measure-predecessor-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Measure measure = Measure.fromJson(json);

     List<Measure> list = Arrays.asList(new Measure[] {measure});

      when(measureService.selectAll()).thenReturn(list);

      List<Measure> result = measureService.selectAll();

      assertEquals("Expect ", "measure-predecessor-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet448FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-referencerange-appliesto.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "referencerange-appliesto", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle31FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bundle-request-simplesummary.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "bundle-request-simplesummary", result.get(0).getId()); 
    }
    @Test
    public void testLoadDeviceUseStatement1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/deviceusestatement-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DeviceUseStatement deviceusestatement = DeviceUseStatement.fromJson(json);

     List<DeviceUseStatement> list = Arrays.asList(new DeviceUseStatement[] {deviceusestatement});

      when(deviceusestatementService.selectAll()).thenReturn(list);

      List<DeviceUseStatement> result = deviceusestatementService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadSupplyDelivery1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/supplydelivery-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     SupplyDelivery supplydelivery = SupplyDelivery.fromJson(json);

     List<SupplyDelivery> list = Arrays.asList(new SupplyDelivery[] {supplydelivery});

      when(supplydeliveryService.selectAll()).thenReturn(list);

      List<SupplyDelivery> result = supplydeliveryService.selectAll();

      assertEquals("Expect ", "simpledelivery", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet449FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-quality-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "quality-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadCarePlan10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careplan-example-f003-pharynx.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CarePlan careplan = CarePlan.fromJson(json);

     List<CarePlan> list = Arrays.asList(new CarePlan[] {careplan});

      when(careplanService.selectAll()).thenReturn(list);

      List<CarePlan> result = careplanService.selectAll();

      assertEquals("Expect ", "f003", result.get(0).getId()); 
    }
    @Test
    public void testLoadMessageDefinition3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/messagedefinition-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MessageDefinition messagedefinition = MessageDefinition.fromJson(json);

     List<MessageDefinition> list = Arrays.asList(new MessageDefinition[] {messagedefinition});

      when(messagedefinitionService.selectAll()).thenReturn(list);

      List<MessageDefinition> result = messagedefinitionService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition470FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-streetnametype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-streetNameType", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet450FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-specimen-container-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "specimen-container-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition471FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-maxvalue.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "maxValue", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcessRequest8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processrequest-example-poll-specific.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcessRequest processrequest = ProcessRequest.fromJson(json);

     List<ProcessRequest> list = Arrays.asList(new ProcessRequest[] {processrequest});

      when(processrequestService.selectAll()).thenReturn(list);

      List<ProcessRequest> result = processrequestService.selectAll();

      assertEquals("Expect ", "1111", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition472FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-expansionsource.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-expansionSource", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition473FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-elementdefinition-maxvalueset.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "elementdefinition-maxValueSet", result.get(0).getId()); 
    }
    @Test
    public void testLoadSpecimen4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/specimen-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Specimen specimen = Specimen.fromJson(json);

     List<Specimen> list = Arrays.asList(new Specimen[] {specimen});

      when(specimenService.selectAll()).thenReturn(list);

      List<Specimen> result = specimenService.selectAll();

      assertEquals("Expect ", "101", result.get(0).getId()); 
    }
    @Test
    public void testLoadHealthcareService1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/healthcareservice-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     HealthcareService healthcareservice = HealthcareService.fromJson(json);

     List<HealthcareService> list = Arrays.asList(new HealthcareService[] {healthcareservice});

      when(healthcareserviceService.selectAll()).thenReturn(list);

      List<HealthcareService> result = healthcareserviceService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition474FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-conceptorder.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-conceptOrder", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet451FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-route-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "route-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet452FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-claim-subtype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "claim-subtype", result.get(0).getId()); 
    }
    @Test
    public void testLoadAuditEvent7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/audit-event-example-search.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     AuditEvent auditevent = AuditEvent.fromJson(json);

     List<AuditEvent> list = Arrays.asList(new AuditEvent[] {auditevent});

      when(auditeventService.selectAll()).thenReturn(list);

      List<AuditEvent> result = auditeventService.selectAll();

      assertEquals("Expect ", "example-search", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition475FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-condition-definition.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "condition-definition", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition476FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-workflowstatus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-workflowStatus", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition477FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-condition-basedon.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "condition-basedOn", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem324FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-guidance-response-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "guidance-response-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem325FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-map-group-type-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "map-group-type-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet453FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-report-action-result-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "report-action-result-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition478FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticscopynumberevent.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsCopyNumberEvent", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet454FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-questionnaire-answers-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "questionnaire-answers-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition479FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-infuseover.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "pharmacy-core-infuseOver", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition480FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-ad-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-AD-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem326FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-map-transform.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "map-transform", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet455FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-allergyintolerance-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "allergyintolerance-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet456FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-location-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "location-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition481FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consentdirective.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "consentdirective", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet457FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-c80-facilitycodes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "c80-facilitycodes", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet458FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-condition-severity.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "condition-severity", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition482FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaireresponse-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaireresponse-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition483FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/auditevent.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "AuditEvent", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition31FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-conceptmap-translate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "ConceptMap-translate", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-example-dicom.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "dicom", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition484FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-condition-targetbodysite.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "condition-targetBodySite", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet459FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-measure-report-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "measure-report-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet460FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-list-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "list-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem327FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-service-product.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "service-product", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem328FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-measure-report-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "measure-report-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition485FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/communication.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Communication", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcessRequest9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processrequest-example-poll-inclusive.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcessRequest processrequest = ProcessRequest.fromJson(json);

     List<ProcessRequest> list = Arrays.asList(new ProcessRequest[] {processrequest});

      when(processrequestService.selectAll()).thenReturn(list);

      List<ProcessRequest> result = processrequestService.selectAll();

      assertEquals("Expect ", "1112", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition486FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-allergyintolerance-certainty.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "allergyintolerance-certainty", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest31FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequestexample1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0311", result.get(0).getId()); 
    }
    @Test
    public void testLoadContract5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/pcd-example-notLabs.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Contract contract = Contract.fromJson(json);

     List<Contract> list = Arrays.asList(new Contract[] {contract});

      when(contractService.selectAll()).thenReturn(list);

      List<Contract> result = contractService.selectAll();

      assertEquals("Expect ", "pcd-example-notLabs", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition487FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-elementdefinition-minvalueset.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "elementdefinition-minValueSet", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem329FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-medication-package-form.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "medication-package-form", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem330FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-days-of-week.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "days-of-week", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet461FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-admin-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-admin-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation43FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-f001-glucose.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "f001", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation44FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-f003-co2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "f003", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem331FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-hl7-work-group.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "hl7-work-group", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition488FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/elementdefinition-de.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "elementdefinition-de", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet462FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-address-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "address-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet463FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-event-timing.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "event-timing", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem332FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-reaction-event-severity.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "reaction-event-severity", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet464FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-texture-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "texture-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition32FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-observation-stats.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Observation-stats", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition489FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-hla-genotyping-results-glstring.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "hla-genotyping-results-glstring", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet465FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-item-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "item-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition490FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/adverseevent.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "AdverseEvent", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem333FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-fm-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "fm-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet466FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-consent-action.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "consent-action", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem334FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-document-reference-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "document-reference-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem335FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-event-timing.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "event-timing", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem336FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-metric-operational-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "metric-operational-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition491FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-elementdefinition-allowedunits.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "elementdefinition-allowedUnits", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem337FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-provider-qualification.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "provider-qualification", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation45FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition492FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/deviceusestatement.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "DeviceUseStatement", result.get(0).getId()); 
    }
    @Test
    public void testLoadImmunization2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/immunization-example-refused.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Immunization immunization = Immunization.fromJson(json);

     List<Immunization> list = Arrays.asList(new Immunization[] {immunization});

      when(immunizationService.selectAll()).thenReturn(list);

      List<Immunization> result = immunizationService.selectAll();

      assertEquals("Expect ", "notGiven", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication17FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0319.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0319", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem338FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-provenance-entity-role.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "provenance-entity-role", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem339FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-reason-medication-given-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "reason-medication-given-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation46FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-vitals-panel.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "vitals-panel", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition493FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-ordinalvalue.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-ordinalValue", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire130FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/activitydefinition-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition494FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-mimetype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "mimeType", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem340FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-medication-admin-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "medication-admin-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadSlot4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/slot-example-tentative.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Slot slot = Slot.fromJson(json);

     List<Slot> list = Arrays.asList(new Slot[] {slot});

      when(slotService.selectAll()).thenReturn(list);

      List<Slot> result = slotService.selectAll();

      assertEquals("Expect ", "2", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem341FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-testscript-profile-destination-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "testscript-profile-destination-types", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense30FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0304.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0304", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-institutional-rich.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "960151", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet467FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-designation-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "designation-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example-implant.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "example-implant", result.get(0).getId()); 
    }
    @Test
    public void testLoadActivityDefinition9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/activitydefinition-order-serum-dengue-virus-igm.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ActivityDefinition activitydefinition = ActivityDefinition.fromJson(json);

     List<ActivityDefinition> list = Arrays.asList(new ActivityDefinition[] {activitydefinition});

      when(activitydefinitionService.selectAll()).thenReturn(list);

      List<ActivityDefinition> result = activitydefinitionService.selectAll();

      assertEquals("Expect ", "serum-dengue-virus-igm", result.get(0).getId()); 
    }
    @Test
    public void testLoadAppointment3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/appointment-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Appointment appointment = Appointment.fromJson(json);

     List<Appointment> list = Arrays.asList(new Appointment[] {appointment});

      when(appointmentService.selectAll()).thenReturn(list);

      List<Appointment> result = appointmentService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition495FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-operationoutcome-detectedissue.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "operationoutcome-detectedIssue", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem342FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-narrative-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "narrative-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet468FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-remittance-outcome.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "remittance-outcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem343FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-vision-base-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "vision-base-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition496FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/capabilitystatement.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "CapabilityStatement", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition497FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/datarequirement.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "DataRequirement", result.get(0).getId()); 
    }
    @Test
    public void testLoadConsent11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consent-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Consent consent = Consent.fromJson(json);

     List<Consent> list = Arrays.asList(new Consent[] {consent});

      when(consentService.selectAll()).thenReturn(list);

      List<Consent> result = consentService.selectAll();

      assertEquals("Expect ", "consent-example-basic", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem344FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-medication-statement-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "medication-statement-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem345FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-service-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "service-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadCondition12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/condition-example2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Condition condition = Condition.fromJson(json);

     List<Condition> list = Arrays.asList(new Condition[] {condition});

      when(conditionService.selectAll()).thenReturn(list);

      List<Condition> result = conditionService.selectAll();

      assertEquals("Expect ", "example2", result.get(0).getId()); 
    }
    @Test
    public void testLoadNutritionOrder13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/nutritionorder-example-diabeticdiet.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     NutritionOrder nutritionorder = NutritionOrder.fromJson(json);

     List<NutritionOrder> list = Arrays.asList(new NutritionOrder[] {nutritionorder});

      when(nutritionorderService.selectAll()).thenReturn(list);

      List<NutritionOrder> result = nutritionorderService.selectAll();

      assertEquals("Expect ", "diabeticdiet", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem346FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-subscription-tag.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "subscription-tag", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-administrative-gender-v2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-administrative-gender-v2", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire131FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/binary-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition498FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-encounter-primarydiagnosis.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "encounter-primaryDiagnosis", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet469FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-immunization-role.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "immunization-role", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition499FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/condition.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Condition", result.get(0).getId()); 
    }
    @Test
    public void testLoadDocumentManifest2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/documentmanifest-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DocumentManifest documentmanifest = DocumentManifest.fromJson(json);

     List<DocumentManifest> list = Arrays.asList(new DocumentManifest[] {documentmanifest});

      when(documentmanifestService.selectAll()).thenReturn(list);

      List<DocumentManifest> result = documentmanifestService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition500FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-patient-cadavericdonor.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "patient-cadavericDonor", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition501FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "DiagnosticReport", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem347FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-ex-program-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "ex-program-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet470FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-request-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-request-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition502FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-maxdeliveryrate.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "pharmacy-core-maxDeliveryRate", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem348FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-supplyrequest-kind.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "supplyrequest-kind", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem349FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-animal-species.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "animal-species", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication18FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0301.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0301", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition503FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "CodeSystem", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet471FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-process-priority.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "process-priority", result.get(0).getId()); 
    }
    @Test
    public void testLoadFamilyMemberHistory2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/familymemberhistory-example-mother.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     FamilyMemberHistory familymemberhistory = FamilyMemberHistory.fromJson(json);

     List<FamilyMemberHistory> list = Arrays.asList(new FamilyMemberHistory[] {familymemberhistory});

      when(familymemberhistoryService.selectAll()).thenReturn(list);

      List<FamilyMemberHistory> result = familymemberhistoryService.selectAll();

      assertEquals("Expect ", "mother", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem350FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-report-status-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "report-status-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example-di.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "di", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire132FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaireresponse-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadContract6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/contract-example-42cfr-part2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Contract contract = Contract.fromJson(json);

     List<Contract> list = Arrays.asList(new Contract[] {contract});

      when(contractService.selectAll()).thenReturn(list);

      List<Contract> result = contractService.selectAll();

      assertEquals("Expect ", "C-2121", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet472FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-abstract-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "abstract-types", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire133FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cholesterol-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest17FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example-edu.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "education", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication19FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0307.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0307", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet473FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-resource-aggregation-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "resource-aggregation-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire134FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/explanationofbenefit-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem351FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-marital-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "marital-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet474FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-concept-map-equivalence.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "concept-map-equivalence", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem352FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-ex-diagnosisrelatedgroup.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "ex-diagnosisrelatedgroup", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem353FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-service-provision-conditions.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "service-provision-conditions", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem354FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-reaction-event-certainty.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "reaction-event-certainty", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap17FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-name-use-v3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-name-use-v3", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition504FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/composition.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Composition", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem355FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-bundle-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "bundle-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadTask4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/task-example5.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Task task = Task.fromJson(json);

     List<Task> list = Arrays.asList(new Task[] {task});

      when(taskService.selectAll()).thenReturn(list);

      List<Task> result = taskService.selectAll();

      assertEquals("Expect ", "example5", result.get(0).getId()); 
    }
    @Test
    public void testLoadAllergyIntolerance3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/allergyintolerance-fishallergy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     AllergyIntolerance allergyintolerance = AllergyIntolerance.fromJson(json);

     List<AllergyIntolerance> list = Arrays.asList(new AllergyIntolerance[] {allergyintolerance});

      when(allergyintoleranceService.selectAll()).thenReturn(list);

      List<AllergyIntolerance> result = allergyintoleranceService.selectAll();

      assertEquals("Expect ", "fishallergy", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire135FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/capabilitystatement-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet475FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-investigation-sets.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "investigation-sets", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition505FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaireresponse-reviewer.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaireresponse-reviewer", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem356FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-consent-except-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "consent-except-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition506FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/lipidprofile.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "lipidprofile", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition507FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-uncertainty.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-uncertainty", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet476FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-identifier-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "identifier-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem357FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-measure-report-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "measure-report-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaireResponse5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/questionnaireresponse-example-bluebook.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     QuestionnaireResponse questionnaireresponse = QuestionnaireResponse.fromJson(json);

     List<QuestionnaireResponse> list = Arrays.asList(new QuestionnaireResponse[] {questionnaireresponse});

      when(questionnaireresponseService.selectAll()).thenReturn(list);

      List<QuestionnaireResponse> result = questionnaireresponseService.selectAll();

      assertEquals("Expect ", "bb", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet477FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-document-reference-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "document-reference-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet478FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-report-participant-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "report-participant-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition508FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-deliverymode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-deliveryMode", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem358FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-supplyrequest-reason.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "supplyrequest-reason", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem359FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-measure-population.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "measure-population", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem360FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-participationstatus.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "participationstatus", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem361FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-allergy-intolerance-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "allergy-intolerance-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition509FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/quantity.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Quantity", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition510FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/ratio.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Ratio", result.get(0).getId()); 
    }
    @Test
    public void testLoadSchedule2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/schedule-provider-location1-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Schedule schedule = Schedule.fromJson(json);

     List<Schedule> list = Arrays.asList(new Schedule[] {schedule});

      when(scheduleService.selectAll()).thenReturn(list);

      List<Schedule> result = scheduleService.selectAll();

      assertEquals("Expect ", "exampleloc1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet479FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-medication-request-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "medication-request-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem362FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-abstract-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "abstract-types", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition511FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-consent-location.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "consent-location", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet480FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-activity-definition-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "activity-definition-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet481FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-search-entry-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "search-entry-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet482FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-repository-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "repository-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example-f004-tracheotomy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "f004", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet483FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-parameter-group.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "parameter-group", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem363FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-testscript-profile-origin-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "testscript-profile-origin-types", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet484FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-immunization-site.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "immunization-site", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition512FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-implementationguide-page.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "implementationguide-page", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition513FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/messageheader.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "MessageHeader", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet485FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-operation-parameter-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "operation-parameter-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet486FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-provider-taxonomy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "provider-taxonomy", result.get(0).getId()); 
    }
    @Test
    public void testLoadSubstance6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/substance-example-f203-potassium.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Substance substance = Substance.fromJson(json);

     List<Substance> list = Arrays.asList(new Substance[] {substance});

      when(substanceService.selectAll()).thenReturn(list);

      List<Substance> result = substanceService.selectAll();

      assertEquals("Expect ", "f203", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap18FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-medication-admin-status-v3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-medication-admin-status-v3", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition514FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-basetype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-baseType", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem364FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-contact-point-system.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "contact-point-system", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet487FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-contract-action.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "contract-action", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition33FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-resource-meta-delete.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Resource-meta-delete", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet488FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-map-source-list-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "map-source-list-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-vision-glasses-3tier.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "660152", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest32FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0327.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0327", result.get(0).getId()); 
    }
    @Test
    public void testLoadEnrollmentResponse1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/enrollmentresponse-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     EnrollmentResponse enrollmentresponse = EnrollmentResponse.fromJson(json);

     List<EnrollmentResponse> list = Arrays.asList(new EnrollmentResponse[] {enrollmentresponse});

      when(enrollmentresponseService.selectAll()).thenReturn(list);

      List<EnrollmentResponse> result = enrollmentresponseService.selectAll();

      assertEquals("Expect ", "ER2500", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest33FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0313.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0313", result.get(0).getId()); 
    }
    @Test
    public void testLoadLibrary10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/library-fhir-model-definition.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Library library = Library.fromJson(json);

     List<Library> list = Arrays.asList(new Library[] {library});

      when(libraryService.selectAll()).thenReturn(list);

      List<Library> result = libraryService.selectAll();

      assertEquals("Expect ", "library-fhir-model-definition", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition515FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-valueset-keyword.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "valueset-keyWord", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example-f001-heart.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "f001", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem365FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-vision-eye-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "vision-eye-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "100150", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition516FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-elementdefinition-inheritedextensiblevalueset.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "elementdefinition-inheritedExtensibleValueSet", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet489FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-payeetype.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "payeetype", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire136FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/paymentreconciliation-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet490FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-measure-data-usage.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "measure-data-usage", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition517FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-allergyintolerance-substanceexposurerisk.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "allergyintolerance-substanceExposureRisk", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire137FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/chargeitem-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition518FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/contactdetail.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ContactDetail", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire138FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/appointmentresponse-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem366FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-request-priority.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "request-priority", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition519FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/processresponse.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "ProcessResponse", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition520FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-openehr-exposuredescription.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "openEHR-exposureDescription", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition521FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/specimen.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Specimen", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap19FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-name-use-v2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-name-use-v2", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet491FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-benefit-subcategory.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "benefit-subcategory", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition522FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/compartmentdefinition.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "CompartmentDefinition", result.get(0).getId()); 
    }
    @Test
    public void testLoadCapabilityStatement7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/capabilitystatement-base2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CapabilityStatement capabilitystatement = CapabilityStatement.fromJson(json);

     List<CapabilityStatement> list = Arrays.asList(new CapabilityStatement[] {capabilitystatement});

      when(capabilitystatementService.selectAll()).thenReturn(list);

      List<CapabilityStatement> result = capabilitystatementService.selectAll();

      assertEquals("Expect ", "base2", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem367FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-measurement-principle.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "measurement-principle", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet492FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-vaccination-protocol-dose-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "vaccination-protocol-dose-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitioner13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Practitioner practitioner = Practitioner.fromJson(json);

     List<Practitioner> list = Arrays.asList(new Practitioner[] {practitioner});

      when(practitionerService.selectAll()).thenReturn(list);

      List<Practitioner> result = practitionerService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem368FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-event-capability-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "event-capability-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem369FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-endpoint-payload-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "endpoint-payload-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition523FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-timing-daysofcycle.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "timing-daysOfCycle", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire139FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bmi-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition524FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-geneticsassessedcondition.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "DiagnosticReport-geneticsAssessedCondition", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition525FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-11179-de-classification-or-context.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "11179-de-classification-or-context", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire140FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/device-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest34FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequestexample2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx002", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet493FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-provenance-activity-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "provenance-activity-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-oral-contained-identifier.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "100155", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire141FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/encounter-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem370FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-questionnaire-item-control.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "questionnaire-item-control", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition526FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-medication-usualroute.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "medication-usualRoute", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet494FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-flag-code.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "flag-code", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet495FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-fm-conditions.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "fm-conditions", result.get(0).getId()); 
    }
    @Test
    public void testLoadFHIRList8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/list-example-simple-empty.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     FHIRList fhirlist = FHIRList.fromJson(json);

     List<FHIRList> list = Arrays.asList(new FHIRList[] {fhirlist});

      when(fhirlistService.selectAll()).thenReturn(list);

      List<FHIRList> result = fhirlistService.selectAll();

      assertEquals("Expect ", "example-simple-empty", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedure15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedure-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Procedure procedure = Procedure.fromJson(json);

     List<Procedure> list = Arrays.asList(new Procedure[] {procedure});

      when(procedureService.selectAll()).thenReturn(list);

      List<Procedure> result = procedureService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest35FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0302.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0302", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire142FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bp-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem371FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-medication-dispense-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "medication-dispense-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationAdministration12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministrationexample3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationAdministration medicationadministration = MedicationAdministration.fromJson(json);

     List<MedicationAdministration> list = Arrays.asList(new MedicationAdministration[] {medicationadministration});

      when(medicationadministrationService.selectAll()).thenReturn(list);

      List<MedicationAdministration> result = medicationadministrationService.selectAll();

      assertEquals("Expect ", "medadminexample03", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap20FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-contact-point-system-v2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-contact-point-system-v2", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet496FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-questionnaire-answers.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "questionnaire-answers", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet497FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-supplyrequest-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "supplyrequest-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-professional.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "860150", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet498FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-contract-term-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "contract-term-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadPlanDefinition11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/plandefinition-exclusive-breastfeeding-intervention-03.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     PlanDefinition plandefinition = PlanDefinition.fromJson(json);

     List<PlanDefinition> list = Arrays.asList(new PlanDefinition[] {plandefinition});

      when(plandefinitionService.selectAll()).thenReturn(list);

      List<PlanDefinition> result = plandefinitionService.selectAll();

      assertEquals("Expect ", "exclusive-breastfeeding-intervention-03", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition527FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-history.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-history", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem372FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-map-input-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "map-input-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet499FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-diagnostic-report-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "diagnostic-report-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadImmunization3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/immunization-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Immunization immunization = Immunization.fromJson(json);

     List<Immunization> list = Arrays.asList(new Immunization[] {immunization});

      when(immunizationService.selectAll()).thenReturn(list);

      List<Immunization> result = immunizationService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet500FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-metric-color.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "metric-color", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet501FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-animal-breeds.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "animal-breeds", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem373FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-process-priority.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "process-priority", result.get(0).getId()); 
    }
    @Test
    public void testLoadSchedule3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/schedule-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Schedule schedule = Schedule.fromJson(json);

     List<Schedule> list = Arrays.asList(new Schedule[] {schedule});

      when(scheduleService.selectAll()).thenReturn(list);

      List<Schedule> result = scheduleService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap21FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/cm-administrative-gender-v3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "cm-administrative-gender-v3", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition528FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-delta.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-delta", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition34FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-encounter-everything.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Encounter-everything", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem374FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-special-values.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "special-values", result.get(0).getId()); 
    }
    @Test
    public void testLoadTask5FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/task-example3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Task task = Task.fromJson(json);

     List<Task> list = Arrays.asList(new Task[] {task});

      when(taskService.selectAll()).thenReturn(list);

      List<Task> result = taskService.selectAll();

      assertEquals("Expect ", "example3", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire143FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/triglyceride-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition529FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/domainresource.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "DomainResource", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet502FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-benefit-network.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "benefit-network", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition530FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/dataelement.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "DataElement", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem375FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-snomedct.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "snomedct", result.get(0).getId()); 
    }
    @Test
    public void testLoadServiceDefinition2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/servicedefinition-infobutton.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ServiceDefinition servicedefinition = ServiceDefinition.fromJson(json);

     List<ServiceDefinition> list = Arrays.asList(new ServiceDefinition[] {servicedefinition});

      when(servicedefinitionService.selectAll()).thenReturn(list);

      List<ServiceDefinition> result = servicedefinitionService.selectAll();

      assertEquals("Expect ", "infobutton", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication20FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0312.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0312", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition531FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-observation-geneticsallelicfrequency.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "observation-geneticsAllelicFrequency", result.get(0).getId()); 
    }
    @Test
    public void testLoadDetectedIssue3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/detectedissue-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DetectedIssue detectedissue = DetectedIssue.fromJson(json);

     List<DetectedIssue> list = Arrays.asList(new DetectedIssue[] {detectedissue});

      when(detectedissueService.selectAll()).thenReturn(list);

      List<DetectedIssue> result = detectedissueService.selectAll();

      assertEquals("Expect ", "ddi", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem376FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-process-outcome.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "process-outcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadSupplyDelivery2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/supplydelivery-example-pumpdelivery.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     SupplyDelivery supplydelivery = SupplyDelivery.fromJson(json);

     List<SupplyDelivery> list = Arrays.asList(new SupplyDelivery[] {supplydelivery});

      when(supplydeliveryService.selectAll()).thenReturn(list);

      List<SupplyDelivery> result = supplydeliveryService.selectAll();

      assertEquals("Expect ", "pumpdelivery", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition532FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/media.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Media", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation47FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-mbp.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "mbp", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem377FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-assert-operator-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "assert-operator-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadDiagnosticReport13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-micro1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DiagnosticReport diagnosticreport = DiagnosticReport.fromJson(json);

     List<DiagnosticReport> list = Arrays.asList(new DiagnosticReport[] {diagnosticreport});

      when(diagnosticreportService.selectAll()).thenReturn(list);

      List<DiagnosticReport> result = diagnosticreportService.selectAll();

      assertEquals("Expect ", "micro", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet503FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-encounter-special-courtesy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "encounter-special-courtesy", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet504FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-reason-medication-given-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "reason-medication-given-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire144FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/substance-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadAuditEvent8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/audit-event-example-login.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     AuditEvent auditevent = AuditEvent.fromJson(json);

     List<AuditEvent> list = Arrays.asList(new AuditEvent[] {auditevent});

      when(auditeventService.selectAll()).thenReturn(list);

      List<AuditEvent> result = auditeventService.selectAll();

      assertEquals("Expect ", "example-login", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition35FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-observation-lastn.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Observation-lastn", result.get(0).getId()); 
    }
    @Test
    public void testLoadFlag2FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/flag-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Flag flag = Flag.fromJson(json);

     List<Flag> list = Arrays.asList(new Flag[] {flag});

      when(flagService.selectAll()).thenReturn(list);

      List<Flag> result = flagService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition533FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-11179-permitted-value-valueset.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "11179-permitted-value-valueset", result.get(0).getId()); 
    }
    @Test
    public void testLoadDiagnosticReport14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/diagnosticreport-example-papsmear.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DiagnosticReport diagnosticreport = DiagnosticReport.fromJson(json);

     List<DiagnosticReport> list = Arrays.asList(new DiagnosticReport[] {diagnosticreport});

      when(diagnosticreportService.selectAll()).thenReturn(list);

      List<DiagnosticReport> result = diagnosticreportService.selectAll();

      assertEquals("Expect ", "pap", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet505FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-body-site.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "body-site", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition534FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/shareablecodesystem.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "shareablecodesystem", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem378FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-audit-source-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "audit-source-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition535FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-structuredefinition-category.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "structuredefinition-category", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem379FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-versioning-policy.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "versioning-policy", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet506FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-vision-base-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "vision-base-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationRequest36FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationrequest0318.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationRequest medicationrequest = MedicationRequest.fromJson(json);

     List<MedicationRequest> list = Arrays.asList(new MedicationRequest[] {medicationrequest});

      when(medicationrequestService.selectAll()).thenReturn(list);

      List<MedicationRequest> result = medicationrequestService.selectAll();

      assertEquals("Expect ", "medrx0318", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem380FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-graph-compartment-rule.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "graph-compartment-rule", result.get(0).getId()); 
    }
    @Test
    public void testLoadContract7FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/pcd-example-notOrg.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Contract contract = Contract.fromJson(json);

     List<Contract> list = Arrays.asList(new Contract[] {contract});

      when(contractService.selectAll()).thenReturn(list);

      List<Contract> result = contractService.selectAll();

      assertEquals("Expect ", "pcd-example-notOrg", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet507FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-related-claim-relationship.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "related-claim-relationship", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition536FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-referencefilter.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-referenceFilter", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition537FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-communication-reasonnotperformed.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "communication-reasonNotPerformed", result.get(0).getId()); 
    }
    @Test
    public void testLoadTask6FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/task-example4.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Task task = Task.fromJson(json);

     List<Task> list = Arrays.asList(new Task[] {task});

      when(taskService.selectAll()).thenReturn(list);

      List<Task> result = taskService.selectAll();

      assertEquals("Expect ", "example4", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition538FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/triglyceride.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "triglyceride", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition539FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/organization.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Organization", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet508FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-risk-probability.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "risk-probability", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition540FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/documentmanifest.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "DocumentManifest", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet509FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-approach-site-codes.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "approach-site-codes", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem381FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-compartment-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "compartment-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadBasic3FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/basic-example2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Basic basic = Basic.fromJson(json);

     List<Basic> list = Arrays.asList(new Basic[] {basic});

      when(basicService.selectAll()).thenReturn(list);

      List<Basic> result = basicService.selectAll();

      assertEquals("Expect ", "classModel", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem382FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-data-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "data-types", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition541FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-birthplace.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "birthPlace", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet510FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-chargeitem-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "chargeitem-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet511FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-security-labels.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "security-labels", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire145FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition542FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-allowedresource.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-allowedResource", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition543FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-codesystem-othername.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "codesystem-otherName", result.get(0).getId()); 
    }
    @Test
    public void testLoadBundle32FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/profiles-others.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Bundle bundle = Bundle.fromJson(json);

     List<Bundle> list = Arrays.asList(new Bundle[] {bundle});

      when(bundleService.selectAll()).thenReturn(list);

      List<Bundle> result = bundleService.selectAll();

      assertEquals("Expect ", "profiles-others", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationAdministration13FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration0312.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationAdministration medicationadministration = MedicationAdministration.fromJson(json);

     List<MedicationAdministration> list = Arrays.asList(new MedicationAdministration[] {medicationadministration});

      when(medicationadministrationService.selectAll()).thenReturn(list);

      List<MedicationAdministration> result = medicationadministrationService.selectAll();

      assertEquals("Expect ", "medadmin0312", result.get(0).getId()); 
    }
    @Test
    public void testLoadOrganization11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/organization-example-insurer.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Organization organization = Organization.fromJson(json);

     List<Organization> list = Arrays.asList(new Organization[] {organization});

      when(organizationService.selectAll()).thenReturn(list);

      List<Organization> result = organizationService.selectAll();

      assertEquals("Expect ", "2", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-graphic-example-5.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "graphic-example-5", result.get(0).getId()); 
    }
    @Test
    public void testLoadDetectedIssue4FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/detectedissue-example-lab.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     DetectedIssue detectedissue = DetectedIssue.fromJson(json);

     List<DetectedIssue> list = Arrays.asList(new DetectedIssue[] {detectedissue});

      when(detectedissueService.selectAll()).thenReturn(list);

      List<DetectedIssue> result = detectedissueService.selectAll();

      assertEquals("Expect ", "lab", result.get(0).getId()); 
    }
    @Test
    public void testLoadFHIRList9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/list-example-familyhistory-genetics-profile-annie.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     FHIRList fhirlist = FHIRList.fromJson(json);

     List<FHIRList> list = Arrays.asList(new FHIRList[] {fhirlist});

      when(fhirlistService.selectAll()).thenReturn(list);

      List<FHIRList> result = fhirlistService.selectAll();

      assertEquals("Expect ", "prognosis", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition544FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-careof.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-ADXP-careOf", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient15FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-example-b.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "pat2", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition36FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-activitydefinition-data-requirements.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "ActivityDefinition-data-requirements", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition545FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Patient", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap22FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/conceptmap-example-2.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "example2", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem383FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-diagnosis-role.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "diagnosis-role", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition546FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-openehr-administration.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "openEHR-administration", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet512FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-http-verb.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "http-verb", result.get(0).getId()); 
    }
    @Test
    public void testLoadConsent12FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/consent-example-smartonfhir.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Consent consent = Consent.fromJson(json);

     List<Consent> list = Arrays.asList(new Consent[] {consent});

      when(consentService.selectAll()).thenReturn(list);

      List<Consent> result = consentService.selectAll();

      assertEquals("Expect ", "consent-example-smartonfhir", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication21FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample15.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "medexample015", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition547FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-devicerequest-reasonrejected.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "devicerequest-reasonRejected", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationAdministration14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationadministration0303.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationAdministration medicationadministration = MedicationAdministration.fromJson(json);

     List<MedicationAdministration> list = Arrays.asList(new MedicationAdministration[] {medicationadministration});

      when(medicationadministrationService.selectAll()).thenReturn(list);

      List<MedicationAdministration> result = medicationadministrationService.selectAll();

      assertEquals("Expect ", "medadmin0303", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication22FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample0309.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "med0309", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet513FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-specimen-collection-priority.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "specimen-collection-priority", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem384FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-reference-version-rules.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "reference-version-rules", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet514FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-process-outcome.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "process-outcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadClaim16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/claim-example-vision-glasses.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Claim claim = Claim.fromJson(json);

     List<Claim> list = Arrays.asList(new Claim[] {claim});

      when(claimService.selectAll()).thenReturn(list);

      List<Claim> result = claimService.selectAll();

      assertEquals("Expect ", "660151", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet515FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-discriminator-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "discriminator-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire146FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/dataelement-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire147FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/structuredefinition-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem385FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-condition-state.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "condition-state", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition548FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/instant.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "instant", result.get(0).getId()); 
    }
    @Test
    public void testLoadSequence16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/sequence-example-fda.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Sequence sequence = Sequence.fromJson(json);

     List<Sequence> list = Arrays.asList(new Sequence[] {sequence});

      when(sequenceService.selectAll()).thenReturn(list);

      List<Sequence> result = sequenceService.selectAll();

      assertEquals("Expect ", "fda-example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem386FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-benefit-term.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "benefit-term", result.get(0).getId()); 
    }
    @Test
    public void testLoadPatient16FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/patient-example-proband.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Patient patient = Patient.fromJson(json);

     List<Patient> list = Arrays.asList(new Patient[] {patient});

      when(patientService.selectAll()).thenReturn(list);

      List<Patient> result = patientService.selectAll();

      assertEquals("Expect ", "proband", result.get(0).getId()); 
    }
    @Test
    public void testLoadAdverseEvent1FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/adverseevent-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     AdverseEvent adverseevent = AdverseEvent.fromJson(json);

     List<AdverseEvent> list = Arrays.asList(new AdverseEvent[] {adverseevent});

      when(adverseeventService.selectAll()).thenReturn(list);

      List<AdverseEvent> result = adverseeventService.selectAll();

      assertEquals("Expect ", "example", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem387FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-encounter-type.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "encounter-type", result.get(0).getId()); 
    }
    @Test
    public void testLoadConceptMap23FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/conceptmap-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ConceptMap conceptmap = ConceptMap.fromJson(json);

     List<ConceptMap> list = Arrays.asList(new ConceptMap[] {conceptmap});

      when(conceptmapService.selectAll()).thenReturn(list);

      List<ConceptMap> result = conceptmapService.selectAll();

      assertEquals("Expect ", "101", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition549FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-iso21090-en-qualifier.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "iso21090-EN-qualifier", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition550FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-patient-interpreterrequired.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "patient-interpreterRequired", result.get(0).getId()); 
    }
    @Test
    public void testLoadProcedureRequest18FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/procedurerequest-example3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ProcedureRequest procedurerequest = ProcedureRequest.fromJson(json);

     List<ProcedureRequest> list = Arrays.asList(new ProcedureRequest[] {procedurerequest});

      when(procedurerequestService.selectAll()).thenReturn(list);

      List<ProcedureRequest> result = procedurerequestService.selectAll();

      assertEquals("Expect ", "do-not-turn", result.get(0).getId()); 
    }
    @Test
    public void testLoadObservation48FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/observation-example-bmd.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Observation observation = Observation.fromJson(json);

     List<Observation> list = Arrays.asList(new Observation[] {observation});

      when(observationService.selectAll()).thenReturn(list);

      List<Observation> result = observationService.selectAll();

      assertEquals("Expect ", "bmd", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet516FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-capability-statement-kind.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "capability-statement-kind", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition551FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-event-onbehalfof.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "event-OnBehalfOf", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet517FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-flag-priority.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "flag-priority", result.get(0).getId()); 
    }
    @Test
    public void testLoadCarePlan11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/careplan-example-f002-lung.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CarePlan careplan = CarePlan.fromJson(json);

     List<CarePlan> list = Arrays.asList(new CarePlan[] {careplan});

      when(careplanService.selectAll()).thenReturn(list);

      List<CarePlan> result = careplanService.selectAll();

      assertEquals("Expect ", "f002", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet518FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-claim-use.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "claim-use", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet519FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-conformance-expectation.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "conformance-expectation", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition552FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-event-definition.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "event-definition", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet520FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-condition-ver-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "condition-ver-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem388FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-action-condition-kind.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "action-condition-kind", result.get(0).getId()); 
    }
    @Test
    public void testLoadEncounter9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/encounter-example-f002-lung.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Encounter encounter = Encounter.fromJson(json);

     List<Encounter> list = Arrays.asList(new Encounter[] {encounter});

      when(encounterService.selectAll()).thenReturn(list);

      List<Encounter> result = encounterService.selectAll();

      assertEquals("Expect ", "f002", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet521FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-guide-page-kind.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "guide-page-kind", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition553FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-event-notdone.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "event-notDone", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet522FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-adverse-event-causality.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "adverse-event-causality", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedication23FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationexample1.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Medication medication = Medication.fromJson(json);

     List<Medication> list = Arrays.asList(new Medication[] {medication});

      when(medicationService.selectAll()).thenReturn(list);

      List<Medication> result = medicationService.selectAll();

      assertEquals("Expect ", "medicationexample1", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition554FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/person.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "Person", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet523FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-nhin-purposeofuse.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "nhin-purposeofuse", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire148FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/bundle-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem389FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-structure-definition-kind.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "structure-definition-kind", result.get(0).getId()); 
    }
    @Test
    public void testLoadCodeSystem390FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/codesystem-common-tags.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CodeSystem codesystem = CodeSystem.fromJson(json);

     List<CodeSystem> list = Arrays.asList(new CodeSystem[] {codesystem});

      when(codesystemService.selectAll()).thenReturn(list);

      List<CodeSystem> result = codesystemService.selectAll();

      assertEquals("Expect ", "common-tags", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition555FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-medicationstatement-prescriber.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "medicationstatement-Prescriber", result.get(0).getId()); 
    }
    @Test
    public void testLoadOperationDefinition37FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operation-resource-meta.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     OperationDefinition operationdefinition = OperationDefinition.fromJson(json);

     List<OperationDefinition> list = Arrays.asList(new OperationDefinition[] {operationdefinition});

      when(operationdefinitionService.selectAll()).thenReturn(list);

      List<OperationDefinition> result = operationdefinitionService.selectAll();

      assertEquals("Expect ", "Resource-meta", result.get(0).getId()); 
    }
    @Test
    public void testLoadLibrary11FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/library-predecessor-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Library library = Library.fromJson(json);

     List<Library> list = Arrays.asList(new Library[] {library});

      when(libraryService.selectAll()).thenReturn(list);

      List<Library> result = libraryService.selectAll();

      assertEquals("Expect ", "library-fhir-helpers-predecessor", result.get(0).getId()); 
    }
    @Test
    public void testLoadPractitioner14FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/practitioner-example-f201-ab.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Practitioner practitioner = Practitioner.fromJson(json);

     List<Practitioner> list = Arrays.asList(new Practitioner[] {practitioner});

      when(practitionerService.selectAll()).thenReturn(list);

      List<Practitioner> result = practitionerService.selectAll();

      assertEquals("Expect ", "f201", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition556FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-11179-de-administrative-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "11179-de-administrative-status", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet524FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-testscript-profile-destination-types.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "testscript-profile-destination-types", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet525FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-restful-capability-mode.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "restful-capability-mode", result.get(0).getId()); 
    }
    @Test
    public void testLoadQuestionnaire149FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/devicemetric-questionnaire.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Questionnaire questionnaire = Questionnaire.fromJson(json);

     List<Questionnaire> list = Arrays.asList(new Questionnaire[] {questionnaire});

      when(questionnaireService.selectAll()).thenReturn(list);

      List<Questionnaire> result = questionnaireService.selectAll();

      assertEquals("Expect ", "qs1", result.get(0).getId()); 
    }
    @Test
    public void testLoadCapabilityStatement8FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/capabilitystatement-phr-example.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     CapabilityStatement capabilitystatement = CapabilityStatement.fromJson(json);

     List<CapabilityStatement> list = Arrays.asList(new CapabilityStatement[] {capabilitystatement});

      when(capabilitystatementService.selectAll()).thenReturn(list);

      List<CapabilityStatement> result = capabilitystatementService.selectAll();

      assertEquals("Expect ", "phr", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition557FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-capabilitystatement-search-parameter-combination.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "capabilitystatement-search-parameter-combination", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition558FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/operationoutcome.profile.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "OperationOutcome", result.get(0).getId()); 
    }
    @Test
    public void testLoadMedicationDispense31FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/medicationdispense0317.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     MedicationDispense medicationdispense = MedicationDispense.fromJson(json);

     List<MedicationDispense> list = Arrays.asList(new MedicationDispense[] {medicationdispense});

      when(medicationdispenseService.selectAll()).thenReturn(list);

      List<MedicationDispense> result = medicationdispenseService.selectAll();

      assertEquals("Expect ", "meddisp0317", result.get(0).getId()); 
    }
    @Test
    public void testLoadStructureDefinition559FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/extension-questionnaire-supportlink.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     StructureDefinition structuredefinition = StructureDefinition.fromJson(json);

     List<StructureDefinition> list = Arrays.asList(new StructureDefinition[] {structuredefinition});

      when(structuredefinitionService.selectAll()).thenReturn(list);

      List<StructureDefinition> result = structuredefinitionService.selectAll();

      assertEquals("Expect ", "questionnaire-supportLink", result.get(0).getId()); 
    }
    @Test
    public void testLoadDevice9FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/device-example-udi3.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Device device = Device.fromJson(json);

     List<Device> list = Arrays.asList(new Device[] {device});

      when(deviceService.selectAll()).thenReturn(list);

      List<Device> result = deviceService.selectAll();

      assertEquals("Expect ", "example-udi3", result.get(0).getId()); 
    }
    @Test
    public void testLoadEncounter10FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/encounter-example-xcda.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     Encounter encounter = Encounter.fromJson(json);

     List<Encounter> list = Arrays.asList(new Encounter[] {encounter});

      when(encounterService.selectAll()).thenReturn(list);

      List<Encounter> result = encounterService.selectAll();

      assertEquals("Expect ", "xcda", result.get(0).getId()); 
    }
    @Test
    public void testLoadValueSet526FromJson() throws Exception {
     String inputFile = "../../fhir-data/examples-json/valueset-endpoint-status.json";

     String json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
     ValueSet valueset = ValueSet.fromJson(json);

     List<ValueSet> list = Arrays.asList(new ValueSet[] {valueset});

      when(valuesetService.selectAll()).thenReturn(list);

      List<ValueSet> result = valuesetService.selectAll();

      assertEquals("Expect ", "endpoint-status", result.get(0).getId()); 
    }
}