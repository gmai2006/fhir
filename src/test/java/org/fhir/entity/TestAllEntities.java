package org.fhir.entity;

import static org.junit.Assert.*;

import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.List;

import org.fhir.dao.*;
import org.fhir.pojo.*;
import org.fhir.utils.FileUtils;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.google.inject.AbstractModule;
import com.google.inject.Guice;
import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Module;
import com.google.inject.persist.PersistService;
import com.google.inject.persist.jpa.JpaPersistModule;
import org.fhir.dao.*;

/* *
 * Auto generated from the FHIR samples-json
 * Test read json from json file and convert to coresponding Java class
 * testing data are extracted from the json files
 */
public class TestAllEntities {
	static Injector injector;
  static PersistService service;
	String inputFile;
  String json;
  Object result;
  static int count = 0;
  java.util.Map<String, String> duplicates = new java.util.HashMap<>();

 @Inject AppointmentDaoImpl appointmentDao; 
 @Inject AccountDaoImpl accountDao; 
 @Inject ReferralRequestDaoImpl referralrequestDao; 
 @Inject MessageDefinitionDaoImpl messagedefinitionDao; 
 @Inject DocumentManifestDaoImpl documentmanifestDao; 
 @Inject GoalDaoImpl goalDao; 
 @Inject EndpointDaoImpl endpointDao; 
 @Inject EnrollmentRequestDaoImpl enrollmentrequestDao; 
 @Inject ConsentDaoImpl consentDao; 
 @Inject MedicationDaoImpl medicationDao; 
 @Inject MeasureDaoImpl measureDao; 
 @Inject CapabilityStatementDaoImpl capabilitystatementDao; 
 @Inject ResearchSubjectDaoImpl researchsubjectDao; 
 @Inject SubscriptionDaoImpl subscriptionDao; 
 @Inject GraphDefinitionDaoImpl graphdefinitionDao; 
 @Inject DocumentReferenceDaoImpl documentreferenceDao; 
 @Inject ImagingManifestDaoImpl imagingmanifestDao; 
 @Inject FHIRListDaoImpl fhirlistDao; 
 @Inject MeasureReportDaoImpl measurereportDao; 
 @Inject PractitionerRoleDaoImpl practitionerroleDao; 
 @Inject RelatedPersonDaoImpl relatedpersonDao; 
 @Inject SupplyRequestDaoImpl supplyrequestDao; 
 @Inject PractitionerDaoImpl practitionerDao; 
 @Inject ExpansionProfileDaoImpl expansionprofileDao; 
 @Inject SlotDaoImpl slotDao; 
 @Inject ContractDaoImpl contractDao; 
 @Inject PersonDaoImpl personDao; 
 @Inject RiskAssessmentDaoImpl riskassessmentDao; 
 @Inject PaymentNoticeDaoImpl paymentnoticeDao; 
 @Inject GroupDaoImpl groupDao; 
 @Inject OrganizationDaoImpl organizationDao; 
 @Inject CareTeamDaoImpl careteamDao; 
 @Inject ImplementationGuideDaoImpl implementationguideDao; 
 @Inject ImagingStudyDaoImpl imagingstudyDao; 
 @Inject DeviceComponentDaoImpl devicecomponentDao; 
 @Inject FamilyMemberHistoryDaoImpl familymemberhistoryDao; 
 @Inject ChargeItemDaoImpl chargeitemDao; 
 @Inject SubstanceDaoImpl substanceDao; 
 @Inject EncounterDaoImpl encounterDao; 
 @Inject SearchParameterDaoImpl searchparameterDao; 
 @Inject ServiceDefinitionDaoImpl servicedefinitionDao; 
 @Inject ActivityDefinitionDaoImpl activitydefinitionDao; 
 @Inject CommunicationDaoImpl communicationDao; 
 @Inject LinkageDaoImpl linkageDao; 
 @Inject DeviceUseStatementDaoImpl deviceusestatementDao; 
 @Inject RequestGroupDaoImpl requestgroupDao; 
 @Inject DeviceRequestDaoImpl devicerequestDao; 
 @Inject MessageHeaderDaoImpl messageheaderDao; 
 @Inject ImmunizationRecommendationDaoImpl immunizationrecommendationDao; 
 @Inject BodySiteDaoImpl bodysiteDao; 
 @Inject ProvenanceDaoImpl provenanceDao; 
 @Inject TaskDaoImpl taskDao; 
 @Inject QuestionnaireDaoImpl questionnaireDao; 
 @Inject ExplanationOfBenefitDaoImpl explanationofbenefitDao; 
 @Inject ResearchStudyDaoImpl researchstudyDao; 
 @Inject SpecimenDaoImpl specimenDao; 
 @Inject StructureDefinitionDaoImpl structuredefinitionDao; 
 @Inject CarePlanDaoImpl careplanDao; 
 @Inject AllergyIntoleranceDaoImpl allergyintoleranceDao; 
 @Inject EpisodeOfCareDaoImpl episodeofcareDao; 
 @Inject ProcedureDaoImpl procedureDao; 
 @Inject ConceptMapDaoImpl conceptmapDao; 
 @Inject ValueSetDaoImpl valuesetDao; 
 @Inject OperationDefinitionDaoImpl operationdefinitionDao; 
 @Inject MedicationRequestDaoImpl medicationrequestDao; 
 @Inject ImmunizationDaoImpl immunizationDao; 
 @Inject DeviceDaoImpl deviceDao; 
 @Inject VisionPrescriptionDaoImpl visionprescriptionDao; 
 @Inject MediaDaoImpl mediaDao; 
 @Inject ProcedureRequestDaoImpl procedurerequestDao; 
 @Inject EligibilityResponseDaoImpl eligibilityresponseDao; 
 @Inject SequenceDaoImpl sequenceDao; 
 @Inject DeviceMetricDaoImpl devicemetricDao; 
 @Inject CodeSystemDaoImpl codesystemDao; 
 @Inject FlagDaoImpl flagDao; 
 @Inject AppointmentResponseDaoImpl appointmentresponseDao; 
 @Inject StructureMapDaoImpl structuremapDao; 
 @Inject AdverseEventDaoImpl adverseeventDao; 
 @Inject GuidanceResponseDaoImpl guidanceresponseDao; 
 @Inject ObservationDaoImpl observationDao; 
 @Inject MedicationAdministrationDaoImpl medicationadministrationDao; 
 @Inject EnrollmentResponseDaoImpl enrollmentresponseDao; 
 @Inject LibraryDaoImpl libraryDao; 
 @Inject BinaryDaoImpl binaryDao; 
 @Inject MedicationStatementDaoImpl medicationstatementDao; 
 @Inject CommunicationRequestDaoImpl communicationrequestDao; 
 @Inject TestScriptDaoImpl testscriptDao; 
 @Inject BasicDaoImpl basicDao; 
 @Inject TestReportDaoImpl testreportDao; 
 @Inject ProcessRequestDaoImpl processrequestDao; 
 @Inject EligibilityRequestDaoImpl eligibilityrequestDao; 
 @Inject ClaimResponseDaoImpl claimresponseDao; 
 @Inject MedicationDispenseDaoImpl medicationdispenseDao; 
 @Inject DiagnosticReportDaoImpl diagnosticreportDao; 
 @Inject HealthcareServiceDaoImpl healthcareserviceDao; 
 @Inject DataElementDaoImpl dataelementDao; 
 @Inject NutritionOrderDaoImpl nutritionorderDao; 
 @Inject AuditEventDaoImpl auditeventDao; 
 @Inject PaymentReconciliationDaoImpl paymentreconciliationDao; 
 @Inject ConditionDaoImpl conditionDao; 
 @Inject CompositionDaoImpl compositionDao; 
 @Inject DetectedIssueDaoImpl detectedissueDao; 
 @Inject BundleDaoImpl bundleDao; 
 @Inject CompartmentDefinitionDaoImpl compartmentdefinitionDao; 
 @Inject PatientDaoImpl patientDao; 
 @Inject CoverageDaoImpl coverageDao; 
 @Inject QuestionnaireResponseDaoImpl questionnaireresponseDao; 
 @Inject ProcessResponseDaoImpl processresponseDao; 
 @Inject NamingSystemDaoImpl namingsystemDao; 
 @Inject ScheduleDaoImpl scheduleDao; 
 @Inject SupplyDeliveryDaoImpl supplydeliveryDao; 
 @Inject ClinicalImpressionDaoImpl clinicalimpressionDao; 
 @Inject PlanDefinitionDaoImpl plandefinitionDao; 
 @Inject ClaimDaoImpl claimDao; 
 @Inject LocationDaoImpl locationDao; 

 protected List<Module> getModules() {
 	return Arrays.asList(new AbstractModule() {
     @Override
     protected void configure() {
       install(new JpaPersistModule("fhirtest"));
       final Module testModule = getTestModule();
       if (null != testModule) {
           install(testModule);
       }
     }
   });
 }

  protected Module getTestModule() {
    return new AbstractModule() {
        @Override
        protected void configure() {
            bind(AppointmentDaoImpl.class);
            bind(AccountDaoImpl.class);
            bind(ReferralRequestDaoImpl.class);
            bind(MessageDefinitionDaoImpl.class);
            bind(DocumentManifestDaoImpl.class);
            bind(GoalDaoImpl.class);
            bind(EndpointDaoImpl.class);
            bind(EnrollmentRequestDaoImpl.class);
            bind(ConsentDaoImpl.class);
            bind(MedicationDaoImpl.class);
            bind(MeasureDaoImpl.class);
            bind(CapabilityStatementDaoImpl.class);
            bind(ResearchSubjectDaoImpl.class);
            bind(SubscriptionDaoImpl.class);
            bind(GraphDefinitionDaoImpl.class);
            bind(DocumentReferenceDaoImpl.class);
            bind(ImagingManifestDaoImpl.class);
            bind(FHIRListDaoImpl.class);
            bind(MeasureReportDaoImpl.class);
            bind(PractitionerRoleDaoImpl.class);
            bind(RelatedPersonDaoImpl.class);
            bind(SupplyRequestDaoImpl.class);
            bind(PractitionerDaoImpl.class);
            bind(ExpansionProfileDaoImpl.class);
            bind(SlotDaoImpl.class);
            bind(ContractDaoImpl.class);
            bind(PersonDaoImpl.class);
            bind(RiskAssessmentDaoImpl.class);
            bind(PaymentNoticeDaoImpl.class);
            bind(GroupDaoImpl.class);
            bind(OrganizationDaoImpl.class);
            bind(CareTeamDaoImpl.class);
            bind(ImplementationGuideDaoImpl.class);
            bind(ImagingStudyDaoImpl.class);
            bind(DeviceComponentDaoImpl.class);
            bind(FamilyMemberHistoryDaoImpl.class);
            bind(ChargeItemDaoImpl.class);
            bind(SubstanceDaoImpl.class);
            bind(EncounterDaoImpl.class);
            bind(SearchParameterDaoImpl.class);
            bind(ServiceDefinitionDaoImpl.class);
            bind(ActivityDefinitionDaoImpl.class);
            bind(CommunicationDaoImpl.class);
            bind(LinkageDaoImpl.class);
            bind(DeviceUseStatementDaoImpl.class);
            bind(RequestGroupDaoImpl.class);
            bind(DeviceRequestDaoImpl.class);
            bind(MessageHeaderDaoImpl.class);
            bind(ImmunizationRecommendationDaoImpl.class);
            bind(BodySiteDaoImpl.class);
            bind(ProvenanceDaoImpl.class);
            bind(TaskDaoImpl.class);
            bind(QuestionnaireDaoImpl.class);
            bind(ExplanationOfBenefitDaoImpl.class);
            bind(ResearchStudyDaoImpl.class);
            bind(SpecimenDaoImpl.class);
            bind(StructureDefinitionDaoImpl.class);
            bind(CarePlanDaoImpl.class);
            bind(AllergyIntoleranceDaoImpl.class);
            bind(EpisodeOfCareDaoImpl.class);
            bind(ProcedureDaoImpl.class);
            bind(ConceptMapDaoImpl.class);
            bind(ValueSetDaoImpl.class);
            bind(OperationDefinitionDaoImpl.class);
            bind(MedicationRequestDaoImpl.class);
            bind(ImmunizationDaoImpl.class);
            bind(DeviceDaoImpl.class);
            bind(VisionPrescriptionDaoImpl.class);
            bind(MediaDaoImpl.class);
            bind(ProcedureRequestDaoImpl.class);
            bind(EligibilityResponseDaoImpl.class);
            bind(SequenceDaoImpl.class);
            bind(DeviceMetricDaoImpl.class);
            bind(CodeSystemDaoImpl.class);
            bind(FlagDaoImpl.class);
            bind(AppointmentResponseDaoImpl.class);
            bind(StructureMapDaoImpl.class);
            bind(AdverseEventDaoImpl.class);
            bind(GuidanceResponseDaoImpl.class);
            bind(ObservationDaoImpl.class);
            bind(MedicationAdministrationDaoImpl.class);
            bind(EnrollmentResponseDaoImpl.class);
            bind(LibraryDaoImpl.class);
            bind(BinaryDaoImpl.class);
            bind(MedicationStatementDaoImpl.class);
            bind(CommunicationRequestDaoImpl.class);
            bind(TestScriptDaoImpl.class);
            bind(BasicDaoImpl.class);
            bind(TestReportDaoImpl.class);
            bind(ProcessRequestDaoImpl.class);
            bind(EligibilityRequestDaoImpl.class);
            bind(ClaimResponseDaoImpl.class);
            bind(MedicationDispenseDaoImpl.class);
            bind(DiagnosticReportDaoImpl.class);
            bind(HealthcareServiceDaoImpl.class);
            bind(DataElementDaoImpl.class);
            bind(NutritionOrderDaoImpl.class);
            bind(AuditEventDaoImpl.class);
            bind(PaymentReconciliationDaoImpl.class);
            bind(ConditionDaoImpl.class);
            bind(CompositionDaoImpl.class);
            bind(DetectedIssueDaoImpl.class);
            bind(BundleDaoImpl.class);
            bind(CompartmentDefinitionDaoImpl.class);
            bind(PatientDaoImpl.class);
            bind(CoverageDaoImpl.class);
            bind(QuestionnaireResponseDaoImpl.class);
            bind(ProcessResponseDaoImpl.class);
            bind(NamingSystemDaoImpl.class);
            bind(ScheduleDaoImpl.class);
            bind(SupplyDeliveryDaoImpl.class);
            bind(ClinicalImpressionDaoImpl.class);
            bind(PlanDefinitionDaoImpl.class);
            bind(ClaimDaoImpl.class);
            bind(LocationDaoImpl.class);
        }
    };
  }

  @Before
  public void setup() {
    final List<Module> modules = getModules();
    injector = Guice.createInjector(modules);
    service = injector.getInstance(PersistService.class);
    injector.injectMembers(this);
    service.start();
  }

  @After
  public void tearDownJpa() throws Exception {
    service.stop();
  }

  @Test
  public void test0() throws Exception {
  	System.out.println("Total tests .. " + count);
  }
  @Test
  public void test310() throws Exception {
  	 inputFile = "../../fhir-data/examples-json/sequence-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "example", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/hdlcholesterol.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "hdlcholesterol", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/sequence-example-fda-vcfeval.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "fda-vcfeval-comparison", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/immunization-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-familymemberhistory-severity.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "familymemberhistory-severity", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-contract-signer-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "contract-signer-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/list-example-allergies.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = FHIRListHelper.fromJson(json);
  	 System.out.println("testing FHIRList " + count++);
  	 fhirlistDao.create((FHIRList)result);
  	 result = fhirlistDao.find(((FHIRList)result).getId());
  	 assertEquals("Expect ", "current-allergies", ((FHIRList)result).getId());
  	 fhirlistDao.delete( (FHIRList)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder-example-pureeddiet.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NutritionOrderHelper.fromJson(json);
  	 System.out.println("testing NutritionOrder " + count++);
  	 nutritionorderDao.create((NutritionOrder)result);
  	 result = nutritionorderDao.find(((NutritionOrder)result).getId());
  	 assertEquals("Expect ", "pureeddiet", ((NutritionOrder)result).getId());
  	 nutritionorderDao.delete( (NutritionOrder)result);

  	 inputFile = "../../fhir-data/examples-json/careteam-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/operationoutcome-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-example-f002-pv.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerHelper.fromJson(json);
  	 System.out.println("testing Practitioner " + count++);
  	 practitionerDao.create((Practitioner)result);
  	 result = practitionerDao.find(((Practitioner)result).getId());
  	 assertEquals("Expect ", "f002", ((Practitioner)result).getId());
  	 practitionerDao.delete( (Practitioner)result);

  	 inputFile = "../../fhir-data/examples-json/eligibilityresponse.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "EligibilityResponse", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/hlaresult.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "hlaresult", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/familymemberhistory-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/measure.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Measure", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-parameter-group.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "parameter-group", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-device-statement-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "device-statement-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/operation-structuremap-transform.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "StructureMap-transform", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/v2-tables.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "v2-valuesets", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-examples-general.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "72ac8493-52ac-41bd-8d5d-7258c289b5ea", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-postbox.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-postBox", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/searchparameter.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "SearchParameter", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/bodytemp.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "bodytemp", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/bodyweight-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-condition-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "condition-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-encounter-location-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "encounter-location-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-contract-content-derivative.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "contract-content-derivative", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-additional-instruction-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "additional-instruction-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0315.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0315", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0308.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0308", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/subscription-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DiagnosticReportHelper.fromJson(json);
  	 System.out.println("testing DiagnosticReport " + count++);
  	 diagnosticreportDao.create((DiagnosticReport)result);
  	 result = diagnosticreportDao.find(((DiagnosticReport)result).getId());
  	 assertEquals("Expect ", "101", ((DiagnosticReport)result).getId());
  	 diagnosticreportDao.delete( (DiagnosticReport)result);

  	 inputFile = "../../fhir-data/examples-json/condition-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-search-entry-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "search-entry-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-all-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "all-types", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/activitydefinition-provide-mosquito-prevention-advice.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ActivityDefinitionHelper.fromJson(json);
  	 System.out.println("testing ActivityDefinition " + count++);
  	 activitydefinitionDao.create((ActivityDefinition)result);
  	 result = activitydefinitionDao.find(((ActivityDefinition)result).getId());
  	 assertEquals("Expect ", "provide-mosquito-prevention-advice", ((ActivityDefinition)result).getId());
  	 activitydefinitionDao.delete( (ActivityDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/devicemetricobservation.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "devicemetricobservation", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaire-example-bluebook.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "bb", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-observation-relationshiptypes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "observation-relationshiptypes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0306.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0306", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-surface.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "surface", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/bodyweight.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "bodyweight", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-clinical-findings.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "clinical-findings", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/plandefinition-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/familymemberhistory-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = FamilyMemberHistoryHelper.fromJson(json);
  	 System.out.println("testing FamilyMemberHistory " + count++);
  	 familymemberhistoryDao.create((FamilyMemberHistory)result);
  	 result = familymemberhistoryDao.find(((FamilyMemberHistory)result).getId());
  	 assertEquals("Expect ", "father", ((FamilyMemberHistory)result).getId());
  	 familymemberhistoryDao.delete( (FamilyMemberHistory)result);

  	 inputFile = "../../fhir-data/examples-json/operation-composition-document.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Composition-document", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-auditevent-anonymized.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "auditevent-Anonymized", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/operation-capabilitystatement-conforms.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "CapabilityStatement-conforms", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-entformula-additive.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "entformula-additive", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/clinicalimpression.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ClinicalImpression", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-elementdefinition-bestpractice.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "elementdefinition-bestpractice", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/linkage.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Linkage", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-humanname-own-prefix.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "humanname-own-prefix", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/audit-event-example-pixQuery.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AuditEventHelper.fromJson(json);
  	 System.out.println("testing AuditEvent " + count++);
  	 auditeventDao.create((AuditEvent)result);
  	 result = auditeventDao.find(((AuditEvent)result).getId());
  	 assertEquals("Expect ", "example-pixQuery", ((AuditEvent)result).getId());
  	 auditeventDao.delete( (AuditEvent)result);

  	 inputFile = "../../fhir-data/examples-json/careteam.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "CareTeam", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/claim-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example-pgx.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "example-pgx", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/cm-medication-statement-status-v3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-medication-statement-status-v3", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/resource.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Resource", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/coord-0base-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "coord-0-base", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-ex-diagnosistype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "ex-diagnosistype", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-missing-tooth-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "missing-tooth-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-list-item-flag.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "list-item-flag", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-participationstatus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "participationstatus", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-bodysite-relative-location.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "bodysite-relative-location", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-translation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "translation", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/metadataresource.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "MetadataResource", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/researchsubject.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ResearchSubject", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0328.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0328", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/visionprescription-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = VisionPrescriptionHelper.fromJson(json);
  	 System.out.println("testing VisionPrescription " + count++);
  	 visionprescriptionDao.create((VisionPrescription)result);
  	 result = visionprescriptionDao.find(((VisionPrescription)result).getId());
  	 assertEquals("Expect ", "33123", ((VisionPrescription)result).getId());
  	 visionprescriptionDao.delete( (VisionPrescription)result);

  	 inputFile = "../../fhir-data/examples-json/organization-example-mmanu.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OrganizationHelper.fromJson(json);
  	 System.out.println("testing Organization " + count++);
  	 organizationDao.create((Organization)result);
  	 result = organizationDao.find(((Organization)result).getId());
  	 assertEquals("Expect ", "mmanu", ((Organization)result).getId());
  	 organizationDao.delete( (Organization)result);

  	 inputFile = "../../fhir-data/examples-json/careplan-example-f202-malignancy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CarePlanHelper.fromJson(json);
  	 System.out.println("testing CarePlan " + count++);
  	 careplanDao.create((CarePlan)result);
  	 result = careplanDao.find(((CarePlan)result).getId());
  	 assertEquals("Expect ", "f202", ((CarePlan)result).getId());
  	 careplanDao.delete( (CarePlan)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticsdnaregionname.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsDNARegionName", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-testscript-operation-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "testscript-operation-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/sequence-graphic-example-2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "graphic-example-2", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-goal-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "goal-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/immunizationrecommendation-target-disease-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ImmunizationRecommendationHelper.fromJson(json);
  	 System.out.println("testing ImmunizationRecommendation " + count++);
  	 immunizationrecommendationDao.create((ImmunizationRecommendation)result);
  	 result = immunizationrecommendationDao.find(((ImmunizationRecommendation)result).getId());
  	 assertEquals("Expect ", "example", ((ImmunizationRecommendation)result).getId());
  	 immunizationrecommendationDao.delete( (ImmunizationRecommendation)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example-biopsy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "biopsy", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/conceptmap-example-specimen-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "102", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/supplyrequest.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "SupplyRequest", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/immunizationrecommendation.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ImmunizationRecommendation", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-operation-parameter-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "operation-parameter-use", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/bodysite-example-skin-patch.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BodySiteHelper.fromJson(json);
  	 System.out.println("testing BodySite " + count++);
  	 bodysiteDao.create((BodySite)result);
  	 result = bodysiteDao.find(((BodySite)result).getId());
  	 assertEquals("Expect ", "skin-patch", ((BodySite)result).getId());
  	 bodysiteDao.delete( (BodySite)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-digital-media-subtype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "digital-media-subtype", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/healthcareservice-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-audit-entity-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "audit-entity-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-questionnaire-usage-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "questionnaire-usage-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/identifier.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Identifier", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-example-yesnodontknow.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "yesnodontknow", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-vision.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "660150", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-goal-relationship-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "goal-relationship-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-variant-state.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "variant-state", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedure-schedule.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedure-schedule", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-activity-definition-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "activity-definition-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-measure-data-usage.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "measure-data-usage", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-issue-severity.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "issue-severity", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-request-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "request-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/familymemberhistory-genetic.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "familymemberhistory-genetic", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-measure-scoring.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "measure-scoring", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-http-operations.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "http-operations", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/meta.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Meta", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticsaminoacidchangetype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsAminoAcidChangeType", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-allergyintolerance-duration.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "allergyintolerance-duration", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-example-inactive.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "inactive", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-food-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "food-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0322.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0322", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-TPMT-haplotype-one.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "example-TPMT-haplotype-one", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-response-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "response-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/structuredefinition.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "StructureDefinition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-communication-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "communication-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/enrollmentresponse.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "EnrollmentResponse", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-name-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "name-use", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/endpoint-example-wadors.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EndpointHelper.fromJson(json);
  	 System.out.println("testing Endpoint " + count++);
  	 endpointDao.create((Endpoint)result);
  	 result = endpointDao.find(((Endpoint)result).getId());
  	 assertEquals("Expect ", "example-wadors", ((Endpoint)result).getId());
  	 endpointDao.delete( (Endpoint)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaireresponse-example-f201-lifelines.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireResponseHelper.fromJson(json);
  	 System.out.println("testing QuestionnaireResponse " + count++);
  	 questionnaireresponseDao.create((QuestionnaireResponse)result);
  	 result = questionnaireresponseDao.find(((QuestionnaireResponse)result).getId());
  	 assertEquals("Expect ", "f201", ((QuestionnaireResponse)result).getId());
  	 questionnaireresponseDao.delete( (QuestionnaireResponse)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-transaction-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "transaction-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-service-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "service-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-message-reason-encounter.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "message-reason-encounter", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/substance-example-silver-nitrate-product.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SubstanceHelper.fromJson(json);
  	 System.out.println("testing Substance " + count++);
  	 substanceDao.create((Substance)result);
  	 result = substanceDao.find(((Substance)result).getId());
  	 assertEquals("Expect ", "f204", ((Substance)result).getId());
  	 substanceDao.delete( (Substance)result);

  	 inputFile = "../../fhir-data/examples-json/allergyintolerance-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AllergyIntoleranceHelper.fromJson(json);
  	 System.out.println("testing AllergyIntolerance " + count++);
  	 allergyintoleranceDao.create((AllergyIntolerance)result);
  	 result = allergyintoleranceDao.find(((AllergyIntolerance)result).getId());
  	 assertEquals("Expect ", "example", ((AllergyIntolerance)result).getId());
  	 allergyintoleranceDao.delete( (AllergyIntolerance)result);

  	 inputFile = "../../fhir-data/examples-json/consent-example-pkb.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConsentHelper.fromJson(json);
  	 System.out.println("testing Consent " + count++);
  	 consentDao.create((Consent)result);
  	 result = consentDao.find(((Consent)result).getId());
  	 assertEquals("Expect ", "consent-example-pkb", ((Consent)result).getId());
  	 consentDao.delete( (Consent)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedure-targetbodysite.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedure-targetBodySite", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-relatedperson-relationshiptype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "relatedperson-relationshiptype", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/activitydefinition-order-serum-zika-dengue-virus-igm.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ActivityDefinitionHelper.fromJson(json);
  	 System.out.println("testing ActivityDefinition " + count++);
  	 activitydefinitionDao.create((ActivityDefinition)result);
  	 result = activitydefinitionDao.find(((ActivityDefinition)result).getId());
  	 assertEquals("Expect ", "serum-zika-dengue-virus-igm", ((ActivityDefinition)result).getId());
  	 activitydefinitionDao.delete( (ActivityDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/plandefinition-protocol-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PlanDefinitionHelper.fromJson(json);
  	 System.out.println("testing PlanDefinition " + count++);
  	 plandefinitionDao.create((PlanDefinition)result);
  	 result = plandefinitionDao.find(((PlanDefinition)result).getId());
  	 assertEquals("Expect ", "protocol-example", ((PlanDefinition)result).getId());
  	 plandefinitionDao.delete( (PlanDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-sourcereference.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-sourceReference", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder-example-infantenteral.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NutritionOrderHelper.fromJson(json);
  	 System.out.println("testing NutritionOrder " + count++);
  	 nutritionorderDao.create((NutritionOrder)result);
  	 result = nutritionorderDao.find(((NutritionOrder)result).getId());
  	 assertEquals("Expect ", "infantenteral", ((NutritionOrder)result).getId());
  	 nutritionorderDao.delete( (NutritionOrder)result);

  	 inputFile = "../../fhir-data/examples-json/bodylength-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/processrequest-example-reverse.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcessRequestHelper.fromJson(json);
  	 System.out.println("testing ProcessRequest " + count++);
  	 processrequestDao.create((ProcessRequest)result);
  	 result = processrequestDao.find(((ProcessRequest)result).getId());
  	 assertEquals("Expect ", "87654", ((ProcessRequest)result).getId());
  	 processrequestDao.delete( (ProcessRequest)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0330.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0330", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/library-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/expansionprofile-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/group.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Group", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationstatement.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "MedicationStatement", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-definition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-definition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-dosetype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "pharmacy-core-doseType", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-humanname-partner-prefix.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "humanname-partner-prefix", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-patient-adoptioninfo.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "patient-adoptionInfo", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-dataelement-sdcobjectclassproperty.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "dataelement-sdcobjectclassproperty", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0311.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0311", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/processrequest-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-consent-state-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "consent-state-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/testscript-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/provenance-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-questionnaire-answers-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "questionnaire-answers-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-supply-item.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "supply-item", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/pcd-example-notThem.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ContractHelper.fromJson(json);
  	 System.out.println("testing Contract " + count++);
  	 contractDao.create((Contract)result);
  	 result = contractDao.find(((Contract)result).getId());
  	 assertEquals("Expect ", "pcd-example-notThem", ((Contract)result).getId());
  	 contractDao.delete( (Contract)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-optionexclusive.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-optionExclusive", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-research-study-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "research-study-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-flag-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "flag-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-contributor-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "contributor-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-device-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "device-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-composite-measure-scoring.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "composite-measure-scoring", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/practitionerrole.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "PractitionerRole", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/testscript-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = TestScriptHelper.fromJson(json);
  	 System.out.println("testing TestScript " + count++);
  	 testscriptDao.create((TestScript)result);
  	 result = testscriptDao.find(((TestScript)result).getId());
  	 assertEquals("Expect ", "testscript-example", ((TestScript)result).getId());
  	 testscriptDao.delete( (TestScript)result);

  	 inputFile = "../../fhir-data/examples-json/extension-careplan-activity-title.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "careplan-activity-title", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/relatedartifact.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "RelatedArtifact", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-substance-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "substance-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-flag-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "flag-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/device-example-pacemaker.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DeviceHelper.fromJson(json);
  	 System.out.println("testing Device " + count++);
  	 deviceDao.create((Device)result);
  	 result = deviceDao.find(((Device)result).getId());
  	 assertEquals("Expect ", "example-pacemaker", ((Device)result).getId());
  	 deviceDao.delete( (Device)result);

  	 inputFile = "../../fhir-data/examples-json/researchstudy-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ResearchStudyHelper.fromJson(json);
  	 System.out.println("testing ResearchStudy " + count++);
  	 researchstudyDao.create((ResearchStudy)result);
  	 result = researchstudyDao.find(((ResearchStudy)result).getId());
  	 assertEquals("Expect ", "example", ((ResearchStudy)result).getId());
  	 researchstudyDao.delete( (ResearchStudy)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-genetics.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedurerequest-genetics", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-operational-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "operational-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/patient-example-xcda.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "xcda", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-supplydelivery-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "supplydelivery-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-specimen-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "specimen-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-phenotype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "example-phenotype", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/provenance-example-biocompute-object.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProvenanceHelper.fromJson(json);
  	 System.out.println("testing Provenance " + count++);
  	 provenanceDao.create((Provenance)result);
  	 result = provenanceDao.find(((Provenance)result).getId());
  	 assertEquals("Expect ", "example-biocompute-object", ((Provenance)result).getId());
  	 provenanceDao.delete( (Provenance)result);

  	 inputFile = "../../fhir-data/examples-json/extension-encounter-associatedencounter.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "encounter-associatedEncounter", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-risk-probability.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "risk-probability", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-haplotype1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "example-haplotype1", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-list-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "list-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/contract.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Contract", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-11179-de-effective-period.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "11179-de-effective-period", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-subsumes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-subsumes", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-message-events.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "message-events", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-head-circumference.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "head-circumference", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-doc-classcodes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "doc-classcodes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-vaccination-protocol-dose-status-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "vaccination-protocol-dose-status-reason", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-event-reasoncode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "event-reasonCode", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/markdown.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "markdown", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/encounter-example-emerg.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EncounterHelper.fromJson(json);
  	 System.out.println("testing Encounter " + count++);
  	 encounterDao.create((Encounter)result);
  	 result = encounterDao.find(((Encounter)result).getId());
  	 assertEquals("Expect ", "emerg", ((Encounter)result).getId());
  	 encounterDao.delete( (Encounter)result);

  	 inputFile = "../../fhir-data/examples-json/expansionprofile.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ExpansionProfile", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-benefit-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "benefit-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-response-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "response-code", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0316.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0316", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-10minute-apgar-score.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "10minute-apgar-score", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-action-selection-behavior.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "action-selection-behavior", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-nutrition-request-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "nutrition-request-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-geneticsanalysis.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "DiagnosticReport-geneticsAnalysis", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/episodeofcare-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EpisodeOfCareHelper.fromJson(json);
  	 System.out.println("testing EpisodeOfCare " + count++);
  	 episodeofcareDao.create((EpisodeOfCare)result);
  	 result = episodeofcareDao.find(((EpisodeOfCare)result).getId());
  	 assertEquals("Expect ", "example", ((EpisodeOfCare)result).getId());
  	 episodeofcareDao.delete( (EpisodeOfCare)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-measure-scoring.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "measure-scoring", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-dispense-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-dispense-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-linkage-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "linkage-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-map-source-list-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "map-source-list-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-audit-event-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "audit-event-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/simplequantity.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "SimpleQuantity", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/chargeitem-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ChargeItemHelper.fromJson(json);
  	 System.out.println("testing ChargeItem " + count++);
  	 chargeitemDao.create((ChargeItem)result);
  	 result = chargeitemDao.find(((ChargeItem)result).getId());
  	 assertEquals("Expect ", "example", ((ChargeItem)result).getId());
  	 chargeitemDao.delete( (ChargeItem)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-bloodpressure.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "blood-pressure", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-adverse-event-outcome.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "adverse-event-outcome", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/sequence-example-TPMT-two.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "example-TPMT-two", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-consent-content-class.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "consent-content-class", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/library-fhir-helpers.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LibraryHelper.fromJson(json);
  	 System.out.println("testing Library " + count++);
  	 libraryDao.create((Library)result);
  	 result = libraryDao.find(((Library)result).getId());
  	 assertEquals("Expect ", "library-fhir-helpers", ((Library)result).getId());
  	 libraryDao.delete( (Library)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-resource-aggregation-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "resource-aggregation-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/cholesterol.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "cholesterol", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-list-order.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "list-order", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-contract-term-subtype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "contract-term-subtype", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-adjudication.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "adjudication", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-list-item-flag.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "list-item-flag", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/bundle-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "bundle-example", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-search-modifier-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "search-modifier-code", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-repository-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "repository-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example-f002-lung.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "f002", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-vaccine-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "vaccine-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-example-f006-rvdb.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerHelper.fromJson(json);
  	 System.out.println("testing Practitioner " + count++);
  	 practitionerDao.create((Practitioner)result);
  	 result = practitionerDao.find(((Practitioner)result).getId());
  	 assertEquals("Expect ", "f006", ((Practitioner)result).getId());
  	 practitionerDao.delete( (Practitioner)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-http-operations.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "http-operations", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-wg.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-wg", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-dicom-audit-lifecycle.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "dicom-audit-lifecycle", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-respiratory-rate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "respiratory-rate", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/extension-encounter-modeofarrival.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "encounter-modeOfArrival", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-age-units.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "age-units", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/audit-event-example-vread.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AuditEventHelper.fromJson(json);
  	 System.out.println("testing AuditEvent " + count++);
  	 auditeventDao.create((AuditEvent)result);
  	 result = auditeventDao.find(((AuditEvent)result).getId());
  	 assertEquals("Expect ", "example-rest", ((AuditEvent)result).getId());
  	 auditeventDao.delete( (AuditEvent)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-othername.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-otherName", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/list-example-familyhistory-f201-roel.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = FHIRListHelper.fromJson(json);
  	 System.out.println("testing FHIRList " + count++);
  	 fhirlistDao.create((FHIRList)result);
  	 result = fhirlistDao.find(((FHIRList)result).getId());
  	 assertEquals("Expect ", "f201", ((FHIRList)result).getId());
  	 fhirlistDao.delete( (FHIRList)result);

  	 inputFile = "../../fhir-data/examples-json/elementdefinition-11179-DataElement-objectClass.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "elementdefinition-11179-DataElement-objectClass", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/sequence-example-fda-comparisons.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "fda-vcf-comparison", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-implant-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "implant-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-claim-careteamrole.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "claim-careteamrole", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example-ob.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "ob", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/observation-genetic-Observation-dna-variant.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "observation-genetic-Observation-dna-variant", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-jurisdiction.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "jurisdiction", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example-appendectomy-narrative.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "appendectomy-narrative", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-encounter-special-arrangements.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "encounter-special-arrangements", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-goal-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "goal-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-toocostly.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-toocostly", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaire-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "3141", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/claim.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Claim", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/operation-plandefinition-data-requirements.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "PlanDefinition-data-requirements", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-metric-calibration-state.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "metric-calibration-state", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/message-response-link.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "3a0707d3-549e-4467-b8b8-5a2ab3800efe", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/condition-example-stroke.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConditionHelper.fromJson(json);
  	 System.out.println("testing Condition " + count++);
  	 conditionDao.create((Condition)result);
  	 result = conditionDao.find(((Condition)result).getId());
  	 assertEquals("Expect ", "stroke", ((Condition)result).getId());
  	 conditionDao.delete( (Condition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0315.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0315", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-example-xcda1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerHelper.fromJson(json);
  	 System.out.println("testing Practitioner " + count++);
  	 practitionerDao.create((Practitioner)result);
  	 result = practitionerDao.find(((Practitioner)result).getId());
  	 assertEquals("Expect ", "xcda1", ((Practitioner)result).getId());
  	 practitionerDao.delete( (Practitioner)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-extension-context.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "extension-context", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/consent-example-Out.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConsentHelper.fromJson(json);
  	 System.out.println("testing Consent " + count++);
  	 consentDao.create((Consent)result);
  	 result = consentDao.find(((Consent)result).getId());
  	 assertEquals("Expect ", "consent-example-Out", ((Consent)result).getId());
  	 consentDao.delete( (Consent)result);

  	 inputFile = "../../fhir-data/examples-json/schedule-provider-location2-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ScheduleHelper.fromJson(json);
  	 System.out.println("testing Schedule " + count++);
  	 scheduleDao.create((Schedule)result);
  	 result = scheduleDao.find(((Schedule)result).getId());
  	 assertEquals("Expect ", "exampleloc2", ((Schedule)result).getId());
  	 scheduleDao.delete( (Schedule)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-document-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "document-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-openehr-management.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "openEHR-management", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-claim-informationcategory.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "claim-informationcategory", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/condition-example-f001-heart.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConditionHelper.fromJson(json);
  	 System.out.println("testing Condition " + count++);
  	 conditionDao.create((Condition)result);
  	 result = conditionDao.find(((Condition)result).getId());
  	 assertEquals("Expect ", "f001", ((Condition)result).getId());
  	 conditionDao.delete( (Condition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-comment.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-comment", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-resource-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "resource-types", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0331.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0331", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/condition-example-f203-sepsis.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConditionHelper.fromJson(json);
  	 System.out.println("testing Condition " + count++);
  	 conditionDao.create((Condition)result);
  	 result = conditionDao.find(((Condition)result).getId());
  	 assertEquals("Expect ", "f203", ((Condition)result).getId());
  	 conditionDao.delete( (Condition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-service-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "service-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/conceptmap.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ConceptMap", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/deviceusestatement-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/coverage-example-2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CoverageHelper.fromJson(json);
  	 System.out.println("testing Coverage " + count++);
  	 coverageDao.create((Coverage)result);
  	 result = coverageDao.find(((Coverage)result).getId());
  	 assertEquals("Expect ", "7546D", ((Coverage)result).getId());
  	 coverageDao.delete( (Coverage)result);

  	 inputFile = "../../fhir-data/examples-json/paymentnotice-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PaymentNoticeHelper.fromJson(json);
  	 System.out.println("testing PaymentNotice " + count++);
  	 paymentnoticeDao.create((PaymentNotice)result);
  	 result = paymentnoticeDao.find(((PaymentNotice)result).getId());
  	 assertEquals("Expect ", "77654", ((PaymentNotice)result).getId());
  	 paymentnoticeDao.delete( (PaymentNotice)result);

  	 inputFile = "../../fhir-data/examples-json/string.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "string", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-communication-not-done-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "communication-not-done-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/activitydefinition-administer-zika-virus-exposure-assessment.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ActivityDefinitionHelper.fromJson(json);
  	 System.out.println("testing ActivityDefinition " + count++);
  	 activitydefinitionDao.create((ActivityDefinition)result);
  	 result = activitydefinitionDao.find(((ActivityDefinition)result).getId());
  	 assertEquals("Expect ", "administer-zika-virus-exposure-assessment", ((ActivityDefinition)result).getId());
  	 activitydefinitionDao.delete( (ActivityDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0319.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0319", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-claim-subtype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "claim-subtype", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-locationperformed.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "diagnosticReport-locationPerformed", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-patient-clinicaltrial.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "patient-clinicalTrial", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/cm-document-reference-status-v3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-document-reference-status-v3", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/devicecomponent-example-prodspec.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DeviceComponentHelper.fromJson(json);
  	 System.out.println("testing DeviceComponent " + count++);
  	 devicecomponentDao.create((DeviceComponent)result);
  	 result = devicecomponentDao.find(((DeviceComponent)result).getId());
  	 assertEquals("Expect ", "example-prodspec", ((DeviceComponent)result).getId());
  	 devicecomponentDao.delete( (DeviceComponent)result);

  	 inputFile = "../../fhir-data/examples-json/detectedissue-example-dup.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DetectedIssueHelper.fromJson(json);
  	 System.out.println("testing DetectedIssue " + count++);
  	 detectedissueDao.create((DetectedIssue)result);
  	 result = detectedissueDao.find(((DetectedIssue)result).getId());
  	 assertEquals("Expect ", "duplicate", ((DetectedIssue)result).getId());
  	 detectedissueDao.delete( (DetectedIssue)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-marital-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "marital-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder-example-texture-modified.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NutritionOrderHelper.fromJson(json);
  	 System.out.println("testing NutritionOrder " + count++);
  	 nutritionorderDao.create((NutritionOrder)result);
  	 result = nutritionorderDao.find(((NutritionOrder)result).getId());
  	 assertEquals("Expect ", "texturemodified", ((NutritionOrder)result).getId());
  	 nutritionorderDao.delete( (NutritionOrder)result);

  	 inputFile = "../../fhir-data/examples-json/extension-event-performerrole.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "event-performerRole", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/enrollmentresponse-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/devicemetricobservation-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/datetime.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "dateTime", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/flag-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-search-xpath-usage.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "search-xpath-usage", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-type-derivation-rule.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "type-derivation-rule", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-warning.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-warning", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-trusted-expansion.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-trusted-expansion", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/coverage-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-additionalmaterials.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "additionalmaterials", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-adverse-event-causality-assess.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "adverse-event-causality-assess", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-tel-address.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-TEL-address", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/auditevent-example-disclosure.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AuditEventHelper.fromJson(json);
  	 System.out.println("testing AuditEvent " + count++);
  	 auditeventDao.create((AuditEvent)result);
  	 result = auditeventDao.find(((AuditEvent)result).getId());
  	 assertEquals("Expect ", "example-disclosure", ((AuditEvent)result).getId());
  	 auditeventDao.delete( (AuditEvent)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-encounter-special-arrangements.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "encounter-special-arrangements", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-map-context-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "map-context-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/operation-conceptmap-closure.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "ConceptMap-closure", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-detectedissue-severity.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "detectedissue-severity", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-communicationrequest-reasonrejected.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "communicationrequest-reasonRejected", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);
  	System.out.println("Total tests .. " + count);
  }
  @Test
  public void test620() throws Exception {
  	 inputFile = "../../fhir-data/examples-json/operation-codesystem-compose.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "CodeSystem-compose", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaire.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Questionnaire", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/namingsystem-example-id.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NamingSystemHelper.fromJson(json);
  	 System.out.println("testing NamingSystem " + count++);
  	 namingsystemDao.create((NamingSystem)result);
  	 result = namingsystemDao.find(((NamingSystem)result).getId());
  	 assertEquals("Expect ", "example-id", ((NamingSystem)result).getId());
  	 namingsystemDao.delete( (NamingSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0333.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0333", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-surface.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "surface", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/observation-genetic-Observation-gene-dnavariant.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "observation-genetic-Observation-gene-dnavariant", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-sequence-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "sequence-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-issue-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "issue-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-minvalue.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "minValue", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-chromosome-human.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "chromosome-human", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-goal-status-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "goal-status-reason", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-bodyposition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-bodyPosition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-timing-exact.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "timing-exact", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-service-referral-method.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "service-referral-method", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-instance-availability.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "instance-availability", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-report-participant-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "report-participant-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-medication-statement-taken.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "medication-statement-taken", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-geolocation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "geolocation", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-verification.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-verification", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-object-role.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "object-role", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-subscription-tag.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "subscription-tag", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/heartrate.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "heartrate", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-f206-staphylococcus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "f206", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/testreport-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-encounter-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "encounter-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/coverage-example-selfpay.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CoverageHelper.fromJson(json);
  	 System.out.println("testing Coverage " + count++);
  	 coverageDao.create((Coverage)result);
  	 result = coverageDao.find(((Coverage)result).getId());
  	 assertEquals("Expect ", "SP1234", ((Coverage)result).getId());
  	 coverageDao.delete( (Coverage)result);

  	 inputFile = "../../fhir-data/examples-json/referralrequest.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ReferralRequest", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-doc-section-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "doc-section-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0307.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0307", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/operation-resource-meta-add.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Resource-meta-add", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-operation-kind.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "operation-kind", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-care-team-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "care-team-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-network-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "network-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-object-lifecycle-events.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "object-lifecycle-events", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example-ambulation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "ambulation", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-targetstructuremap.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-targetStructureMap", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-patient-birthtime.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "patient-birthTime", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/cm-medication-dispense-status-v3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-medication-dispense-status-v3", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/observation-genetic-Observation-amino-acid-change.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "observation-genetic-Observation-amino-acid-change", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/operation-valueset-expand.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "ValueSet-expand", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-messageheader-response-request.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "messageheader-response-request", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-observation-statistics.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "observation-statistics", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/appointment-example2doctors.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AppointmentHelper.fromJson(json);
  	 System.out.println("testing Appointment " + count++);
  	 appointmentDao.create((Appointment)result);
  	 result = appointmentDao.find(((Appointment)result).getId());
  	 assertEquals("Expect ", "2docs", ((Appointment)result).getId());
  	 appointmentDao.delete( (Appointment)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-claim-modifiers.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "claim-modifiers", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-coverage-selfpay.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "coverage-selfpay", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-allerg-intol-substance-exp-risk.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "allerg-intol-substance-exp-risk", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0313.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0313", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/explanationofbenefit-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ExplanationOfBenefitHelper.fromJson(json);
  	 System.out.println("testing ExplanationOfBenefit " + count++);
  	 explanationofbenefitDao.create((ExplanationOfBenefit)result);
  	 result = explanationofbenefitDao.find(((ExplanationOfBenefit)result).getId());
  	 assertEquals("Expect ", "EB3500", ((ExplanationOfBenefit)result).getId());
  	 explanationofbenefitDao.delete( (ExplanationOfBenefit)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-composition-attestation-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "composition-attestation-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-oral-average.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "100151", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/observation-genetics.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-genetics", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/positiveint.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "positiveInt", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-property-representation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "property-representation", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/endpoint-example-iid.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EndpointHelper.fromJson(json);
  	 System.out.println("testing Endpoint " + count++);
  	 endpointDao.create((Endpoint)result);
  	 result = endpointDao.find(((Endpoint)result).getId());
  	 assertEquals("Expect ", "example-iid", ((Endpoint)result).getId());
  	 endpointDao.delete( (Endpoint)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-benefit-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "benefit-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-action-participant-role.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "action-participant-role", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/list-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-co-value.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-CO-value", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/hdlcholesterol-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/location-example-ukpharmacy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LocationHelper.fromJson(json);
  	 System.out.println("testing Location " + count++);
  	 locationDao.create((Location)result);
  	 result = locationDao.find(((Location)result).getId());
  	 assertEquals("Expect ", "ukp", ((Location)result).getId());
  	 locationDao.delete( (Location)result);

  	 inputFile = "../../fhir-data/examples-json/basic-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/audit-event-example-media.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AuditEventHelper.fromJson(json);
  	 System.out.println("testing AuditEvent " + count++);
  	 auditeventDao.create((AuditEvent)result);
  	 result = auditeventDao.find(((AuditEvent)result).getId());
  	 assertEquals("Expect ", "example-media", ((AuditEvent)result).getId());
  	 auditeventDao.delete( (AuditEvent)result);

  	 inputFile = "../../fhir-data/examples-json/oxygensat.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "oxygensat", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/measure-composite-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MeasureHelper.fromJson(json);
  	 System.out.println("testing Measure " + count++);
  	 measureDao.create((Measure)result);
  	 result = measureDao.find(((Measure)result).getId());
  	 assertEquals("Expect ", "composite-example", ((Measure)result).getId());
  	 measureDao.delete( (Measure)result);

  	 inputFile = "../../fhir-data/examples-json/extension-data-absent-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "data-absent-reason", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/flag.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Flag", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-bloodpressure-cancel.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "blood-pressure-cancel", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-statement-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-statement-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-security-role-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "security-role-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-report-status-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "report-status-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedurerequest-reasonrefused.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedurerequest-reasonRefused", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/riskassessment-example-cardiac.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = RiskAssessmentHelper.fromJson(json);
  	 System.out.println("testing RiskAssessment " + count++);
  	 riskassessmentDao.create((RiskAssessment)result);
  	 result = riskassessmentDao.find(((RiskAssessment)result).getId());
  	 assertEquals("Expect ", "cardiac", ((RiskAssessment)result).getId());
  	 riskassessmentDao.delete( (RiskAssessment)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-ucum-common.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "ucum-common", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/plandefinition-exclusive-breastfeeding-intervention-01.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PlanDefinitionHelper.fromJson(json);
  	 System.out.println("testing PlanDefinition " + count++);
  	 plandefinitionDao.create((PlanDefinition)result);
  	 result = plandefinitionDao.find(((PlanDefinition)result).getId());
  	 assertEquals("Expect ", "exclusive-breastfeeding-intervention-01", ((PlanDefinition)result).getId());
  	 plandefinitionDao.delete( (PlanDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-encounter-location-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "encounter-location-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/activitydefinition-medicationorder-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ActivityDefinitionHelper.fromJson(json);
  	 System.out.println("testing ActivityDefinition " + count++);
  	 activitydefinitionDao.create((ActivityDefinition)result);
  	 result = activitydefinitionDao.find(((ActivityDefinition)result).getId());
  	 assertEquals("Expect ", "citalopramPrescription", ((ActivityDefinition)result).getId());
  	 activitydefinitionDao.delete( (ActivityDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-audit-event-outcome.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "audit-event-outcome", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-condition-clinical.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "condition-clinical", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/appointment-example-request.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AppointmentHelper.fromJson(json);
  	 System.out.println("testing Appointment " + count++);
  	 appointmentDao.create((Appointment)result);
  	 result = appointmentDao.find(((Appointment)result).getId());
  	 assertEquals("Expect ", "examplereq", ((Appointment)result).getId());
  	 appointmentDao.delete( (Appointment)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-metric-calibration-state.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "metric-calibration-state", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0326.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0326", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/relatedperson-example-f001-sarah.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = RelatedPersonHelper.fromJson(json);
  	 System.out.println("testing RelatedPerson " + count++);
  	 relatedpersonDao.create((RelatedPerson)result);
  	 result = relatedpersonDao.find(((RelatedPerson)result).getId());
  	 assertEquals("Expect ", "f001", ((RelatedPerson)result).getId());
  	 relatedpersonDao.delete( (RelatedPerson)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0303.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0303", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/immunizationrecommendation-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ImmunizationRecommendationHelper.fromJson(json);
  	 System.out.println("testing ImmunizationRecommendation " + count++);
  	 immunizationrecommendationDao.create((ImmunizationRecommendation)result);
  	 result = immunizationrecommendationDao.find(((ImmunizationRecommendation)result).getId());
  	 assertEquals("Expect ", "example", ((ImmunizationRecommendation)result).getId());
  	 immunizationrecommendationDao.delete( (ImmunizationRecommendation)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "MedicationAdministration", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-immunization-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "immunization-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/bodysite.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "BodySite", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-deliveryinstallationtype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-deliveryInstallationType", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticsinterpretation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsInterpretation", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-metric-calibration-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "metric-calibration-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/xds-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "xds", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-genetics-3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "example-genetics-3", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/profiles-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "types", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/operation-servicedefinition-data-requirements.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "ServiceDefinition-data-requirements", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-pharmacy-compound.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "760152", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedurerequest-authorizedby.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedurerequest-authorizedBy", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-action-cardinality-behavior.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "action-cardinality-behavior", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-capabilitystatement-supported-system.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "capabilitystatement-supported-system", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-allergy-intolerance-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "allergy-intolerance-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-report-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "report-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-location-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "location-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-address-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "address-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-allergy-intolerance-criticality.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "allergy-intolerance-criticality", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/episodeofcare.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "EpisodeOfCare", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-claim-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "claim-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-reason-medication-not-taken-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "reason-medication-not-taken-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/bodysite-example-fetus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BodySiteHelper.fromJson(json);
  	 System.out.println("testing BodySite " + count++);
  	 bodysiteDao.create((BodySite)result);
  	 result = bodysiteDao.find(((BodySite)result).getId());
  	 assertEquals("Expect ", "fetus", ((BodySite)result).getId());
  	 bodysiteDao.delete( (BodySite)result);

  	 inputFile = "../../fhir-data/examples-json/appointmentresponse-example-req.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AppointmentResponseHelper.fromJson(json);
  	 System.out.println("testing AppointmentResponse " + count++);
  	 appointmentresponseDao.create((AppointmentResponse)result);
  	 result = appointmentresponseDao.find(((AppointmentResponse)result).getId());
  	 assertEquals("Expect ", "exampleresp", ((AppointmentResponse)result).getId());
  	 appointmentresponseDao.delete( (AppointmentResponse)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-encounter-discharge-disposition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "encounter-discharge-disposition", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-deliveryaddressline.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-deliveryAddressLine", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-definition-topic.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "definition-topic", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-languages.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "languages", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-contributor-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "contributor-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/contract-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ContractHelper.fromJson(json);
  	 System.out.println("testing Contract " + count++);
  	 contractDao.create((Contract)result);
  	 result = contractDao.find(((Contract)result).getId());
  	 assertEquals("Expect ", "C-123", ((Contract)result).getId());
  	 contractDao.delete( (Contract)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-example-f203-jvg.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerHelper.fromJson(json);
  	 System.out.println("testing Practitioner " + count++);
  	 practitionerDao.create((Practitioner)result);
  	 result = practitionerDao.find(((Practitioner)result).getId());
  	 assertEquals("Expect ", "f203", ((Practitioner)result).getId());
  	 practitionerDao.delete( (Practitioner)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-ancestor.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-ancestor", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationstatementexample3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationStatementHelper.fromJson(json);
  	 System.out.println("testing MedicationStatement " + count++);
  	 medicationstatementDao.create((MedicationStatement)result);
  	 result = medicationstatementDao.find(((MedicationStatement)result).getId());
  	 assertEquals("Expect ", "example003", ((MedicationStatement)result).getId());
  	 medicationstatementDao.delete( (MedicationStatement)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-reason-medication-not-given-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "reason-medication-not-given-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-patient-nationality.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "patient-nationality", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-housenumber.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-houseNumber", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-concept-map-equivalence.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "concept-map-equivalence", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-encounter-discharge-disposition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "encounter-discharge-disposition", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-payment-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "payment-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/sequence-graphic-example-1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "graphic-example-1", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-practitioner-role.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "practitioner-role", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-contract-term-subtype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "contract-term-subtype", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-rendering-stylesensitive.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "rendering-styleSensitive", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/riskassessment-example-prognosis.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = RiskAssessmentHelper.fromJson(json);
  	 System.out.println("testing RiskAssessment " + count++);
  	 riskassessmentDao.create((RiskAssessment)result);
  	 result = riskassessmentDao.find(((RiskAssessment)result).getId());
  	 assertEquals("Expect ", "prognosis", ((RiskAssessment)result).getId());
  	 riskassessmentDao.delete( (RiskAssessment)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-history-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "history-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-resource-type-link.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "resource-type-link", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-service-modifiers.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "service-modifiers", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-measure-population.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "measure-population", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/familymemberhistory.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "FamilyMemberHistory", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/humanname.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "HumanName", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-regex.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "regex", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-contract-actorrole.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "contract-actorrole", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-form-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-form-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/testscript-example-update.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = TestScriptHelper.fromJson(json);
  	 System.out.println("testing TestScript " + count++);
  	 testscriptDao.create((TestScript)result);
  	 result = testscriptDao.find(((TestScript)result).getId());
  	 assertEquals("Expect ", "testscript-example-update", ((TestScript)result).getId());
  	 testscriptDao.delete( (TestScript)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-demap.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-deMap", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example-colonoscopy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "colonoscopy", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/distance.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Distance", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-action-selection-behavior.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "action-selection-behavior", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-encounter-reasoncancelled.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "encounter-reasonCancelled", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-rateincrement.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "pharmacy-core-rateIncrement", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-action-participant-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "action-participant-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-organization-preferredcontact.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "organization-preferredContact", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/narrative.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Narrative", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0312.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0312", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/sequence-example-pgx-1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "example-pgx-1", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-cqif-evidence-quality.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "cqif-evidence-quality", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-reason-medication-not-given-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "reason-medication-not-given-codes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0305.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0305", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-timing-abbreviation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "timing-abbreviation", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0320.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0320", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/oid.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "oid", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-all-languages.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "all-languages", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-immunization-origin.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "immunization-origin", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/slot-example-unavailable.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SlotHelper.fromJson(json);
  	 System.out.println("testing Slot " + count++);
  	 slotDao.create((Slot)result);
  	 result = slotDao.find(((Slot)result).getId());
  	 assertEquals("Expect ", "3", ((Slot)result).getId());
  	 slotDao.delete( (Slot)result);

  	 inputFile = "../../fhir-data/examples-json/devicecomponent-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DeviceComponentHelper.fromJson(json);
  	 System.out.println("testing DeviceComponent " + count++);
  	 devicecomponentDao.create((DeviceComponent)result);
  	 result = devicecomponentDao.find(((DeviceComponent)result).getId());
  	 assertEquals("Expect ", "example", ((DeviceComponent)result).getId());
  	 devicecomponentDao.delete( (DeviceComponent)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-message-significance-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "message-significance-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-c80-practice-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "c80-practice-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-substance-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "substance-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/contributor.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Contributor", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/address.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Address", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaireresponse-example-ussg-fht-answers.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireResponseHelper.fromJson(json);
  	 System.out.println("testing QuestionnaireResponse " + count++);
  	 questionnaireresponseDao.create((QuestionnaireResponse)result);
  	 result = questionnaireresponseDao.find(((QuestionnaireResponse)result).getId());
  	 assertEquals("Expect ", "ussg-fht-answers", ((QuestionnaireResponse)result).getId());
  	 questionnaireresponseDao.delete( (QuestionnaireResponse)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedurerequest-targetbodysite.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedurerequest-targetBodySite", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-ex-onsettype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "ex-onsettype", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-graph-compartment-rule.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "graph-compartment-rule", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-immunization-recommendation-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "immunization-recommendation-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-doc-typecodes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "doc-typecodes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/patient-example-chinese.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "ch-example", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-codesystem-hierarchy-meaning.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "codesystem-hierarchy-meaning", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-w3c-provenance-activity-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "w3c-provenance-activity-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/account-example-with-guarantor.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AccountHelper.fromJson(json);
  	 System.out.println("testing Account " + count++);
  	 accountDao.create((Account)result);
  	 result = accountDao.find(((Account)result).getId());
  	 assertEquals("Expect ", "ewg", ((Account)result).getId());
  	 accountDao.delete( (Account)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-ucum-units.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "ucum-units", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-sourcereference.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-sourceReference", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/basic-example-narrative.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BasicHelper.fromJson(json);
  	 System.out.println("testing Basic " + count++);
  	 basicDao.create((Basic)result);
  	 result = basicDao.find(((Basic)result).getId());
  	 assertEquals("Expect ", "basic-example-narrative", ((Basic)result).getId());
  	 basicDao.delete( (Basic)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-resource-slicing-rules.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "resource-slicing-rules", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/patient-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "example", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-body-height.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "body-height", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/careplan-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CarePlanHelper.fromJson(json);
  	 System.out.println("testing CarePlan " + count++);
  	 careplanDao.create((CarePlan)result);
  	 result = careplanDao.find(((CarePlan)result).getId());
  	 assertEquals("Expect ", "example", ((CarePlan)result).getId());
  	 careplanDao.delete( (CarePlan)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-match-grade.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "match-grade", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/activitydefinition-supplyrequest-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ActivityDefinitionHelper.fromJson(json);
  	 System.out.println("testing ActivityDefinition " + count++);
  	 activitydefinitionDao.create((ActivityDefinition)result);
  	 result = activitydefinitionDao.find(((ActivityDefinition)result).getId());
  	 assertEquals("Expect ", "blood-tubes-supply", ((ActivityDefinition)result).getId());
  	 activitydefinitionDao.delete( (ActivityDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/bp.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "bp", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/patient-examples-general.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "b248b1b2-1686-4b94-9936-37d7a5f94b51", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-usage-context-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "usage-context-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-message-events.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "message-events", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-dataelement-sdcobjectclass.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "dataelement-sdcobjectclass", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/location-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-type-restful-interaction.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "type-restful-interaction", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-maxoccurs.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-maxOccurs", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-oral-identifier.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "100154", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-adverse-event-outcome.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "adverse-event-outcome", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Practitioner", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-sequence-species.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "sequence-species", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-event-capability-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "event-capability-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaire-example-gcs.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "gcs", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-name-v3-representation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "name-v3-representation", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/plandefinition-options-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PlanDefinitionHelper.fromJson(json);
  	 System.out.println("testing PlanDefinition " + count++);
  	 plandefinitionDao.create((PlanDefinition)result);
  	 result = plandefinitionDao.find(((PlanDefinition)result).getId());
  	 assertEquals("Expect ", "options-example", ((PlanDefinition)result).getId());
  	 plandefinitionDao.delete( (PlanDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0304.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0304", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-identifier-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "identifier-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/practitionerrole-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerRoleHelper.fromJson(json);
  	 System.out.println("testing PractitionerRole " + count++);
  	 practitionerroleDao.create((PractitionerRole)result);
  	 result = practitionerroleDao.find(((PractitionerRole)result).getId());
  	 assertEquals("Expect ", "example", ((PractitionerRole)result).getId());
  	 practitionerroleDao.delete( (PractitionerRole)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-sibling-relationship-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "sibling-relationship-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-condition-clinical.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "condition-clinical", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-geneticsfamilymemberhistory.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "DiagnosticReport-geneticsFamilyMemberHistory", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaireresponse-example-gcs.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireResponseHelper.fromJson(json);
  	 System.out.println("testing QuestionnaireResponse " + count++);
  	 questionnaireresponseDao.create((QuestionnaireResponse)result);
  	 result = questionnaireresponseDao.find(((QuestionnaireResponse)result).getId());
  	 assertEquals("Expect ", "gcs", ((QuestionnaireResponse)result).getId());
  	 questionnaireresponseDao.delete( (QuestionnaireResponse)result);

  	 inputFile = "../../fhir-data/examples-json/extension-location-alias.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "location-alias", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-fips-county.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "fips-county", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-constraint-severity.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "constraint-severity", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/substance-example-f201-dust.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SubstanceHelper.fromJson(json);
  	 System.out.println("testing Substance " + count++);
  	 substanceDao.create((Substance)result);
  	 result = substanceDao.find(((Substance)result).getId());
  	 assertEquals("Expect ", "f201", ((Substance)result).getId());
  	 substanceDao.delete( (Substance)result);

  	 inputFile = "../../fhir-data/examples-json/bundle-response.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "bundle-response", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-procedure-followup.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "procedure-followup", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-benefit-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "benefit-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-adverse-event-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "adverse-event-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-codesystem-hierarchy-meaning.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "codesystem-hierarchy-meaning", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/elementdefinition.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ElementDefinition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/substance-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SubstanceHelper.fromJson(json);
  	 System.out.println("testing Substance " + count++);
  	 substanceDao.create((Substance)result);
  	 result = substanceDao.find(((Substance)result).getId());
  	 assertEquals("Expect ", "example", ((Substance)result).getId());
  	 substanceDao.delete( (Substance)result);

  	 inputFile = "../../fhir-data/examples-json/composition-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-list-empty-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "list-empty-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-adverse-event-causality.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "adverse-event-causality", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/practitionerrole-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/medicationstatement-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-familymemberhistory-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "familymemberhistory-type", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/provenance-consent-signature.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProvenanceHelper.fromJson(json);
  	 System.out.println("testing Provenance " + count++);
  	 provenanceDao.create((Provenance)result);
  	 result = provenanceDao.find(((Provenance)result).getId());
  	 assertEquals("Expect ", "consent-signature", ((Provenance)result).getId());
  	 provenanceDao.delete( (Provenance)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-metric-color.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "metric-color", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/relatedperson.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "RelatedPerson", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/organization-example-lab.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OrganizationHelper.fromJson(json);
  	 System.out.println("testing Organization " + count++);
  	 organizationDao.create((Organization)result);
  	 result = organizationDao.find(((Organization)result).getId());
  	 assertEquals("Expect ", "1832473e-2fe0-452d-abe9-3cdb9879522f", ((Organization)result).getId());
  	 organizationDao.delete( (Organization)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-ex-diagnosistype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "ex-diagnosistype", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-medicationdispense-validityperiod.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "medicationdispense-validityPeriod", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-remittance-outcome.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "remittance-outcome", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/bundle-request-medsallergies.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "bundle-request-medsallergies", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-measure-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "measure-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/encounter-example-f001-heart.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EncounterHelper.fromJson(json);
  	 System.out.println("testing Encounter " + count++);
  	 encounterDao.create((Encounter)result);
  	 result = encounterDao.find(((Encounter)result).getId());
  	 assertEquals("Expect ", "f001", ((Encounter)result).getId());
  	 encounterDao.delete( (Encounter)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedurerequest-geneticsitem.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedurerequest-geneticsItem", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-coding-sctdescid.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "coding-sctdescid", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/usagecontext.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "UsageContext", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0309.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0309", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-fundsreserve.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "fundsreserve", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-genetics.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "diagnosticreport-genetics", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-practitioner-animalspecies.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "practitioner-animalSpecies", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-procedure-progress-status-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "procedure-progress-status-codes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedure-causedby.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedure-causedBy", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-vaccination-protocol-dose-status-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "vaccination-protocol-dose-status-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-goal-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "goal-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/clinicalimpression-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/parameters.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Parameters", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-system.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-system", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/observation-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/messageheader-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/namingsystem-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-measurement-principle.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "measurement-principle", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-manifestation-or-symptom.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "manifestation-or-symptom", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-list-example-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "list-example-codes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-testscript-operation-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "testscript-operation-codes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-resource-approvaldate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "resource-approvalDate", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration0302.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationAdministrationHelper.fromJson(json);
  	 System.out.println("testing MedicationAdministration " + count++);
  	 medicationadministrationDao.create((MedicationAdministration)result);
  	 result = medicationadministrationDao.find(((MedicationAdministration)result).getId());
  	 assertEquals("Expect ", "medadmin0302", ((MedicationAdministration)result).getId());
  	 medicationadministrationDao.delete( (MedicationAdministration)result);

  	 inputFile = "../../fhir-data/examples-json/extension-communicationrequest-supportinginfo.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "communicationrequest-supportingInfo", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0310.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0310", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/condition-extensions-Condition-part-of.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "condition-extensions-Condition-part-of", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/careteam-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CareTeamHelper.fromJson(json);
  	 System.out.println("testing CareTeam " + count++);
  	 careteamDao.create((CareTeam)result);
  	 result = careteamDao.find(((CareTeam)result).getId());
  	 assertEquals("Expect ", "example", ((CareTeam)result).getId());
  	 careteamDao.delete( (CareTeam)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-slotstatus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "slotstatus", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-condition-occurredfollowing.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "condition-occurredFollowing", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-consent-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "consent-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-goal-acceptance-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "goal-acceptance-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/specimen-example-serum.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SpecimenHelper.fromJson(json);
  	 System.out.println("testing Specimen " + count++);
  	 specimenDao.create((Specimen)result);
  	 result = specimenDao.find(((Specimen)result).getId());
  	 assertEquals("Expect ", "sst", ((Specimen)result).getId());
  	 specimenDao.delete( (Specimen)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-allergy-intolerance-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "allergy-intolerance-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-sample-data.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "ekg", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/careplan.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "CarePlan", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-questionnaire-display-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "questionnaire-display-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-1minute-apgar-score.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "1minute-apgar-score", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/extension-openehr-careplan.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "openEHR-careplan", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-namingsystem-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "namingsystem-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/cm-data-absent-reason-v3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-data-absent-reason-v3", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/library-zika-virus-intervention-logic.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LibraryHelper.fromJson(json);
  	 System.out.println("testing Library " + count++);
  	 libraryDao.create((Library)result);
  	 result = libraryDao.find(((Library)result).getId());
  	 assertEquals("Expect ", "zika-virus-intervention-logic", ((Library)result).getId());
  	 libraryDao.delete( (Library)result);

  	 inputFile = "../../fhir-data/examples-json/condition-example-f205-infection.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConditionHelper.fromJson(json);
  	 System.out.println("testing Condition " + count++);
  	 conditionDao.create((Condition)result);
  	 result = conditionDao.find(((Condition)result).getId());
  	 assertEquals("Expect ", "f205", ((Condition)result).getId());
  	 conditionDao.delete( (Condition)result);

  	 inputFile = "../../fhir-data/examples-json/sequence-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/library-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LibraryHelper.fromJson(json);
  	 System.out.println("testing Library " + count++);
  	 libraryDao.create((Library)result);
  	 result = libraryDao.find(((Library)result).getId());
  	 assertEquals("Expect ", "example", ((Library)result).getId());
  	 libraryDao.delete( (Library)result);

  	 inputFile = "../../fhir-data/examples-json/operation-codesystem-lookup.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "CodeSystem-lookup", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-sourcestructuremap.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-sourceStructureMap", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/consent-example-notOrg.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConsentHelper.fromJson(json);
  	 System.out.println("testing Consent " + count++);
  	 consentDao.create((Consent)result);
  	 result = consentDao.find(((Consent)result).getId());
  	 assertEquals("Expect ", "consent-example-notOrg", ((Consent)result).getId());
  	 consentDao.delete( (Consent)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-fhirtype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-fhirType", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-related-claim-relationship.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "related-claim-relationship", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-supplyrequest-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "supplyrequest-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-bundle-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "bundle-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/guidanceresponse-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/organization-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-allergyintolerance-resolutionage.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "allergyintolerance-resolutionAge", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/activitydefinition-procedurerequest-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ActivityDefinitionHelper.fromJson(json);
  	 System.out.println("testing ActivityDefinition " + count++);
  	 activitydefinitionDao.create((ActivityDefinition)result);
  	 result = activitydefinitionDao.find(((ActivityDefinition)result).getId());
  	 assertEquals("Expect ", "heart-valve-replacement", ((ActivityDefinition)result).getId());
  	 activitydefinitionDao.delete( (ActivityDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/integer.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "integer", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-adjudication.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "adjudication", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-immunization-recommendation-date-criterion.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "immunization-recommendation-date-criterion", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/riskassessment-example-population.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = RiskAssessmentHelper.fromJson(json);
  	 System.out.println("testing RiskAssessment " + count++);
  	 riskassessmentDao.create((RiskAssessment)result);
  	 result = riskassessmentDao.find(((RiskAssessment)result).getId());
  	 assertEquals("Expect ", "population", ((RiskAssessment)result).getId());
  	 riskassessmentDao.delete( (RiskAssessment)result);

  	 inputFile = "../../fhir-data/examples-json/namingsystem-example-replaced.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NamingSystemHelper.fromJson(json);
  	 System.out.println("testing NamingSystem " + count++);
  	 namingsystemDao.create((NamingSystem)result);
  	 result = namingsystemDao.find(((NamingSystem)result).getId());
  	 assertEquals("Expect ", "example-replaced", ((NamingSystem)result).getId());
  	 namingsystemDao.delete( (NamingSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-buildingnumbersuffix.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-buildingNumberSuffix", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-example-gingival-mass.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DiagnosticReportHelper.fromJson(json);
  	 System.out.println("testing DiagnosticReport " + count++);
  	 diagnosticreportDao.create((DiagnosticReport)result);
  	 result = diagnosticreportDao.find(((DiagnosticReport)result).getId());
  	 assertEquals("Expect ", "gingival-mass", ((DiagnosticReport)result).getId());
  	 diagnosticreportDao.delete( (DiagnosticReport)result);

  	 inputFile = "../../fhir-data/examples-json/extension-11179-de-change-description.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "11179-de-change-description", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/flag-example-encounter.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = FlagHelper.fromJson(json);
  	 System.out.println("testing Flag " + count++);
  	 flagDao.create((Flag)result);
  	 result = flagDao.find(((Flag)result).getId());
  	 assertEquals("Expect ", "example-encounter", ((Flag)result).getId());
  	 flagDao.delete( (Flag)result);

  	 inputFile = "../../fhir-data/examples-json/extension-http-response-header.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "http-response-header", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-classification-or-context.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "classification-or-context", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);
  	System.out.println("Total tests .. " + count);
  }
  @Test
  public void test930() throws Exception {
  	 inputFile = "../../fhir-data/examples-json/extension-valueset-warning.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-warning", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0306.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0306", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-audit-event-sub-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "audit-event-sub-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0321.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0321", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/coverage-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CoverageHelper.fromJson(json);
  	 System.out.println("testing Coverage " + count++);
  	 coverageDao.create((Coverage)result);
  	 result = coverageDao.find(((Coverage)result).getId());
  	 assertEquals("Expect ", "9876B1", ((Coverage)result).getId());
  	 coverageDao.delete( (Coverage)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-postal-address-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "postal-address-use", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-device-implant-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "device-implant-status", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticsdnasequencevarianttype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsDNASequenceVariantType", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-unittype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-unitType", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-auditevent-numberofinstances.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "auditevent-NumberOfInstances", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-testscript-profile-origin-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "testscript-profile-origin-types", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/riskassessment.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "RiskAssessment", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-specimen-collection-method.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "specimen-collection-method", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/endpoint-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/eligibilityresponse-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-casesensitive.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-caseSensitive", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-displaycategory.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-displayCategory", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-care-team-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "care-team-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-unsat.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "unsat", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/devicemetric-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DeviceMetricHelper.fromJson(json);
  	 System.out.println("testing DeviceMetric " + count++);
  	 devicemetricDao.create((DeviceMetric)result);
  	 result = devicemetricDao.find(((DeviceMetric)result).getId());
  	 assertEquals("Expect ", "example", ((DeviceMetric)result).getId());
  	 devicemetricDao.delete( (DeviceMetric)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-service-referral-method.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "service-referral-method", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/schedule-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-identity-assuranceLevel.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "identity-assuranceLevel", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-episodeofcare-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "episodeofcare-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/namingsystem.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "NamingSystem", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-dicom-cid29.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "dicom-cid29", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-codesystem-content-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "codesystem-content-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-sc-coding.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-SC-coding", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-condition-outcome.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "condition-outcome", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0303.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0303", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/referralrequest-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-guide-dependency-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "guide-dependency-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-medication-request-priority.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "medication-request-priority", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codeableconcept.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "CodeableConcept", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0308.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0308", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-care-plan-activity-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "care-plan-activity-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-censustract.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-censusTract", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/appointmentresponse.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "AppointmentResponse", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/elementdefinition-11179-DataElement-objectClassProperty.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "elementdefinition-11179-DataElement-objectClassProperty", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticsdnasequencevariantname.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsDNASequenceVariantName", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/organization-example-f001-burgers.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OrganizationHelper.fromJson(json);
  	 System.out.println("testing Organization " + count++);
  	 organizationDao.create((Organization)result);
  	 result = organizationDao.find(((Organization)result).getId());
  	 assertEquals("Expect ", "f001", ((Organization)result).getId());
  	 organizationDao.delete( (Organization)result);

  	 inputFile = "../../fhir-data/examples-json/measure-component-a-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MeasureHelper.fromJson(json);
  	 System.out.println("testing Measure " + count++);
  	 measureDao.create((Measure)result);
  	 result = measureDao.find(((Measure)result).getId());
  	 assertEquals("Expect ", "component-a-example", ((Measure)result).getId());
  	 measureDao.delete( (Measure)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-care-plan-activity-outcome.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "care-plan-activity-outcome", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-task-performer-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "task-performer-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder-example-cardiacdiet.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NutritionOrderHelper.fromJson(json);
  	 System.out.println("testing NutritionOrder " + count++);
  	 nutritionorderDao.create((NutritionOrder)result);
  	 result = nutritionorderDao.find(((NutritionOrder)result).getId());
  	 assertEquals("Expect ", "cardiacdiet", ((NutritionOrder)result).getId());
  	 nutritionorderDao.delete( (NutritionOrder)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-policyholder-relationship.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "policyholder-relationship", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/appointment-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-referralrequest-reasonrefused.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "referralrequest-reasonRefused", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticsphaseset.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsPhaseSet", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-guide-dependency-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "guide-dependency-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-elementdefinition-bindingname.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "elementdefinition-bindingName", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/plandefinition-predecessor-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PlanDefinitionHelper.fromJson(json);
  	 System.out.println("testing PlanDefinition " + count++);
  	 plandefinitionDao.create((PlanDefinition)result);
  	 result = plandefinitionDao.find(((PlanDefinition)result).getId());
  	 assertEquals("Expect ", "zika-virus-intervention-initial", ((PlanDefinition)result).getId());
  	 plandefinitionDao.delete( (PlanDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-map-model-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "map-model-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-search-modifier-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "search-modifier-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-expirationdate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-expirationDate", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-extension-context.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "extension-context", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-payment-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "payment-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-audit-entity-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "audit-entity-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Extension", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/testscript.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "TestScript", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-11179-de-is-data-element-concept.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "11179-de-is-data-element-concept", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example-colonoscopy-bx.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "colon-biopsy", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/supplydelivery.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "SupplyDelivery", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration0301.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationAdministrationHelper.fromJson(json);
  	 System.out.println("testing MedicationAdministration " + count++);
  	 medicationadministrationDao.create((MedicationAdministration)result);
  	 result = medicationadministrationDao.find(((MedicationAdministration)result).getId());
  	 assertEquals("Expect ", "medadmin0301", ((MedicationAdministration)result).getId());
  	 medicationadministrationDao.delete( (MedicationAdministration)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-subscription-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "subscription-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-filter-operator.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "filter-operator", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example-implant.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "example-implant", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-example-dxa.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DiagnosticReportHelper.fromJson(json);
  	 System.out.println("testing DiagnosticReport " + count++);
  	 diagnosticreportDao.create((DiagnosticReport)result);
  	 result = diagnosticreportDao.find(((DiagnosticReport)result).getId());
  	 assertEquals("Expect ", "102", ((DiagnosticReport)result).getId());
  	 diagnosticreportDao.delete( (DiagnosticReport)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-flag-priority.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "flag-priority", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-satO2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "satO2", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-replacedby.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-replacedby", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-flag-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "flag-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-coverage-selfpay.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "coverage-selfpay", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/heartrate-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-composition-clindoc-otherconfidentiality.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "composition-clindoc-otherConfidentiality", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-endpoint-payload-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "endpoint-payload-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/binary-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BinaryHelper.fromJson(json);
  	 System.out.println("testing Binary " + count++);
  	 binaryDao.create((Binary)result);
  	 result = binaryDao.find(((Binary)result).getId());
  	 assertEquals("Expect ", "example", ((Binary)result).getId());
  	 binaryDao.delete( (Binary)result);

  	 inputFile = "../../fhir-data/examples-json/patient-example-ihe-pcd.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "ihe-pcd", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-genetics-2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "example-genetics-2", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-binding-strength.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "binding-strength", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-iso-21089-lifecycle.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "iso-21089-lifecycle", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-service-pharmacy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "service-pharmacy", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-assert-direction-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "assert-direction-codes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0302.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0302", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-service-product.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "service-product", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-action-required-behavior.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "action-required-behavior", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/operationdefinition-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-minoccurs.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-minOccurs", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-fundsreserve.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "fundsreserve", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-signature-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "signature-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-genetics-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-list-empty-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "list-empty-reason", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/appointmentresponse-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AppointmentResponseHelper.fromJson(json);
  	 System.out.println("testing AppointmentResponse " + count++);
  	 appointmentresponseDao.create((AppointmentResponse)result);
  	 result = appointmentresponseDao.find(((AppointmentResponse)result).getId());
  	 assertEquals("Expect ", "example", ((AppointmentResponse)result).getId());
  	 appointmentresponseDao.delete( (AppointmentResponse)result);

  	 inputFile = "../../fhir-data/examples-json/organization-extensions-Organization-alias.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "organization-extensions-Organization-alias", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/implementationguide.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ImplementationGuide", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/bodytemp-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-search-xpath-usage.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "search-xpath-usage", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-oral-orthoplan.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "100153", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/careplan-example-f001-heart.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CarePlanHelper.fromJson(json);
  	 System.out.println("testing CarePlan " + count++);
  	 careplanDao.create((CarePlan)result);
  	 result = careplanDao.find(((CarePlan)result).getId());
  	 assertEquals("Expect ", "f001", ((CarePlan)result).getId());
  	 careplanDao.delete( (CarePlan)result);

  	 inputFile = "../../fhir-data/examples-json/plandefinition-exclusive-breastfeeding-intervention-02.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PlanDefinitionHelper.fromJson(json);
  	 System.out.println("testing PlanDefinition " + count++);
  	 plandefinitionDao.create((PlanDefinition)result);
  	 result = plandefinitionDao.find(((PlanDefinition)result).getId());
  	 assertEquals("Expect ", "exclusive-breastfeeding-intervention-02", ((PlanDefinition)result).getId());
  	 plandefinitionDao.delete( (PlanDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/task-example2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = TaskHelper.fromJson(json);
  	 System.out.println("testing Task " + count++);
  	 taskDao.create((Task)result);
  	 result = taskDao.find(((Task)result).getId());
  	 assertEquals("Expect ", "example2", ((Task)result).getId());
  	 taskDao.delete( (Task)result);

  	 inputFile = "../../fhir-data/examples-json/extension-humanname-own-name.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "humanname-own-name", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-identifier-validdate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "identifier-validDate", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-conditional-delete-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "conditional-delete-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-f203-bicarbonate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "f203", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-sequence-quality-standardSequence.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "sequence-quality-standardSequence", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-task-replaces.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "task-replaces", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/binary.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Binary", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-observation-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "observation-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-contract-content-derivative.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "contract-content-derivative", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/lipidprofile-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-hla-genotyping-results-haploid.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "hla-genotyping-results-haploid", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/patient-example-c.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "pat3", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-body-length.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "body-length", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-genetics-comprehensive-bone-marrow-report.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DiagnosticReportHelper.fromJson(json);
  	 System.out.println("testing DiagnosticReport " + count++);
  	 diagnosticreportDao.create((DiagnosticReport)result);
  	 result = diagnosticreportDao.find(((DiagnosticReport)result).getId());
  	 assertEquals("Expect ", "report", ((DiagnosticReport)result).getId());
  	 diagnosticreportDao.delete( (DiagnosticReport)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-service-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "service-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-ballot-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-ballot-status", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/location-examples-general.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "3ad0687e-f477-468c-afd5-fcc2bf897819", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-example-f202-bloodculture.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DiagnosticReportHelper.fromJson(json);
  	 System.out.println("testing DiagnosticReport " + count++);
  	 diagnosticreportDao.create((DiagnosticReport)result);
  	 result = diagnosticreportDao.find(((DiagnosticReport)result).getId());
  	 assertEquals("Expect ", "f202", ((DiagnosticReport)result).getId());
  	 diagnosticreportDao.delete( (DiagnosticReport)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-allergy-verification-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "allergy-verification-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/parameterdefinition.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ParameterDefinition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-teeth.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "teeth", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-nutrient-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "nutrient-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-deliveryinstallationqualifier.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-deliveryInstallationQualifier", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0329.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0329", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-unknown-content-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "unknown-content-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/graphdefinition-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = GraphDefinitionHelper.fromJson(json);
  	 System.out.println("testing GraphDefinition " + count++);
  	 graphdefinitionDao.create((GraphDefinition)result);
  	 result = graphdefinitionDao.find(((GraphDefinition)result).getId());
  	 assertEquals("Expect ", "example", ((GraphDefinition)result).getId());
  	 graphdefinitionDao.delete( (GraphDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-example-f007-sh.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerHelper.fromJson(json);
  	 System.out.println("testing Practitioner " + count++);
  	 practitionerDao.create((Practitioner)result);
  	 result = practitionerDao.find(((Practitioner)result).getId());
  	 assertEquals("Expect ", "f007", ((Practitioner)result).getId());
  	 practitionerDao.delete( (Practitioner)result);

  	 inputFile = "../../fhir-data/examples-json/task.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Task", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-consent-witness.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "consent-Witness", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-encounter-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "encounter-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder-example-enteralbolus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NutritionOrderHelper.fromJson(json);
  	 System.out.println("testing NutritionOrder " + count++);
  	 nutritionorderDao.create((NutritionOrder)result);
  	 result = nutritionorderDao.find(((NutritionOrder)result).getId());
  	 assertEquals("Expect ", "enteralbolus", ((NutritionOrder)result).getId());
  	 nutritionorderDao.delete( (NutritionOrder)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-immunization-recommendation-date-criterion.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "immunization-recommendation-date-criterion", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/goal-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-example-f003-mv.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerHelper.fromJson(json);
  	 System.out.println("testing Practitioner " + count++);
  	 practitionerDao.create((Practitioner)result);
  	 result = practitionerDao.find(((Practitioner)result).getId());
  	 assertEquals("Expect ", "f003", ((Practitioner)result).getId());
  	 practitionerDao.delete( (Practitioner)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-sequence-quality-method.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "sequence-quality-method", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-effectivedate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-effectiveDate", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-adjudication-error.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "adjudication-error", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedurerequest-approachbodysite.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedurerequest-approachBodySite", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-elementdefinition-translatable.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "elementdefinition-translatable", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-trigger-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "trigger-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/enrollmentrequest-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/riskassessment-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-location-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "location-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-rategoal.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "pharmacy-core-rateGoal", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-vaccination-protocol-dose-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "vaccination-protocol-dose-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-table-name.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-table-name", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-rateincrementinterval.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "pharmacy-core-rateIncrementInterval", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0317.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0317", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-namingsystem-identifier-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "namingsystem-identifier-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "MedicationDispense", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-location-physical-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "location-physical-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example-appendectomy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "appendectomy-narrative", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/operation-structuredefinition-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "StructureDefinition-questionnaire", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example-colonoscopy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "colonoscopy", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-genetics-5.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "example-genetics-5", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-example-ghp.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DiagnosticReportHelper.fromJson(json);
  	 System.out.println("testing DiagnosticReport " + count++);
  	 diagnosticreportDao.create((DiagnosticReport)result);
  	 result = diagnosticreportDao.find(((DiagnosticReport)result).getId());
  	 assertEquals("Expect ", "ghp", ((DiagnosticReport)result).getId());
  	 diagnosticreportDao.delete( (DiagnosticReport)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-allergy-clinical-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "allergy-clinical-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/list-example-medlist.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = FHIRListHelper.fromJson(json);
  	 System.out.println("testing FHIRList " + count++);
  	 fhirlistDao.create((FHIRList)result);
  	 result = fhirlistDao.find(((FHIRList)result).getId());
  	 assertEquals("Expect ", "med-list", ((FHIRList)result).getId());
  	 fhirlistDao.delete( (FHIRList)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-claim-exception.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "claim-exception", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-expirationdate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-expirationDate", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-glasgow.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "glasgow", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-keyword.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-keyWord", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-udi.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "udi", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-contact-point-system.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "contact-point-system", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/specimen-example-isolate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SpecimenHelper.fromJson(json);
  	 System.out.println("testing Specimen " + count++);
  	 specimenDao.create((Specimen)result);
  	 result = specimenDao.find(((Specimen)result).getId());
  	 assertEquals("Expect ", "isolate", ((Specimen)result).getId());
  	 specimenDao.delete( (Specimen)result);

  	 inputFile = "../../fhir-data/examples-json/researchstudy.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ResearchStudy", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-extensions-CodeSystem-author.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "codesystem-extensions-CodeSystem-author", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-nhin-purposeofuse.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "nhin-purposeofuse", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-subscription-channel-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "subscription-channel-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-actionlist.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "actionlist", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "example", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/communicationrequest-example-fm-solicit-attachment.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CommunicationRequestHelper.fromJson(json);
  	 System.out.println("testing CommunicationRequest " + count++);
  	 communicationrequestDao.create((CommunicationRequest)result);
  	 result = communicationrequestDao.find(((CommunicationRequest)result).getId());
  	 assertEquals("Expect ", "fm-solicit", ((CommunicationRequest)result).getId());
  	 communicationrequestDao.delete( (CommunicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-c80-doc-classcodes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "c80-doc-classcodes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/cm-contact-point-use-v3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-contact-point-use-v3", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/detectedissue-example-allergy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DetectedIssueHelper.fromJson(json);
  	 System.out.println("testing DetectedIssue " + count++);
  	 detectedissueDao.create((DetectedIssue)result);
  	 result = detectedissueDao.find(((DetectedIssue)result).getId());
  	 assertEquals("Expect ", "allergy", ((DetectedIssue)result).getId());
  	 detectedissueDao.delete( (DetectedIssue)result);

  	 inputFile = "../../fhir-data/examples-json/structuremap-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example-education.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "education", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-ex-diagnosisrelatedgroup.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "ex-diagnosisrelatedgroup", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-encounter-participant-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "encounter-participant-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-specimen-processing-procedure.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "specimen-processing-procedure", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-usage-context-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "usage-context-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-versioning-policy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "versioning-policy", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/operation-servicedefinition-evaluate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "ServiceDefinition-evaluate", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-definitions.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "extensions", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/eligibilityresponse-example-benefits-2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EligibilityResponseHelper.fromJson(json);
  	 System.out.println("testing EligibilityResponse " + count++);
  	 eligibilityresponseDao.create((EligibilityResponse)result);
  	 result = eligibilityresponseDao.find(((EligibilityResponse)result).getId());
  	 assertEquals("Expect ", "E2502", ((EligibilityResponse)result).getId());
  	 eligibilityresponseDao.delete( (EligibilityResponse)result);

  	 inputFile = "../../fhir-data/examples-json/extension-match-grade.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "match-grade", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/measurereport-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/slot-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/oxygensat-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/allergyintolerance-medication.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AllergyIntoleranceHelper.fromJson(json);
  	 System.out.println("testing AllergyIntolerance " + count++);
  	 allergyintoleranceDao.create((AllergyIntolerance)result);
  	 result = allergyintoleranceDao.find(((AllergyIntolerance)result).getId());
  	 assertEquals("Expect ", "medication", ((AllergyIntolerance)result).getId());
  	 allergyintoleranceDao.delete( (AllergyIntolerance)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-search-comparator.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "search-comparator", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-11179-de-contact-address.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "11179-de-contact-address", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-template-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-template-status", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/money.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Money", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-adjudication-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "adjudication-reason", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/devicerequest.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "DeviceRequest", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-condition-outcome.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "condition-outcome", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/careplan-example-integrated.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CarePlanHelper.fromJson(json);
  	 System.out.println("testing CarePlan " + count++);
  	 careplanDao.create((CarePlan)result);
  	 result = careplanDao.find(((CarePlan)result).getId());
  	 assertEquals("Expect ", "integrate", ((CarePlan)result).getId());
  	 careplanDao.delete( (CarePlan)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-clinical-impression-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "clinical-impression-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/organization-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OrganizationHelper.fromJson(json);
  	 System.out.println("testing Organization " + count++);
  	 organizationDao.create((Organization)result);
  	 result = organizationDao.find(((Organization)result).getId());
  	 assertEquals("Expect ", "hl7", ((Organization)result).getId());
  	 organizationDao.delete( (Organization)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder-example-enteralcontinuous.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NutritionOrderHelper.fromJson(json);
  	 System.out.println("testing NutritionOrder " + count++);
  	 nutritionorderDao.create((NutritionOrder)result);
  	 result = nutritionorderDao.find(((NutritionOrder)result).getId());
  	 assertEquals("Expect ", "enteralcontinuous", ((NutritionOrder)result).getId());
  	 nutritionorderDao.delete( (NutritionOrder)result);

  	 inputFile = "../../fhir-data/examples-json/communication-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-claim-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "claim-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/audit-event-example-logout.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AuditEventHelper.fromJson(json);
  	 System.out.println("testing AuditEvent " + count++);
  	 auditeventDao.create((AuditEvent)result);
  	 result = auditeventDao.find(((AuditEvent)result).getId());
  	 assertEquals("Expect ", "example-logout", ((AuditEvent)result).getId());
  	 auditeventDao.delete( (AuditEvent)result);

  	 inputFile = "../../fhir-data/examples-json/compartmentdefinition-device.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CompartmentDefinitionHelper.fromJson(json);
  	 System.out.println("testing CompartmentDefinition " + count++);
  	 compartmentdefinitionDao.create((CompartmentDefinition)result);
  	 result = compartmentdefinitionDao.find(((CompartmentDefinition)result).getId());
  	 assertEquals("Expect ", "device", ((CompartmentDefinition)result).getId());
  	 compartmentdefinitionDao.delete( (CompartmentDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-detectedissue-severity.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "detectedissue-severity", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-note-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "note-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-location-physical-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "location-physical-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-adverse-event-seriousness.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "adverse-event-seriousness", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0322.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0322", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-example-f004-rb.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerHelper.fromJson(json);
  	 System.out.println("testing Practitioner " + count++);
  	 practitionerDao.create((Practitioner)result);
  	 result = practitionerDao.find(((Practitioner)result).getId());
  	 assertEquals("Expect ", "f004", ((Practitioner)result).getId());
  	 practitionerDao.delete( (Practitioner)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-condition-stage.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "condition-stage", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/immunization.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Immunization", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0327.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0327", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-operation-outcome.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "operation-outcome", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-research-subject-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "research-subject-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/testscript-example-readtest.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = TestScriptHelper.fromJson(json);
  	 System.out.println("testing TestScript " + count++);
  	 testscriptDao.create((TestScript)result);
  	 result = testscriptDao.find(((TestScript)result).getId());
  	 assertEquals("Expect ", "testscript-example-readtest", ((TestScript)result).getId());
  	 testscriptDao.delete( (TestScript)result);

  	 inputFile = "../../fhir-data/examples-json/cm-medication-request-status-v3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-medication-request-status-v3", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/researchsubject-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ResearchSubjectHelper.fromJson(json);
  	 System.out.println("testing ResearchSubject " + count++);
  	 researchsubjectDao.create((ResearchSubject)result);
  	 result = researchsubjectDao.find(((ResearchSubject)result).getId());
  	 assertEquals("Expect ", "example", ((ResearchSubject)result).getId());
  	 researchsubjectDao.delete( (ResearchSubject)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0313.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0313", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-condition-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "condition-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/referralrequest-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ReferralRequestHelper.fromJson(json);
  	 System.out.println("testing ReferralRequest " + count++);
  	 referralrequestDao.create((ReferralRequest)result);
  	 result = referralrequestDao.find(((ReferralRequest)result).getId());
  	 assertEquals("Expect ", "example", ((ReferralRequest)result).getId());
  	 referralrequestDao.delete( (ReferralRequest)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-quality-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "quality-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/headcircum.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "headcircum", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/immunizationrecommendation-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-reference-version-rules.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "reference-version-rules", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-messageheader-response-request.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "messageheader-response-request", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/operationdefinition.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "OperationDefinition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-name-part-qualifier.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "name-part-qualifier", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/paymentreconciliation.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "PaymentReconciliation", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-content-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "content-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-list-example-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "list-example-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedure-progressstatus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedure-progressStatus", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-medication-statement-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "medication-statement-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/basic-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BasicHelper.fromJson(json);
  	 System.out.println("testing Basic " + count++);
  	 basicDao.create((Basic)result);
  	 result = basicDao.find(((Basic)result).getId());
  	 assertEquals("Expect ", "referral", ((Basic)result).getId());
  	 basicDao.delete( (Basic)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-question-max-occurs.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "question-max-occurs", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/provenance-example-cwl.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProvenanceHelper.fromJson(json);
  	 System.out.println("testing Provenance " + count++);
  	 provenanceDao.create((Provenance)result);
  	 result = provenanceDao.find(((Provenance)result).getId());
  	 assertEquals("Expect ", "example-cwl", ((Provenance)result).getId());
  	 provenanceDao.delete( (Provenance)result);

  	 inputFile = "../../fhir-data/examples-json/extension-elementdefinition-selector.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "elementdefinition-selector", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-digital-media-subtype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "digital-media-subtype", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medication-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-example-f001-evdb.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerHelper.fromJson(json);
  	 System.out.println("testing Practitioner " + count++);
  	 practitionerDao.create((Practitioner)result);
  	 result = practitionerDao.find(((Practitioner)result).getId());
  	 assertEquals("Expect ", "f001", ((Practitioner)result).getId());
  	 practitionerDao.delete( (Practitioner)result);

  	 inputFile = "../../fhir-data/examples-json/extension-11179-objectclassproperty.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "11179-objectClassProperty", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-medication-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "medication-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-supplyrequest-kind.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "supplyrequest-kind", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-trusted-expansion.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-trusted-expansion", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-openehr-exposureduration.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "openEHR-exposureDuration", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-parent-relationship-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "parent-relationship-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example-pt.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "physical-therapy", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-history-not-done-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "history-not-done-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-bloodpressure-dar.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "blood-pressure-dar", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/decimal.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "decimal", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-resource-slicing-rules.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "resource-slicing-rules", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/relatedperson-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-action-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "action-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/testscript-example-search.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = TestScriptHelper.fromJson(json);
  	 System.out.println("testing TestScript " + count++);
  	 testscriptDao.create((TestScript)result);
  	 result = testscriptDao.find(((TestScript)result).getId());
  	 assertEquals("Expect ", "testscript-example-search", ((TestScript)result).getId());
  	 testscriptDao.delete( (TestScript)result);

  	 inputFile = "../../fhir-data/examples-json/list.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "List", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-referencerange-meaning.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "referencerange-meaning", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/location-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LocationHelper.fromJson(json);
  	 System.out.println("testing Location " + count++);
  	 locationDao.create((Location)result);
  	 result = locationDao.find(((Location)result).getId());
  	 assertEquals("Expect ", "1", ((Location)result).getId());
  	 locationDao.delete( (Location)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0332.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0332", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-basic-resource-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "basic-resource-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/dataelement-labtestmaster-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DataElementHelper.fromJson(json);
  	 System.out.println("testing DataElement " + count++);
  	 dataelementDao.create((DataElement)result);
  	 result = dataelementDao.find(((DataElement)result).getId());
  	 assertEquals("Expect ", "prothrombin", ((DataElement)result).getId());
  	 dataelementDao.delete( (DataElement)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-extensions-ValueSet-workflow.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "valueset-extensions-ValueSet-workflow", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-diet-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "diet-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/coverage-example-ehic.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CoverageHelper.fromJson(json);
  	 System.out.println("testing Coverage " + count++);
  	 coverageDao.create((Coverage)result);
  	 result = coverageDao.find(((Coverage)result).getId());
  	 assertEquals("Expect ", "7547E", ((Coverage)result).getId());
  	 coverageDao.delete( (Coverage)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-conditional-read-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "conditional-read-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/contactpoint.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ContactPoint", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-conceptorder.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-conceptOrder", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-use-context.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "use-context", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-11179-de-document-reference.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "11179-de-document-reference", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-provenance-entity-role.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "provenance-entity-role", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-benefit-network.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "benefit-network", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/observation.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Observation", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-choiceorientation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-choiceOrientation", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0311.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0311", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration0313.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationAdministrationHelper.fromJson(json);
  	 System.out.println("testing MedicationAdministration " + count++);
  	 medicationadministrationDao.create((MedicationAdministration)result);
  	 result = medicationadministrationDao.find(((MedicationAdministration)result).getId());
  	 assertEquals("Expect ", "medadmin0313", ((MedicationAdministration)result).getId());
  	 medicationadministrationDao.delete( (MedicationAdministration)result);

  	 inputFile = "../../fhir-data/examples-json/base64binary.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "base64Binary", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-allergy-intolerance-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "allergy-intolerance-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/event.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Event", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-5minute-apgar-score.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "5minute-apgar-score", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/devicecomponent-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-metric-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "metric-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-reference.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-reference", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-ex-revenue-center.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "ex-revenue-center", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-fm-conditions.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "fm-conditions", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);
  	System.out.println("Total tests .. " + count);
  }
  @Test
  public void test1240() throws Exception {
  	 inputFile = "../../fhir-data/examples-json/extension-devicerequest-patientinstruction.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "devicerequest-patientInstruction", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-comments.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-comments", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-system-restful-interaction.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "system-restful-interaction", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-administrative-gender.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "administrative-gender", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-humanname-assembly-order.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "humanname-assembly-order", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-detectedissue-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "detectedissue-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/shareablevalueset.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "shareablevalueset", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-resource-lastreviewdate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "resource-lastReviewDate", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/imagingstudy.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ImagingStudy", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0325.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0325", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaireresponse-author.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaireresponse-author", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/duration.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Duration", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-allergy-intolerance-criticality.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "allergy-intolerance-criticality", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-subscription-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "subscription-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-actionlist.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "actionlist", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationstatementexample1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationStatementHelper.fromJson(json);
  	 System.out.println("testing MedicationStatement " + count++);
  	 medicationstatementDao.create((MedicationStatement)result);
  	 result = medicationstatementDao.find(((MedicationStatement)result).getId());
  	 assertEquals("Expect ", "example001", ((MedicationStatement)result).getId());
  	 medicationstatementDao.delete( (MedicationStatement)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-observation-interpretation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "observation-interpretation", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-detectedissue-mitigation-action.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "detectedissue-mitigation-action", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-fm-itemtype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "fm-itemtype", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/unsignedint.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "unsignedInt", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0304.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0304", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/activitydefinition-predecessor-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ActivityDefinitionHelper.fromJson(json);
  	 System.out.println("testing ActivityDefinition " + count++);
  	 activitydefinitionDao.create((ActivityDefinition)result);
  	 result = activitydefinitionDao.find(((ActivityDefinition)result).getId());
  	 assertEquals("Expect ", "referralPrimaryCareMentalHealth-initial", ((ActivityDefinition)result).getId());
  	 activitydefinitionDao.delete( (ActivityDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder-example-proteinsupplement.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NutritionOrderHelper.fromJson(json);
  	 System.out.println("testing NutritionOrder " + count++);
  	 nutritionorderDao.create((NutritionOrder)result);
  	 result = nutritionorderDao.find(((NutritionOrder)result).getId());
  	 assertEquals("Expect ", "proteinsupplement", ((NutritionOrder)result).getId());
  	 nutritionorderDao.delete( (NutritionOrder)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-usage.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-usage", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-plan-definition-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "plan-definition-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/imagingstudy-example-xr.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ImagingStudyHelper.fromJson(json);
  	 System.out.println("testing ImagingStudy " + count++);
  	 imagingstudyDao.create((ImagingStudy)result);
  	 result = imagingstudyDao.find(((ImagingStudy)result).getId());
  	 assertEquals("Expect ", "example-xr", ((ImagingStudy)result).getId());
  	 imagingstudyDao.delete( (ImagingStudy)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-content-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "content-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-effectivedate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-effectiveDate", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-measure-report-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "measure-report-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-care-team-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "care-team-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/patient-genetics-example1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "genetics-example1", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example-colon-biopsy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "colon-biopsy", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-request-intent.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-request-intent", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-streetnamebase.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-streetNameBase", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-organization-alias.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "organization-alias", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/operation-activitydefinition-apply.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "ActivityDefinition-apply", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-vision-eye-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "vision-eye-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/linkage-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-ucum-vitals-common.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "ucum-vitals-common", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-11179-de-registry-org.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "11179-de-registry-org", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-label.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-label", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-care-plan-activity-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "care-plan-activity-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/list-example-familyhistory-genetics-profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = FHIRListHelper.fromJson(json);
  	 System.out.println("testing FHIRList " + count++);
  	 fhirlistDao.create((FHIRList)result);
  	 result = fhirlistDao.find(((FHIRList)result).getId());
  	 assertEquals("Expect ", "genetic", ((FHIRList)result).getId());
  	 fhirlistDao.delete( (FHIRList)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-search-comparator.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "search-comparator", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/cm-address-use-v3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-address-use-v3", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/sequence-graphic-example-4.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "graphic-example-4", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-formatcodes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "formatcodes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-communication-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "communication-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/count.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Count", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0306.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0306", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/resprate.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "resprate", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-capability-statement-kind.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "capability-statement-kind", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-goal-relationship.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "goal-relationship", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/bodyheight-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-display-hint.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-display-hint", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-message-significance-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "message-significance-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/chargeitem.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ChargeItem", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-account-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "account-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-usagemode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-usageMode", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/ldlcholesterol-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-consent-except-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "consent-except-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0303.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0303", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-task-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "task-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/communication-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CommunicationHelper.fromJson(json);
  	 System.out.println("testing Communication " + count++);
  	 communicationDao.create((Communication)result);
  	 result = communicationDao.find(((Communication)result).getId());
  	 assertEquals("Expect ", "example", ((Communication)result).getId());
  	 communicationDao.delete( (Communication)result);

  	 inputFile = "../../fhir-data/examples-json/relatedperson-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = RelatedPersonHelper.fromJson(json);
  	 System.out.println("testing RelatedPerson " + count++);
  	 relatedpersonDao.create((RelatedPerson)result);
  	 result = relatedpersonDao.find(((RelatedPerson)result).getId());
  	 assertEquals("Expect ", "benedicte", ((RelatedPerson)result).getId());
  	 relatedpersonDao.delete( (RelatedPerson)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-procedure-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "procedure-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/timing.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Timing", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-appointmentstatus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "appointmentstatus", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0324.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0324", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/operation-questionnaire-populatelink.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Questionnaire-populatelink", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-chargeitem-billingcodes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "chargeitem-billingcodes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/eligibilityrequest-example-2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EligibilityRequestHelper.fromJson(json);
  	 System.out.println("testing EligibilityRequest " + count++);
  	 eligibilityrequestDao.create((EligibilityRequest)result);
  	 result = eligibilityrequestDao.find(((EligibilityRequest)result).getId());
  	 assertEquals("Expect ", "52346", ((EligibilityRequest)result).getId());
  	 eligibilityrequestDao.delete( (EligibilityRequest)result);

  	 inputFile = "../../fhir-data/examples-json/sampleddata.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "SampledData", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration0306.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationAdministrationHelper.fromJson(json);
  	 System.out.println("testing MedicationAdministration " + count++);
  	 medicationadministrationDao.create((MedicationAdministration)result);
  	 result = medicationadministrationDao.find(((MedicationAdministration)result).getId());
  	 assertEquals("Expect ", "medadmin0306", ((MedicationAdministration)result).getId());
  	 medicationadministrationDao.delete( (MedicationAdministration)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0314.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0314", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-quantity-comparator.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "quantity-comparator", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-medication-dispense-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "medication-dispense-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-questionnaire-display-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "questionnaire-display-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-example-expansion.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "example-expansion", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-housenumbernumeric.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-houseNumberNumeric", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/supplydelivery-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-network-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "network-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-teeth.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "teeth", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/binary-f006.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BinaryHelper.fromJson(json);
  	 System.out.println("testing Binary " + count++);
  	 binaryDao.create((Binary)result);
  	 result = binaryDao.find(((Binary)result).getId());
  	 assertEquals("Expect ", "f006", ((Binary)result).getId());
  	 binaryDao.delete( (Binary)result);

  	 inputFile = "../../fhir-data/examples-json/observation-genetics-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/specimen-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/patient-example-a.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "pat1", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-procedure-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "procedure-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-time-offset.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-time-offset", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/document-example-dischargesummary.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "father", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/extension-condition-partof.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "condition-partOf", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/encounter-example-f201-20130404.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EncounterHelper.fromJson(json);
  	 System.out.println("testing Encounter " + count++);
  	 encounterDao.create((Encounter)result);
  	 result = encounterDao.find(((Encounter)result).getId());
  	 assertEquals("Expect ", "f201", ((Encounter)result).getId());
  	 encounterDao.delete( (Encounter)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration0309.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationAdministrationHelper.fromJson(json);
  	 System.out.println("testing MedicationAdministration " + count++);
  	 medicationadministrationDao.create((MedicationAdministration)result);
  	 result = medicationadministrationDao.find(((MedicationAdministration)result).getId());
  	 assertEquals("Expect ", "medadmin0309", ((MedicationAdministration)result).getId());
  	 medicationadministrationDao.delete( (MedicationAdministration)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0318.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0318", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/observation-genetic-Observation-gene-amino-acid-change.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "observation-genetic-Observation-gene-amino-acid-change", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/basic.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Basic", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-familymemberhistory-patient-record.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "familymemberhistory-patient-record", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/search-parameters.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "searchParams", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/condition-example-f002-lung.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConditionHelper.fromJson(json);
  	 System.out.println("testing Condition " + count++);
  	 conditionDao.create((Condition)result);
  	 result = conditionDao.find(((Condition)result).getId());
  	 assertEquals("Expect ", "f002", ((Condition)result).getId());
  	 conditionDao.delete( (Condition)result);

  	 inputFile = "../../fhir-data/examples-json/clinicaldocument.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "clinicaldocument", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/searchparameter-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-map.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-map", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-extra-activity-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "extra-activity-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/substance-example-f202-staphylococcus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SubstanceHelper.fromJson(json);
  	 System.out.println("testing Substance " + count++);
  	 substanceDao.create((Substance)result);
  	 result = substanceDao.find(((Substance)result).getId());
  	 assertEquals("Expect ", "f202", ((Substance)result).getId());
  	 substanceDao.delete( (Substance)result);

  	 inputFile = "../../fhir-data/examples-json/careplan-example-f203-sepsis.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CarePlanHelper.fromJson(json);
  	 System.out.println("testing CarePlan " + count++);
  	 careplanDao.create((CarePlan)result);
  	 result = careplanDao.find(((CarePlan)result).getId());
  	 assertEquals("Expect ", "f203", ((CarePlan)result).getId());
  	 careplanDao.delete( (CarePlan)result);

  	 inputFile = "../../fhir-data/examples-json/extension-device-din.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "device-din", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-assert-response-code-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "assert-response-code-types", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-system-version-processing-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "system-version-processing-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-search-param-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "search-param-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-openehr-test.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "openEHR-test", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-immunization-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "immunization-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-structure-definition-kind.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "structure-definition-kind", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-deliveryinstallationarea.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-deliveryInstallationArea", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/communication-example-fm-attachment.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CommunicationHelper.fromJson(json);
  	 System.out.println("testing Communication " + count++);
  	 communicationDao.create((Communication)result);
  	 result = communicationDao.find(((Communication)result).getId());
  	 assertEquals("Expect ", "fm-attachment", ((Communication)result).getId());
  	 communicationDao.delete( (Communication)result);

  	 inputFile = "../../fhir-data/examples-json/device-example-f001-feedingtube.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DeviceHelper.fromJson(json);
  	 System.out.println("testing Device " + count++);
  	 deviceDao.create((Device)result);
  	 result = deviceDao.find(((Device)result).getId());
  	 assertEquals("Expect ", "f001", ((Device)result).getId());
  	 deviceDao.delete( (Device)result);

  	 inputFile = "../../fhir-data/examples-json/media-example-dicom.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MediaHelper.fromJson(json);
  	 System.out.println("testing Media " + count++);
  	 mediaDao.create((Media)result);
  	 result = mediaDao.find(((Media)result).getId());
  	 assertEquals("Expect ", "1.2.840.11361907579238403408700.3.0.14.19970327150033", ((Media)result).getId());
  	 mediaDao.delete( (Media)result);

  	 inputFile = "../../fhir-data/examples-json/extension-communicationrequest-relevanthistory.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "communicationrequest-relevantHistory", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/patient-examples-cypress-template.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "b0a5e4277-83c4-4adb-87e2-e3efe3369b6f", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-contact-point-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "contact-point-use", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/device-example-ihe-pcd.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DeviceHelper.fromJson(json);
  	 System.out.println("testing Device " + count++);
  	 deviceDao.create((Device)result);
  	 result = deviceDao.find(((Device)result).getId());
  	 assertEquals("Expect ", "ihe-pcd", ((Device)result).getId());
  	 deviceDao.delete( (Device)result);

  	 inputFile = "../../fhir-data/examples-json/bundle.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Bundle", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/requestgroup-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = RequestGroupHelper.fromJson(json);
  	 System.out.println("testing RequestGroup " + count++);
  	 requestgroupDao.create((RequestGroup)result);
  	 result = requestgroupDao.find(((RequestGroup)result).getId());
  	 assertEquals("Expect ", "example", ((RequestGroup)result).getId());
  	 requestgroupDao.delete( (RequestGroup)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-action-participant-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "action-participant-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/device-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DeviceHelper.fromJson(json);
  	 System.out.println("testing Device " + count++);
  	 deviceDao.create((Device)result);
  	 result = deviceDao.find(((Device)result).getId());
  	 assertEquals("Expect ", "example", ((Device)result).getId());
  	 deviceDao.delete( (Device)result);

  	 inputFile = "../../fhir-data/examples-json/extension-specimen-isdryweight.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "specimen-isDryWeight", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-deprecated.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-deprecated", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-endpoint-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "endpoint-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/devicemetric.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "DeviceMetric", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/signature.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Signature", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-concept-properties.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "concept-properties", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/careplan-example-pregnancy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CarePlanHelper.fromJson(json);
  	 System.out.println("testing CarePlan " + count++);
  	 careplanDao.create((CarePlan)result);
  	 result = careplanDao.find(((CarePlan)result).getId());
  	 assertEquals("Expect ", "preg", ((CarePlan)result).getId());
  	 careplanDao.delete( (CarePlan)result);

  	 inputFile = "../../fhir-data/examples-json/extension-rendering-style.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "rendering-style", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-subscription-channel-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "subscription-channel-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaire-zika-virus-exposure-assessment.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "zika-virus-exposure-assessment", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/messagedefinition.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "MessageDefinition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-contract-subtype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "contract-subtype", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-forms.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "forms", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-forms.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "forms", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/namingsystem-terminologies.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "terminologies", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-cpt-all.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "cpt-all", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/request.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Request", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/clinicaldocument-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/vitalsigns-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-action-precheck-behavior.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "action-precheck-behavior", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0319.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0319", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-precinct.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-precinct", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/headcircum-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-clinicalimpression-prognosis.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "clinicalimpression-prognosis", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/claimresponse-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-administration-method-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "administration-method-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-observation-vitalsignresult.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "observation-vitalsignresult", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-oral-contained.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "100152", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/consentdirective-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticsgene.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsGene", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-focal-subject.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "focal-subject", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example-lipid.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "lipid", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-oral-prosthodontic-material.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "oral-prosthodontic-material", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/bodyheight.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "bodyheight", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/imagingstudy-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-institutional.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "960150", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-unit.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-unit", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/task-example6.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = TaskHelper.fromJson(json);
  	 System.out.println("testing Task " + count++);
  	 taskDao.create((Task)result);
  	 result = taskDao.find(((Task)result).getId());
  	 assertEquals("Expect ", "example6", ((Task)result).getId());
  	 taskDao.delete( (Task)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-guidance-response-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "guidance-response-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-flag-priority.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "flag-priority", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/sequence.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Sequence", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-entformula-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "entformula-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-contract-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "contract-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-sequence-referenceSeq.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "sequence-referenceSeq", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/eligibilityresponse-example-benefits.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EligibilityResponseHelper.fromJson(json);
  	 System.out.println("testing EligibilityResponse " + count++);
  	 eligibilityresponseDao.create((EligibilityResponse)result);
  	 result = eligibilityresponseDao.find(((EligibilityResponse)result).getId());
  	 assertEquals("Expect ", "E2501", ((EligibilityResponse)result).getId());
  	 eligibilityresponseDao.delete( (EligibilityResponse)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-observation-methods.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "observation-methods", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-library-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "library-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-medication-request-intent.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "medication-request-intent", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-audit-event-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "audit-event-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-flag-detail.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "flag-detail", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-device-action.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "device-action", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-dicm-405-mediatype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "dicm-405-mediatype", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/goal-example-stop-smoking.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = GoalHelper.fromJson(json);
  	 System.out.println("testing Goal " + count++);
  	 goalDao.create((Goal)result);
  	 result = goalDao.find(((Goal)result).getId());
  	 assertEquals("Expect ", "stop-smoking", ((Goal)result).getId());
  	 goalDao.delete( (Goal)result);

  	 inputFile = "../../fhir-data/examples-json/operation-codesystem-subsumes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "CodeSystem-subsumes", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/goal.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Goal", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/patient-example-xds.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "xds", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-payment-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "payment-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/condition-example-f204-renal.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConditionHelper.fromJson(json);
  	 System.out.println("testing Condition " + count++);
  	 conditionDao.create((Condition)result);
  	 result = conditionDao.find(((Condition)result).getId());
  	 assertEquals("Expect ", "f204", ((Condition)result).getId());
  	 conditionDao.delete( (Condition)result);

  	 inputFile = "../../fhir-data/examples-json/pcd-example-notAuthor.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ContractHelper.fromJson(json);
  	 System.out.println("testing Contract " + count++);
  	 contractDao.create((Contract)result);
  	 result = contractDao.find(((Contract)result).getId());
  	 assertEquals("Expect ", "pcd-example-notAuthor", ((Contract)result).getId());
  	 contractDao.delete( (Contract)result);

  	 inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-addendumof.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "diagnosticReport-addendumOf", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-eventtiming.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-eventTiming", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-goal-relationship-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "goal-relationship-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/triggerdefinition.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "TriggerDefinition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration0310.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationAdministrationHelper.fromJson(json);
  	 System.out.println("testing MedicationAdministration " + count++);
  	 medicationadministrationDao.create((MedicationAdministration)result);
  	 result = medicationadministrationDao.find(((MedicationAdministration)result).getId());
  	 assertEquals("Expect ", "medadmin0310", ((MedicationAdministration)result).getId());
  	 medicationadministrationDao.delete( (MedicationAdministration)result);

  	 inputFile = "../../fhir-data/examples-json/extension-location-distance.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "location-distance", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/v3-codesystems.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "v3-valuesets", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/organization-example-f003-burgers-ENT.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OrganizationHelper.fromJson(json);
  	 System.out.println("testing Organization " + count++);
  	 organizationDao.create((Organization)result);
  	 result = organizationDao.find(((Organization)result).getId());
  	 assertEquals("Expect ", "f003", ((Organization)result).getId());
  	 organizationDao.delete( (Organization)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-request-intent.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "request-intent", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-glasgow-qa.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "gcs-qa", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-resource-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "resource-types", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0301.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0301", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/imagingmanifest-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/operation-capabilitystatement-implements.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "CapabilityStatement-implements", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-history-not-done-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "history-not-done-reason", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-f204-creatinine.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "f204", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/paymentnotice.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "PaymentNotice", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-name-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "name-use", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0320.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0320", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/goal-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = GoalHelper.fromJson(json);
  	 System.out.println("testing Goal " + count++);
  	 goalDao.create((Goal)result);
  	 result = goalDao.find(((Goal)result).getId());
  	 assertEquals("Expect ", "example", ((Goal)result).getId());
  	 goalDao.delete( (Goal)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-haplotype2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "example-haplotype2", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/extension-auditevent-participantobjectcontainsstudy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "auditevent-ParticipantObjectContainsStudy", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-measure-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "measure-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/careplan-example-GPVisit.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CarePlanHelper.fromJson(json);
  	 System.out.println("testing CarePlan " + count++);
  	 careplanDao.create((CarePlan)result);
  	 result = careplanDao.find(((CarePlan)result).getId());
  	 assertEquals("Expect ", "gpvisit", ((CarePlan)result).getId());
  	 careplanDao.delete( (CarePlan)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-immunization-origin.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "immunization-origin", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-encounter-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "encounter-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-payment-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "payment-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-metric-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "metric-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-resource-validation-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "resource-validation-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-examples-general.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "3ad0687e-f477-468c-afd5-fcc2bf897809", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-additionalmaterials.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "additionalmaterials", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/attachment.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Attachment", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationstatementexample6.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationStatementHelper.fromJson(json);
  	 System.out.println("testing MedicationStatement " + count++);
  	 medicationstatementDao.create((MedicationStatement)result);
  	 result = medicationstatementDao.find(((MedicationStatement)result).getId());
  	 assertEquals("Expect ", "example006", ((MedicationStatement)result).getId());
  	 medicationstatementDao.delete( (MedicationStatement)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-rdf-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-rdf-type", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/auditevent-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AuditEventHelper.fromJson(json);
  	 System.out.println("testing AuditEvent " + count++);
  	 auditeventDao.create((AuditEvent)result);
  	 result = auditeventDao.find(((AuditEvent)result).getId());
  	 assertEquals("Expect ", "example", ((AuditEvent)result).getId());
  	 auditeventDao.delete( (AuditEvent)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-example-xcda-author.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerHelper.fromJson(json);
  	 System.out.println("testing Practitioner " + count++);
  	 practitionerDao.create((Practitioner)result);
  	 result = practitionerDao.find(((Practitioner)result).getId());
  	 assertEquals("Expect ", "xcda-author", ((Practitioner)result).getId());
  	 practitionerDao.delete( (Practitioner)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration0304.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationAdministrationHelper.fromJson(json);
  	 System.out.println("testing MedicationAdministration " + count++);
  	 medicationadministrationDao.create((MedicationAdministration)result);
  	 result = medicationadministrationDao.find(((MedicationAdministration)result).getId());
  	 assertEquals("Expect ", "medadmin0304", ((MedicationAdministration)result).getId());
  	 medicationadministrationDao.delete( (MedicationAdministration)result);

  	 inputFile = "../../fhir-data/examples-json/profiles-resources.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "resources", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedure-approachbodysite.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedure-approachBodySite", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-substance-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "substance-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/element.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Element", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/operation-list-find.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "List-find", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-assert-response-code-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "assert-response-code-types", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/allergyintolerance-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-ordinalvalue.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-ordinalValue", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-genetics-example-2-familyhistory.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DiagnosticReportHelper.fromJson(json);
  	 System.out.println("testing DiagnosticReport " + count++);
  	 diagnosticreportDao.create((DiagnosticReport)result);
  	 result = diagnosticreportDao.find(((DiagnosticReport)result).getId());
  	 assertEquals("Expect ", "dg2", ((DiagnosticReport)result).getId());
  	 diagnosticreportDao.delete( (DiagnosticReport)result);

  	 inputFile = "../../fhir-data/examples-json/documentreference.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "DocumentReference", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-conditional-read-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "conditional-read-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-action-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "action-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-narrative-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "narrative-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/coverage.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Coverage", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0330.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0330", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/organization-example-f002-burgers-card.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OrganizationHelper.fromJson(json);
  	 System.out.println("testing Organization " + count++);
  	 organizationDao.create((Organization)result);
  	 result = organizationDao.find(((Organization)result).getId());
  	 assertEquals("Expect ", "f002", ((Organization)result).getId());
  	 organizationDao.delete( (Organization)result);

  	 inputFile = "../../fhir-data/examples-json/extension-rendering-xhtml.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "rendering-xhtml", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/condition-extensions-Condition-based-on.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "condition-extensions-Condition-based-on", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-example-f204-ce.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerHelper.fromJson(json);
  	 System.out.println("testing Practitioner " + count++);
  	 practitionerDao.create((Practitioner)result);
  	 result = practitionerDao.find(((Practitioner)result).getId());
  	 assertEquals("Expect ", "f204", ((Practitioner)result).getId());
  	 practitionerDao.delete( (Practitioner)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-statement-taken.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-statement-taken", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-service-pharmacy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "service-pharmacy", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/eligibilityresponse-example-error.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EligibilityResponseHelper.fromJson(json);
  	 System.out.println("testing EligibilityResponse " + count++);
  	 eligibilityresponseDao.create((EligibilityResponse)result);
  	 result = eligibilityresponseDao.find(((EligibilityResponse)result).getId());
  	 assertEquals("Expect ", "E2503", ((EligibilityResponse)result).getId());
  	 eligibilityresponseDao.delete( (EligibilityResponse)result);

  	 inputFile = "../../fhir-data/examples-json/consent-example-notAuthor.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConsentHelper.fromJson(json);
  	 System.out.println("testing Consent " + count++);
  	 consentDao.create((Consent)result);
  	 result = consentDao.find(((Consent)result).getId());
  	 assertEquals("Expect ", "consent-example-notAuthor", ((Consent)result).getId());
  	 consentDao.delete( (Consent)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0307.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0307", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-guide-page-kind.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "guide-page-kind", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-benefit-subcategory.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "benefit-subcategory", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-ucum-bodyweight.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "ucum-bodyweight", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-patient-disability.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "patient-disability", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-auditevent-encrypted.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "auditevent-Encrypted", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/operation-capabilitystatement-subset.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "CapabilityStatement-subset", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/measure-exclusive-breastfeeding.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MeasureHelper.fromJson(json);
  	 System.out.println("testing Measure " + count++);
  	 measureDao.create((Measure)result);
  	 result = measureDao.find(((Measure)result).getId());
  	 assertEquals("Expect ", "measure-exclusive-breastfeeding", ((Measure)result).getId());
  	 measureDao.delete( (Measure)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-bodysite-laterality.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "bodysite-laterality", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/servicedefinition.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ServiceDefinition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-dataelement-stringency.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "dataelement-stringency", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/encounter.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Encounter", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-adverse-event-causality-method.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "adverse-event-causality-method", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/location-example-room.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LocationHelper.fromJson(json);
  	 System.out.println("testing Location " + count++);
  	 locationDao.create((Location)result);
  	 result = locationDao.find(((Location)result).getId());
  	 assertEquals("Expect ", "2", ((Location)result).getId());
  	 locationDao.delete( (Location)result);

  	 inputFile = "../../fhir-data/examples-json/processresponse-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcessResponseHelper.fromJson(json);
  	 System.out.println("testing ProcessResponse " + count++);
  	 processresponseDao.create((ProcessResponse)result);
  	 result = processresponseDao.find(((ProcessResponse)result).getId());
  	 assertEquals("Expect ", "SR2500", ((ProcessResponse)result).getId());
  	 processresponseDao.delete( (ProcessResponse)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-resource-type-link.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "resource-type-link", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder-example-energysupplement.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NutritionOrderHelper.fromJson(json);
  	 System.out.println("testing NutritionOrder " + count++);
  	 nutritionorderDao.create((NutritionOrder)result);
  	 result = nutritionorderDao.find(((NutritionOrder)result).getId());
  	 assertEquals("Expect ", "energysupplement", ((NutritionOrder)result).getId());
  	 nutritionorderDao.delete( (NutritionOrder)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-quantity-comparator.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "quantity-comparator", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/slot.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Slot", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticsallelename.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsAlleleName", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-composite-measure-scoring.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "composite-measure-scoring", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-action-condition-kind.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "action-condition-kind", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-humanname-fathers-family.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "humanname-fathers-family", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-device-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "device-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-maxsize.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "maxSize", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/careplan-example-f201-renal.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CarePlanHelper.fromJson(json);
  	 System.out.println("testing CarePlan " + count++);
  	 careplanDao.create((CarePlan)result);
  	 result = careplanDao.find(((CarePlan)result).getId());
  	 assertEquals("Expect ", "f201", ((CarePlan)result).getId());
  	 careplanDao.delete( (CarePlan)result);

  	 inputFile = "../../fhir-data/examples-json/extension-communicationrequest-orderedby.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "communicationrequest-orderedBy", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-event-partof.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "event-partOf", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-ex-program-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "ex-program-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-systemref.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-systemRef", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-operation-kind.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "operation-kind", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example-subrequest.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "subrequest", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/plandefinition-chlamydia-screening-intervention.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PlanDefinitionHelper.fromJson(json);
  	 System.out.println("testing PlanDefinition " + count++);
  	 plandefinitionDao.create((PlanDefinition)result);
  	 result = plandefinitionDao.find(((PlanDefinition)result).getId());
  	 assertEquals("Expect ", "chlamydia-screening-intervention", ((PlanDefinition)result).getId());
  	 plandefinitionDao.delete( (PlanDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-group-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "group-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/library-quick-model-definition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LibraryHelper.fromJson(json);
  	 System.out.println("testing Library " + count++);
  	 libraryDao.create((Library)result);
  	 result = libraryDao.find(((Library)result).getId());
  	 assertEquals("Expect ", "library-quick-model-definition", ((Library)result).getId());
  	 libraryDao.delete( (Library)result);

  	 inputFile = "../../fhir-data/examples-json/resprate-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-auditevent-mpps.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "auditevent-MPPS", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-procedure-outcome.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "procedure-outcome", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaireresponse-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireResponseHelper.fromJson(json);
  	 System.out.println("testing QuestionnaireResponse " + count++);
  	 questionnaireresponseDao.create((QuestionnaireResponse)result);
  	 result = questionnaireresponseDao.find(((QuestionnaireResponse)result).getId());
  	 assertEquals("Expect ", "3141", ((QuestionnaireResponse)result).getId());
  	 questionnaireresponseDao.delete( (QuestionnaireResponse)result);

  	 inputFile = "../../fhir-data/examples-json/medicationstatementexample4.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationStatementHelper.fromJson(json);
  	 System.out.println("testing MedicationStatement " + count++);
  	 medicationstatementDao.create((MedicationStatement)result);
  	 result = medicationstatementDao.find(((MedicationStatement)result).getId());
  	 assertEquals("Expect ", "example004", ((MedicationStatement)result).getId());
  	 medicationstatementDao.delete( (MedicationStatement)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-benefit-unit.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "benefit-unit", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-payment-adjustment-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "payment-adjustment-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-cqif-recommendation-strength.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "cqif-recommendation-strength", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-ex-paymenttype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "ex-paymenttype", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/processrequest-example-reprocess.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcessRequestHelper.fromJson(json);
  	 System.out.println("testing ProcessRequest " + count++);
  	 processrequestDao.create((ProcessRequest)result);
  	 result = processrequestDao.find(((ProcessRequest)result).getId());
  	 assertEquals("Expect ", "44654", ((ProcessRequest)result).getId());
  	 processrequestDao.delete( (ProcessRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-list-order.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "list-order", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/visionprescription-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-capabilitystatement-expectation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "capabilitystatement-expectation", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-adverse-event-causality-result.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "adverse-event-causality-result", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-audit-event-action.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "audit-event-action", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/patient-example-f201-roel.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "f201", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-supplement-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "supplement-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/vitalspanel.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "vitalspanel", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-example-ultrasound.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DiagnosticReportHelper.fromJson(json);
  	 System.out.println("testing DiagnosticReport " + count++);
  	 diagnosticreportDao.create((DiagnosticReport)result);
  	 result = diagnosticreportDao.find(((DiagnosticReport)result).getId());
  	 assertEquals("Expect ", "ultrasound", ((DiagnosticReport)result).getId());
  	 diagnosticreportDao.delete( (DiagnosticReport)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-identity-assuranceLevel.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "identity-assuranceLevel", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);
  	System.out.println("Total tests .. " + count);
  }
  @Test
  public void test1550() throws Exception {
  	 inputFile = "../../fhir-data/examples-json/structuredefinition-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "example", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-organization-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "organization-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-genetic-DiagnosticReport-assessed-condition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "diagnosticreport-genetic-DiagnosticReport-assessed-condition", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-benefit-term.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "benefit-term", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-substance-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "substance-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/time.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "time", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-encounter-diet.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "encounter-diet", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-animal-species.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "animal-species", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-service-uscls.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "service-uscls", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example-ob.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "ob", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-goal-reasonrejected.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "goal-reasonRejected", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-TPMT-diplotype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "example-TPMT-diplotype", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-admin-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-admin-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-extends.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "diagnosticReport-extends", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-goal-priority.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "goal-priority", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/imagingstudy-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ImagingStudyHelper.fromJson(json);
  	 System.out.println("testing ImagingStudy " + count++);
  	 imagingstudyDao.create((ImagingStudy)result);
  	 result = imagingstudyDao.find(((ImagingStudy)result).getId());
  	 assertEquals("Expect ", "example", ((ImagingStudy)result).getId());
  	 imagingstudyDao.delete( (ImagingStudy)result);

  	 inputFile = "../../fhir-data/examples-json/device-example-udi4.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DeviceHelper.fromJson(json);
  	 System.out.println("testing Device " + count++);
  	 deviceDao.create((Device)result);
  	 result = deviceDao.find(((Device)result).getId());
  	 assertEquals("Expect ", "example-udi4", ((Device)result).getId());
  	 deviceDao.delete( (Device)result);

  	 inputFile = "../../fhir-data/examples-json/uri.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "uri", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/date.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "date", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-communication-media.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "communication-media", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/person-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0314.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0314", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/extension-specimen-sequencenumber.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "specimen-sequenceNumber", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/organization-example-f203-bumc.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OrganizationHelper.fromJson(json);
  	 System.out.println("testing Organization " + count++);
  	 organizationDao.create((Organization)result);
  	 result = organizationDao.find(((Organization)result).getId());
  	 assertEquals("Expect ", "f203", ((Organization)result).getId());
  	 organizationDao.delete( (Organization)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedurerequest-reasonrejected.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedurerequest-reasonRejected", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-focal-subject.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-focal-subject", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-flag-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "flag-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-filter-operator.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "filter-operator", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0301.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0301", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/extension-patient-religion.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "patient-religion", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-relationship.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "relationship", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-item-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "item-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/namingsystem-registry.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "registry", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-condition-predecessor.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "condition-predecessor", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-adverse-event-causality-method.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "adverse-event-causality-method", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/code.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "code", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-organization-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "organization-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0325.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0325", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-choice-list-orientation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "choice-list-orientation", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/communicationrequest.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "CommunicationRequest", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/subscription-example-error.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SubscriptionHelper.fromJson(json);
  	 System.out.println("testing Subscription " + count++);
  	 subscriptionDao.create((Subscription)result);
  	 result = subscriptionDao.find(((Subscription)result).getId());
  	 assertEquals("Expect ", "example-error", ((Subscription)result).getId());
  	 subscriptionDao.delete( (Subscription)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-c80-doc-typecodes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "c80-doc-typecodes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "physiotherapy", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ProcedureRequest", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-plan-definition-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "plan-definition-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/endpoint.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Endpoint", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/encounter-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EncounterHelper.fromJson(json);
  	 System.out.println("testing Encounter " + count++);
  	 encounterDao.create((Encounter)result);
  	 result = encounterDao.find(((Encounter)result).getId());
  	 assertEquals("Expect ", "example", ((Encounter)result).getId());
  	 encounterDao.delete( (Encounter)result);

  	 inputFile = "../../fhir-data/examples-json/extension-elementdefinition-namespace.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "elementdefinition-namespace", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "example", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedure-incisiondatetime.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedure-incisionDateTime", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/bodysite-example-tumor.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BodySiteHelper.fromJson(json);
  	 System.out.println("testing BodySite " + count++);
  	 bodysiteDao.create((BodySite)result);
  	 result = bodysiteDao.find(((BodySite)result).getId());
  	 assertEquals("Expect ", "tumor", ((BodySite)result).getId());
  	 bodysiteDao.delete( (BodySite)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-conceptmap-unmapped-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "conceptmap-unmapped-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-identifier-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "identifier-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/cm-detectedissue-severity-v3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-detectedissue-severity-v3", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/group-example-member.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = GroupHelper.fromJson(json);
  	 System.out.println("testing Group " + count++);
  	 groupDao.create((Group)result);
  	 result = groupDao.find(((Group)result).getId());
  	 assertEquals("Expect ", "102", ((Group)result).getId());
  	 groupDao.delete( (Group)result);

  	 inputFile = "../../fhir-data/examples-json/composition-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CompositionHelper.fromJson(json);
  	 System.out.println("testing Composition " + count++);
  	 compositionDao.create((Composition)result);
  	 result = compositionDao.find(((Composition)result).getId());
  	 assertEquals("Expect ", "example", ((Composition)result).getId());
  	 compositionDao.delete( (Composition)result);

  	 inputFile = "../../fhir-data/examples-json/consent-example-notThem.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConsentHelper.fromJson(json);
  	 System.out.println("testing Consent " + count++);
  	 consentDao.create((Consent)result);
  	 result = consentDao.find(((Consent)result).getId());
  	 assertEquals("Expect ", "consent-example-notThem", ((Consent)result).getId());
  	 consentDao.delete( (Consent)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-binding-strength.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "binding-strength", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-rendered-value.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "rendered-value", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-trigger-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "trigger-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/list-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = FHIRListHelper.fromJson(json);
  	 System.out.println("testing FHIRList " + count++);
  	 fhirlistDao.create((FHIRList)result);
  	 result = fhirlistDao.find(((FHIRList)result).getId());
  	 assertEquals("Expect ", "example", ((FHIRList)result).getId());
  	 fhirlistDao.delete( (FHIRList)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example-ambulation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "ambulation", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-intervention.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "intervention", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-extensions-CodeSystem-keyword.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "codesystem-extensions-CodeSystem-keyword", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-action-relationship-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "action-relationship-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-publication-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "publication-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/allergyintolerance.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "AllergyIntolerance", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder-example-fiberrestricteddiet.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NutritionOrderHelper.fromJson(json);
  	 System.out.println("testing NutritionOrder " + count++);
  	 nutritionorderDao.create((NutritionOrder)result);
  	 result = nutritionorderDao.find(((NutritionOrder)result).getId());
  	 assertEquals("Expect ", "fiberrestricteddiet", ((NutritionOrder)result).getId());
  	 nutritionorderDao.delete( (NutritionOrder)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedure-method.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedure-method", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/compartmentdefinition-patient.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CompartmentDefinitionHelper.fromJson(json);
  	 System.out.println("testing CompartmentDefinition " + count++);
  	 compartmentdefinitionDao.create((CompartmentDefinition)result);
  	 result = compartmentdefinitionDao.find(((CompartmentDefinition)result).getId());
  	 assertEquals("Expect ", "patient", ((CompartmentDefinition)result).getId());
  	 compartmentdefinitionDao.delete( (CompartmentDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example-f003-abscess.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "f003", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/extension-operationoutcome-issue-source.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "operationoutcome-issue-source", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-event-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "event-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/bundle-transaction.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "bundle-transaction", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-definition-topic.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "definition-topic", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/encounter-example-f003-abscess.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EncounterHelper.fromJson(json);
  	 System.out.println("testing Encounter " + count++);
  	 encounterDao.create((Encounter)result);
  	 result = encounterDao.find(((Encounter)result).getId());
  	 assertEquals("Expect ", "f003", ((Encounter)result).getId());
  	 encounterDao.delete( (Encounter)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-encounter-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "encounter-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-compartment-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "compartment-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-probability-distribution-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "probability-distribution-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-service-modifiers.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "service-modifiers", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaireresponse-note.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaireresponse-note", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-consent-notificationendpoint.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "consent-NotificationEndpoint", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-udi-entry-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "udi-entry-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-device-action.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "device-action", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-map-input-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "map-input-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-supplydelivery-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "supplydelivery-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-ex-revenue-center.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "ex-revenue-center", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-sequence-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "sequence-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0318.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0318", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-label.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-label", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-consent-data-meaning.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "consent-data-meaning", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/visionprescription.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "VisionPrescription", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/account.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Account", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/processrequest-example-poll-exclusive.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcessRequestHelper.fromJson(json);
  	 System.out.println("testing ProcessRequest " + count++);
  	 processrequestDao.create((ProcessRequest)result);
  	 result = processrequestDao.find(((ProcessRequest)result).getId());
  	 assertEquals("Expect ", "1113", ((ProcessRequest)result).getId());
  	 processrequestDao.delete( (ProcessRequest)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-2minute-apgar-score.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "2minute-apgar-score", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-library-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "library-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-annotation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-annotation", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/graphdefinition.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "GraphDefinition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-hidden.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-hidden", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/substance-example-amoxicillin-clavulanate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SubstanceHelper.fromJson(json);
  	 System.out.println("testing Substance " + count++);
  	 substanceDao.create((Substance)result);
  	 result = substanceDao.find(((Substance)result).getId());
  	 assertEquals("Expect ", "f205", ((Substance)result).getId());
  	 substanceDao.delete( (Substance)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-supplydelivery-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "supplydelivery-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-refillsremaining.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "pharmacy-core-refillsRemaining", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/library-cms146-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LibraryHelper.fromJson(json);
  	 System.out.println("testing Library " + count++);
  	 libraryDao.create((Library)result);
  	 result = libraryDao.find(((Library)result).getId());
  	 assertEquals("Expect ", "library-cms146-example", ((Library)result).getId());
  	 libraryDao.delete( (Library)result);

  	 inputFile = "../../fhir-data/examples-json/extension-openehr-exposuredate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "openEHR-exposureDate", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-optionprefix.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-optionPrefix", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/condition-example-f003-abscess.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConditionHelper.fromJson(json);
  	 System.out.println("testing Condition " + count++);
  	 conditionDao.create((Condition)result);
  	 result = conditionDao.find(((Condition)result).getId());
  	 assertEquals("Expect ", "f003", ((Condition)result).getId());
  	 conditionDao.delete( (Condition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0326.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0326", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/supplyrequest-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-specimen-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "specimen-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-composition-attestation-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "composition-attestation-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/capabilitystatement-terminology-server.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CapabilityStatementHelper.fromJson(json);
  	 System.out.println("testing CapabilityStatement " + count++);
  	 capabilitystatementDao.create((CapabilityStatement)result);
  	 result = capabilitystatementDao.find(((CapabilityStatement)result).getId());
  	 assertEquals("Expect ", "terminology-server", ((CapabilityStatement)result).getId());
  	 capabilitystatementDao.delete( (CapabilityStatement)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-encounter-admit-source.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "encounter-admit-source", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-care-plan-intent.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "care-plan-intent", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-chromosome-human.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "chromosome-human", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-encounter-diet.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "encounter-diet", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/consent-example-signature.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConsentHelper.fromJson(json);
  	 System.out.println("testing Consent " + count++);
  	 consentDao.create((Consent)result);
  	 result = consentDao.find(((Consent)result).getId());
  	 assertEquals("Expect ", "consent-example-signature", ((Consent)result).getId());
  	 consentDao.delete( (Consent)result);

  	 inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-maxdeliveryvolume.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "pharmacy-core-maxDeliveryVolume", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-reference-handling-policy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "reference-handling-policy", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/searchparameter-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "example", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-endpoint-connection-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "endpoint-connection-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-specification-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "specification-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/location-example-patients-home.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LocationHelper.fromJson(json);
  	 System.out.println("testing Location " + count++);
  	 locationDao.create((Location)result);
  	 result = locationDao.find(((Location)result).getId());
  	 assertEquals("Expect ", "ph", ((Location)result).getId());
  	 locationDao.delete( (Location)result);

  	 inputFile = "../../fhir-data/examples-json/procedure.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Procedure", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-date-lastmp.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "date-lastmp", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/extension-condition-criticality.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "condition-criticality", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/group-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-conformance-expectation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "conformance-expectation", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/consent.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Consent", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/processrequest.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ProcessRequest", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-document-relationship-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "document-relationship-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0335.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0335", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-f205-egfr.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "f205", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/capabilitystatement-messagedefinition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CapabilityStatementHelper.fromJson(json);
  	 System.out.println("testing CapabilityStatement " + count++);
  	 capabilitystatementDao.create((CapabilityStatement)result);
  	 result = capabilitystatementDao.find(((CapabilityStatement)result).getId());
  	 assertEquals("Expect ", "messagedefinition", ((CapabilityStatement)result).getId());
  	 capabilitystatementDao.delete( (CapabilityStatement)result);

  	 inputFile = "../../fhir-data/examples-json/messagedefinition-patient-link-notification.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MessageDefinitionHelper.fromJson(json);
  	 System.out.println("testing MessageDefinition " + count++);
  	 messagedefinitionDao.create((MessageDefinition)result);
  	 result = messagedefinitionDao.find(((MessageDefinition)result).getId());
  	 assertEquals("Expect ", "patient-link-notification", ((MessageDefinition)result).getId());
  	 messagedefinitionDao.delete( (MessageDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-search-param-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "search-param-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-icd-10.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "icd-10", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-definition-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "definition-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/operation-questionnaire-populate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Questionnaire-populate", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-contactentity-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "contactentity-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-message-transport.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "message-transport", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-comments.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-comments", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-genetics-1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "example-genetics-1", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-episodeofcare-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "episodeofcare-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/riskassessment-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = RiskAssessmentHelper.fromJson(json);
  	 System.out.println("testing RiskAssessment " + count++);
  	 riskassessmentDao.create((RiskAssessment)result);
  	 result = riskassessmentDao.find(((RiskAssessment)result).getId());
  	 assertEquals("Expect ", "genetic", ((RiskAssessment)result).getId());
  	 riskassessmentDao.delete( (RiskAssessment)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0323.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0323", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-example-lipids.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DiagnosticReportHelper.fromJson(json);
  	 System.out.println("testing DiagnosticReport " + count++);
  	 diagnosticreportDao.create((DiagnosticReport)result);
  	 result = diagnosticreportDao.find(((DiagnosticReport)result).getId());
  	 assertEquals("Expect ", "lipids", ((DiagnosticReport)result).getId());
  	 diagnosticreportDao.delete( (DiagnosticReport)result);

  	 inputFile = "../../fhir-data/examples-json/testscript-example-rule.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = TestScriptHelper.fromJson(json);
  	 System.out.println("testing TestScript " + count++);
  	 testscriptDao.create((TestScript)result);
  	 result = testscriptDao.find(((TestScript)result).getId());
  	 assertEquals("Expect ", "testscript-example-rule", ((TestScript)result).getId());
  	 testscriptDao.delete( (TestScript)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-condition-ver-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "condition-ver-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0305.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0305", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/consent-example-notThis.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConsentHelper.fromJson(json);
  	 System.out.println("testing Consent " + count++);
  	 consentDao.create((Consent)result);
  	 result = consentDao.find(((Consent)result).getId());
  	 assertEquals("Expect ", "consent-example-notThis", ((Consent)result).getId());
  	 consentDao.delete( (Consent)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0324.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0324", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/devicerequest-example-insulinpump.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DeviceRequestHelper.fromJson(json);
  	 System.out.println("testing DeviceRequest " + count++);
  	 devicerequestDao.create((DeviceRequest)result);
  	 result = devicerequestDao.find(((DeviceRequest)result).getId());
  	 assertEquals("Expect ", "insulinpump", ((DeviceRequest)result).getId());
  	 devicerequestDao.delete( (DeviceRequest)result);

  	 inputFile = "../../fhir-data/examples-json/sequence-example-pgx-2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "example-pgx-2", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-explicit-type-name.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-explicit-type-name", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-f002-excess.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "f002", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-immunization-recommendation-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "immunization-recommendation-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0317.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0317", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/schedule.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Schedule", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticsdnavariantid.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsDNAVariantId", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/searchparameter-example-reference.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "example-reference", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-adverse-event-causality-result.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "adverse-event-causality-result", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-audit-event-action.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "audit-event-action", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/slot-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SlotHelper.fromJson(json);
  	 System.out.println("testing Slot " + count++);
  	 slotDao.create((Slot)result);
  	 result = slotDao.find(((Slot)result).getId());
  	 assertEquals("Expect ", "example", ((Slot)result).getId());
  	 slotDao.delete( (Slot)result);

  	 inputFile = "../../fhir-data/examples-json/messagedefinition-patient-link-response.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MessageDefinitionHelper.fromJson(json);
  	 System.out.println("testing MessageDefinition " + count++);
  	 messagedefinitionDao.create((MessageDefinition)result);
  	 result = messagedefinitionDao.find(((MessageDefinition)result).getId());
  	 assertEquals("Expect ", "patient-link-response", ((MessageDefinition)result).getId());
  	 messagedefinitionDao.delete( (MessageDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/shareablecodesystem-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/clinicalimpression-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClinicalImpressionHelper.fromJson(json);
  	 System.out.println("testing ClinicalImpression " + count++);
  	 clinicalimpressionDao.create((ClinicalImpression)result);
  	 result = clinicalimpressionDao.find(((ClinicalImpression)result).getId());
  	 assertEquals("Expect ", "example", ((ClinicalImpression)result).getId());
  	 clinicalimpressionDao.delete( (ClinicalImpression)result);

  	 inputFile = "../../fhir-data/examples-json/endpoint-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EndpointHelper.fromJson(json);
  	 System.out.println("testing Endpoint " + count++);
  	 endpointDao.create((Endpoint)result);
  	 result = endpointDao.find(((Endpoint)result).getId());
  	 assertEquals("Expect ", "example", ((Endpoint)result).getId());
  	 endpointDao.delete( (Endpoint)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0316.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0316", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-policyholder-relationship.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "policyholder-relationship", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-reaction-event-certainty.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "reaction-event-certainty", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-namingsystem-identifier-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "namingsystem-identifier-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-metric-calibration-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "metric-calibration-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-consent-content-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "consent-content-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-request-priority.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "request-priority", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-statement-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-statement-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/observation-genetic-Observation-gene-identifier.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "observation-genetic-Observation-gene-identifier", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/devicecomponent.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "DeviceComponent", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-data-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "data-types", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/slot-example-busy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SlotHelper.fromJson(json);
  	 System.out.println("testing Slot " + count++);
  	 slotDao.create((Slot)result);
  	 result = slotDao.find(((Slot)result).getId());
  	 assertEquals("Expect ", "1", ((Slot)result).getId());
  	 slotDao.delete( (Slot)result);

  	 inputFile = "../../fhir-data/examples-json/patient-extensions-Patient-mothersMaidenName.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "patient-extensions-Patient-mothersMaidenName", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-f004-erythrocyte.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "f004", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-assert-direction-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "assert-direction-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-observation-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "observation-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-auditevent-sopclass.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "auditevent-SOPClass", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-summaryof.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "diagnosticReport-summaryOf", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0316.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0316", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/device.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Device", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "MedicationRequest", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-signature-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "signature-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/plandefinition-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PlanDefinitionHelper.fromJson(json);
  	 System.out.println("testing PlanDefinition " + count++);
  	 plandefinitionDao.create((PlanDefinition)result);
  	 result = plandefinitionDao.find(((PlanDefinition)result).getId());
  	 assertEquals("Expect ", "low-suicide-risk-order-set", ((PlanDefinition)result).getId());
  	 plandefinitionDao.delete( (PlanDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/measure-component-b-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MeasureHelper.fromJson(json);
  	 System.out.println("testing Measure " + count++);
  	 measureDao.create((Measure)result);
  	 result = measureDao.find(((Measure)result).getId());
  	 assertEquals("Expect ", "component-b-example", ((Measure)result).getId());
  	 measureDao.delete( (Measure)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-location-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "location-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/claimresponse.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ClaimResponse", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0314.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0314", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/extension-patient-mothersmaidenname.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "patient-mothersMaidenName", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/condition-example-f202-malignancy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConditionHelper.fromJson(json);
  	 System.out.println("testing Condition " + count++);
  	 conditionDao.create((Condition)result);
  	 result = conditionDao.find(((Condition)result).getId());
  	 assertEquals("Expect ", "f202", ((Condition)result).getId());
  	 conditionDao.delete( (Condition)result);

  	 inputFile = "../../fhir-data/examples-json/location.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Location", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-unknown-content-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "unknown-content-code", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-metric-operational-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "metric-operational-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-allerg-intol-substance-exp-risk.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "allerg-intol-substance-exp-risk", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/condition-example-f201-fever.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConditionHelper.fromJson(json);
  	 System.out.println("testing Condition " + count++);
  	 conditionDao.create((Condition)result);
  	 result = conditionDao.find(((Condition)result).getId());
  	 assertEquals("Expect ", "f201", ((Condition)result).getId());
  	 conditionDao.delete( (Condition)result);

  	 inputFile = "../../fhir-data/examples-json/compartmentdefinition-encounter.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CompartmentDefinitionHelper.fromJson(json);
  	 System.out.println("testing CompartmentDefinition " + count++);
  	 compartmentdefinitionDao.create((CompartmentDefinition)result);
  	 result = compartmentdefinitionDao.find(((CompartmentDefinition)result).getId());
  	 assertEquals("Expect ", "encounter", ((CompartmentDefinition)result).getId());
  	 compartmentdefinitionDao.delete( (CompartmentDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-goal-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "goal-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/measurereport.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "MeasureReport", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-extensions-ValueSet-end.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "valueset-extensions-ValueSet-end", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/period.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Period", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-claim-exception.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "claim-exception", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example-f201-tpf.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "f201", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/bmi.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "bmi", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-report-result-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "report-result-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-immunization-recommendation-target-disease.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "immunization-recommendation-target-disease", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/message-request-link.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "10bb101f-a121-4264-a920-67be9cb82c74", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder-example-pureeddiet-simple.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NutritionOrderHelper.fromJson(json);
  	 System.out.println("testing NutritionOrder " + count++);
  	 nutritionorderDao.create((NutritionOrder)result);
  	 result = nutritionorderDao.find(((NutritionOrder)result).getId());
  	 assertEquals("Expect ", "pureeddiet-simple", ((NutritionOrder)result).getId());
  	 nutritionorderDao.delete( (NutritionOrder)result);

  	 inputFile = "../../fhir-data/examples-json/careplan-example-obesity-narrative.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CarePlanHelper.fromJson(json);
  	 System.out.println("testing CarePlan " + count++);
  	 careplanDao.create((CarePlan)result);
  	 result = careplanDao.find(((CarePlan)result).getId());
  	 assertEquals("Expect ", "obesity-narrative", ((CarePlan)result).getId());
  	 careplanDao.delete( (CarePlan)result);

  	 inputFile = "../../fhir-data/examples-json/guidanceresponse.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "GuidanceResponse", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/range.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Range", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/account-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/communication-example-fm-solicited-attachment.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CommunicationHelper.fromJson(json);
  	 System.out.println("testing Communication " + count++);
  	 communicationDao.create((Communication)result);
  	 result = communicationDao.find(((Communication)result).getId());
  	 assertEquals("Expect ", "fm-solicited", ((Communication)result).getId());
  	 communicationDao.delete( (Communication)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-vision-product.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "vision-product", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/imagingmanifest-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ImagingManifestHelper.fromJson(json);
  	 System.out.println("testing ImagingManifest " + count++);
  	 imagingmanifestDao.create((ImagingManifest)result);
  	 result = imagingmanifestDao.find(((ImagingManifest)result).getId());
  	 assertEquals("Expect ", "example", ((ImagingManifest)result).getId());
  	 imagingmanifestDao.delete( (ImagingManifest)result);

  	 inputFile = "../../fhir-data/examples-json/structuremap-supplyrequest-transform.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureMapHelper.fromJson(json);
  	 System.out.println("testing StructureMap " + count++);
  	 structuremapDao.create((StructureMap)result);
  	 result = structuremapDao.find(((StructureMap)result).getId());
  	 assertEquals("Expect ", "supplyrequest-transform", ((StructureMap)result).getId());
  	 structuremapDao.delete( (StructureMap)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-medication-admin-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "medication-admin-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/operation-patient-everything.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Patient-everything", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/dataelement-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DataElementHelper.fromJson(json);
  	 System.out.println("testing DataElement " + count++);
  	 dataelementDao.create((DataElement)result);
  	 result = dataelementDao.find(((DataElement)result).getId());
  	 assertEquals("Expect ", "gender", ((DataElement)result).getId());
  	 dataelementDao.delete( (DataElement)result);

  	 inputFile = "../../fhir-data/examples-json/operation-messageheader-process-message.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "MessageHeader-process-message", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-medication-request-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "medication-request-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/researchsubject-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-audit-event-outcome.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "audit-event-outcome", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-restful-capability-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "restful-capability-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-en-representation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-EN-representation", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-intervention.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "intervention", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/implementationguide-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ImplementationGuideHelper.fromJson(json);
  	 System.out.println("testing ImplementationGuide " + count++);
  	 implementationguideDao.create((ImplementationGuide)result);
  	 result = implementationguideDao.find(((ImplementationGuide)result).getId());
  	 assertEquals("Expect ", "example", ((ImplementationGuide)result).getId());
  	 implementationguideDao.delete( (ImplementationGuide)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-publication-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "publication-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/library-exclusive-breastfeeding-cqm-logic.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LibraryHelper.fromJson(json);
  	 System.out.println("testing Library " + count++);
  	 libraryDao.create((Library)result);
  	 result = libraryDao.find(((Library)result).getId());
  	 assertEquals("Expect ", "library-exclusive-breastfeeding-cqm-logic", ((Library)result).getId());
  	 libraryDao.delete( (Library)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-history-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "history-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-unclosed.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-unclosed", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-composition-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "composition-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/device-example-udi1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DeviceHelper.fromJson(json);
  	 System.out.println("testing Device " + count++);
  	 deviceDao.create((Device)result);
  	 result = deviceDao.find(((Device)result).getId());
  	 assertEquals("Expect ", "example-udi1", ((Device)result).getId());
  	 deviceDao.delete( (Device)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-usps-state.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "usps-state", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-action-grouping-behavior.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "action-grouping-behavior", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/dataelements.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "dataelements", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/measurereport-cms146-cat1-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MeasureReportHelper.fromJson(json);
  	 System.out.println("testing MeasureReport " + count++);
  	 measurereportDao.create((MeasureReport)result);
  	 result = measurereportDao.find(((MeasureReport)result).getId());
  	 assertEquals("Expect ", "measurereport-cms146-cat1-example", ((MeasureReport)result).getId());
  	 measurereportDao.delete( (MeasureReport)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-claim-careteamrole.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "claim-careteamrole", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-11179-objectclass.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "11179-objectClass", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0329.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0329", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-reaction-event-severity.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "reaction-event-severity", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/condition-extensions-Condition-definition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "condition-extensions-Condition-definition", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-heart-rate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "heart-rate", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/practitionerrole-examples-general.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "3ad0687e-f477-468c-afd5-fcc2bf897808", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/coding.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Coding", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/measure-cms146-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MeasureHelper.fromJson(json);
  	 System.out.println("testing Measure " + count++);
  	 measureDao.create((Measure)result);
  	 result = measureDao.find(((Measure)result).getId());
  	 assertEquals("Expect ", "measure-cms146-example", ((Measure)result).getId());
  	 measureDao.delete( (Measure)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-relationship.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "relationship", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-device-safety.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "device-safety", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-goal-start-event.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "goal-start-event", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/ldlcholesterol.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ldlcholesterol", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-chargeitem-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "chargeitem-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-report-action-result-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "report-action-result-codes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/compartmentdefinition-practitioner.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CompartmentDefinitionHelper.fromJson(json);
  	 System.out.println("testing CompartmentDefinition " + count++);
  	 compartmentdefinitionDao.create((CompartmentDefinition)result);
  	 result = compartmentdefinitionDao.find(((CompartmentDefinition)result).getId());
  	 assertEquals("Expect ", "practitioner", ((CompartmentDefinition)result).getId());
  	 compartmentdefinitionDao.delete( (CompartmentDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-profile-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "profile-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-episode-of-care-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "episode-of-care-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-direction.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-direction", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/consent-example-notTime.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConsentHelper.fromJson(json);
  	 System.out.println("testing Consent " + count++);
  	 consentDao.create((Consent)result);
  	 result = consentDao.find(((Consent)result).getId());
  	 assertEquals("Expect ", "consent-example-notTime", ((Consent)result).getId());
  	 consentDao.delete( (Consent)result);

  	 inputFile = "../../fhir-data/examples-json/enrollmentrequest-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EnrollmentRequestHelper.fromJson(json);
  	 System.out.println("testing EnrollmentRequest " + count++);
  	 enrollmentrequestDao.create((EnrollmentRequest)result);
  	 result = enrollmentrequestDao.find(((EnrollmentRequest)result).getId());
  	 assertEquals("Expect ", "22345", ((EnrollmentRequest)result).getId());
  	 enrollmentrequestDao.delete( (EnrollmentRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-questionnaire-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "questionnaire-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-resource-validation-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "resource-validation-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-example-pgx.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DiagnosticReportHelper.fromJson(json);
  	 System.out.println("testing DiagnosticReport " + count++);
  	 diagnosticreportDao.create((DiagnosticReport)result);
  	 result = diagnosticreportDao.find(((DiagnosticReport)result).getId());
  	 assertEquals("Expect ", "example-pgx", ((DiagnosticReport)result).getId());
  	 diagnosticreportDao.delete( (DiagnosticReport)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-delimiter.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-delimiter", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-care-plan-intent.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "care-plan-intent", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-patient-citizenship.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "patient-citizenship", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/servicedefinition-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-elementdefinition-equivalence.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "elementdefinition-equivalence", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/operation-library-data-requirements.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Library-data-requirements", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-common-tags.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "common-tags", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-conditional-delete-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "conditional-delete-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/supplyrequest-example-simpleorder.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SupplyRequestHelper.fromJson(json);
  	 System.out.println("testing SupplyRequest " + count++);
  	 supplyrequestDao.create((SupplyRequest)result);
  	 result = supplyrequestDao.find(((SupplyRequest)result).getId());
  	 assertEquals("Expect ", "simpleorder", ((SupplyRequest)result).getId());
  	 supplyrequestDao.delete( (SupplyRequest)result);

  	 inputFile = "../../fhir-data/examples-json/conceptmap-103.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "103", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-diplotype1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "example-diplotype1", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-example-summary.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "summary", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/uuid.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "uuid", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-definition-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "definition-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-animal-genderstatus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "animal-genderstatus", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticsgenomicsourceclass.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsGenomicSourceClass", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/documentreference-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DocumentReferenceHelper.fromJson(json);
  	 System.out.println("testing DocumentReference " + count++);
  	 documentreferenceDao.create((DocumentReference)result);
  	 result = documentreferenceDao.find(((DocumentReference)result).getId());
  	 assertEquals("Expect ", "example", ((DocumentReference)result).getId());
  	 documentreferenceDao.delete( (DocumentReference)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-adverse-event-causality-assess.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "adverse-event-causality-assess", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration0311.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationAdministrationHelper.fromJson(json);
  	 System.out.println("testing MedicationAdministration " + count++);
  	 medicationadministrationDao.create((MedicationAdministration)result);
  	 result = medicationadministrationDao.find(((MedicationAdministration)result).getId());
  	 assertEquals("Expect ", "medadmin0311", ((MedicationAdministration)result).getId());
  	 medicationadministrationDao.delete( (MedicationAdministration)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-copy-number-event.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "copy-number-event", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/operation-questionnaire-populatehtml.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Questionnaire-populatehtml", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-observation-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "observation-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-studyprotocolidentifier.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-studyprotocolIdentifier", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-goal-priority.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "goal-priority", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);
  	System.out.println("Total tests .. " + count);
  }
  @Test
  public void test1860() throws Exception {
  	 inputFile = "../../fhir-data/examples-json/valueset-classification-or-context.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "classification-or-context", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/cm-contact-point-use-v2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-contact-point-use-v2", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0312.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0312", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/extension-capabilitystatement-prohibited.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "capabilitystatement-prohibited", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/group-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = GroupHelper.fromJson(json);
  	 System.out.println("testing Group " + count++);
  	 groupDao.create((Group)result);
  	 result = groupDao.find(((Group)result).getId());
  	 assertEquals("Expect ", "101", ((Group)result).getId());
  	 groupDao.delete( (Group)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-contract-action.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "contract-action", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-days-of-week.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "days-of-week", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-TPMT-haplotype-two.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "example-TPMT-haplotype-two", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-action-required-behavior.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "action-required-behavior", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-rendering-markdown.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "rendering-markdown", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/conceptmaps.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "conceptmaps", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-task-performer-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "task-performer-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-assert-operator-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "assert-operator-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-example-f202-lm.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerHelper.fromJson(json);
  	 System.out.println("testing Practitioner " + count++);
  	 practitionerDao.create((Practitioner)result);
  	 result = practitionerDao.find(((Practitioner)result).getId());
  	 assertEquals("Expect ", "f202", ((Practitioner)result).getId());
  	 practitionerDao.delete( (Practitioner)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-address-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "address-use", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/capabilitystatement-base.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CapabilityStatementHelper.fromJson(json);
  	 System.out.println("testing CapabilityStatement " + count++);
  	 capabilitystatementDao.create((CapabilityStatement)result);
  	 result = capabilitystatementDao.find(((CapabilityStatement)result).getId());
  	 assertEquals("Expect ", "base", ((CapabilityStatement)result).getId());
  	 capabilitystatementDao.delete( (CapabilityStatement)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-tooth.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "tooth", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-note-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "note-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-diagnosis-role.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "diagnosis-role", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-coverage-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "coverage-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-adverse-event-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "adverse-event-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/person-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PersonHelper.fromJson(json);
  	 System.out.println("testing Person " + count++);
  	 personDao.create((Person)result);
  	 result = personDao.find(((Person)result).getId());
  	 assertEquals("Expect ", "example", ((Person)result).getId());
  	 personDao.delete( (Person)result);

  	 inputFile = "../../fhir-data/examples-json/processresponse-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/capabilitystatement-knowledge-repository.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CapabilityStatementHelper.fromJson(json);
  	 System.out.println("testing CapabilityStatement " + count++);
  	 capabilitystatementDao.create((CapabilityStatement)result);
  	 result = capabilitystatementDao.find(((CapabilityStatement)result).getId());
  	 assertEquals("Expect ", "knowledge-repository", ((CapabilityStatement)result).getId());
  	 capabilitystatementDao.delete( (CapabilityStatement)result);

  	 inputFile = "../../fhir-data/examples-json/id.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "id", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-care-plan-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "care-plan-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-fmm.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-fmm", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-family-member-history-genetics-parent.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "family-member-history-genetics-parent", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-service-place.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "service-place", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/plandefinition.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "PlanDefinition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/eligibilityresponse-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EligibilityResponseHelper.fromJson(json);
  	 System.out.println("testing EligibilityResponse " + count++);
  	 eligibilityresponseDao.create((EligibilityResponse)result);
  	 result = eligibilityresponseDao.find(((EligibilityResponse)result).getId());
  	 assertEquals("Expect ", "E2500", ((EligibilityResponse)result).getId());
  	 eligibilityresponseDao.delete( (EligibilityResponse)result);

  	 inputFile = "../../fhir-data/examples-json/organization-example-f201-aumc.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OrganizationHelper.fromJson(json);
  	 System.out.println("testing Organization " + count++);
  	 organizationDao.create((Organization)result);
  	 result = organizationDao.find(((Organization)result).getId());
  	 assertEquals("Expect ", "f201", ((Organization)result).getId());
  	 organizationDao.delete( (Organization)result);

  	 inputFile = "../../fhir-data/examples-json/guidanceresponse-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = GuidanceResponseHelper.fromJson(json);
  	 System.out.println("testing GuidanceResponse " + count++);
  	 guidanceresponseDao.create((GuidanceResponse)result);
  	 result = guidanceresponseDao.find(((GuidanceResponse)result).getId());
  	 assertEquals("Expect ", "example", ((GuidanceResponse)result).getId());
  	 guidanceresponseDao.delete( (GuidanceResponse)result);

  	 inputFile = "../../fhir-data/examples-json/person-grahame.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PersonHelper.fromJson(json);
  	 System.out.println("testing Person " + count++);
  	 personDao.create((Person)result);
  	 result = personDao.find(((Person)result).getId());
  	 assertEquals("Expect ", "grahame", ((Person)result).getId());
  	 personDao.delete( (Person)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-care-plan-activity-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "care-plan-activity-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/organization-example-good-health-care.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OrganizationHelper.fromJson(json);
  	 System.out.println("testing Organization " + count++);
  	 organizationDao.create((Organization)result);
  	 result = organizationDao.find(((Organization)result).getId());
  	 assertEquals("Expect ", "2.16.840.1.113883.19.5", ((Organization)result).getId());
  	 organizationDao.delete( (Organization)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-participantrequired.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "participantrequired", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-contract-term-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "contract-term-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-service-provision-conditions.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "service-provision-conditions", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/sequence-graphic-example-3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "graphic-example-3", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-icd-10-procedures.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "icd-10-procedures", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-map-transform.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "map-transform", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-observation-statistics.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "observation-statistics", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/cm-address-type-v3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-address-type-v3", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0308.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0308", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-transaction-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "transaction-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/consent-example-grantor.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConsentHelper.fromJson(json);
  	 System.out.println("testing Consent " + count++);
  	 consentDao.create((Consent)result);
  	 result = consentDao.find(((Consent)result).getId());
  	 assertEquals("Expect ", "consent-example-grantor", ((Consent)result).getId());
  	 consentDao.delete( (Consent)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-nutrition-request-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "nutrition-request-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/detectedissue-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-referencerange-meaning.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "referencerange-meaning", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-goal-pertainstogoal.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "goal-pertainsToGoal", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-procedure-progress-status-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "procedure-progress-status-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-activity-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "activity-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-request-intent.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "request-intent", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/shareablevalueset-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-match-grade.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "match-grade", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-concept-property-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "concept-property-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/patient-extensions-Patient-age.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "patient-extensions-Patient-age", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-pharmacy-medication.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "760151", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/specimen-example-urine.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SpecimenHelper.fromJson(json);
  	 System.out.println("testing Specimen " + count++);
  	 specimenDao.create((Specimen)result);
  	 result = specimenDao.find(((Specimen)result).getId());
  	 assertEquals("Expect ", "vma-urine", ((Specimen)result).getId());
  	 specimenDao.delete( (Specimen)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaire-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/bodylength.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "bodylength", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/sequence-complex-variant.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "sequence-complex-variant", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-ucum-bodylength.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "ucum-bodylength", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-bmi.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "bmi", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-condition-cause.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "condition-cause", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/capabilitystatement-measure-processor.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CapabilityStatementHelper.fromJson(json);
  	 System.out.println("testing CapabilityStatement " + count++);
  	 capabilitystatementDao.create((CapabilityStatement)result);
  	 result = capabilitystatementDao.find(((CapabilityStatement)result).getId());
  	 assertEquals("Expect ", "measure-processor", ((CapabilityStatement)result).getId());
  	 capabilitystatementDao.delete( (CapabilityStatement)result);

  	 inputFile = "../../fhir-data/examples-json/extension-resource-effectiveperiod.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "resource-effectivePeriod", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/operation-valueset-validate-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "ValueSet-validate-code", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-map-context-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "map-context-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-issue-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "issue-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/measurereport-cms146-cat2-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MeasureReportHelper.fromJson(json);
  	 System.out.println("testing MeasureReport " + count++);
  	 measurereportDao.create((MeasureReport)result);
  	 result = measurereportDao.find(((MeasureReport)result).getId());
  	 assertEquals("Expect ", "measurereport-cms146-cat2-example", ((MeasureReport)result).getId());
  	 measurereportDao.delete( (MeasureReport)result);

  	 inputFile = "../../fhir-data/examples-json/patient-example-animal.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "animal", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-constraint-severity.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "constraint-severity", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-mapsourcepublisher.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "mapSourcePublisher", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-endpoint-connection-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "endpoint-connection-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-device-kind.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "device-kind", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/library-mmi-suiciderisk-orderset-logic.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LibraryHelper.fromJson(json);
  	 System.out.println("testing Library " + count++);
  	 libraryDao.create((Library)result);
  	 result = libraryDao.find(((Library)result).getId());
  	 assertEquals("Expect ", "suiciderisk-orderset-logic", ((Library)result).getId());
  	 libraryDao.delete( (Library)result);

  	 inputFile = "../../fhir-data/examples-json/processrequest-example-poll-payrec.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcessRequestHelper.fromJson(json);
  	 System.out.println("testing ProcessRequest " + count++);
  	 processrequestDao.create((ProcessRequest)result);
  	 result = processrequestDao.find(((ProcessRequest)result).getId());
  	 assertEquals("Expect ", "1114", ((ProcessRequest)result).getId());
  	 processrequestDao.delete( (ProcessRequest)result);

  	 inputFile = "../../fhir-data/examples-json/patient-example-f001-pieter.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "f001", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-observation-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "observation-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-episode-of-care-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "episode-of-care-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-action-cardinality-behavior.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "action-cardinality-behavior", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "NutritionOrder", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/backboneelement.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "BackboneElement", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/researchstudy-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/processrequest-example-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcessRequestHelper.fromJson(json);
  	 System.out.println("testing ProcessRequest " + count++);
  	 processrequestDao.create((ProcessRequest)result);
  	 result = processrequestDao.find(((ProcessRequest)result).getId());
  	 assertEquals("Expect ", "87655", ((ProcessRequest)result).getId());
  	 processrequestDao.delete( (ProcessRequest)result);

  	 inputFile = "../../fhir-data/examples-json/reference.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Reference", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-operational-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "operational-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-questionnaire-usage-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "questionnaire-usage-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-linkage-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "linkage-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-allergy-clinical-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "allergy-clinical-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-history.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-history", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-related-artifact-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "related-artifact-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-specification-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "specification-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-20minute-apgar-score.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "20minute-apgar-score", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-restful-security-service.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "restful-security-service", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationstatementexample5.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationStatementHelper.fromJson(json);
  	 System.out.println("testing MedicationStatement " + count++);
  	 medicationstatementDao.create((MedicationStatement)result);
  	 result = medicationstatementDao.find(((MedicationStatement)result).getId());
  	 assertEquals("Expect ", "example005", ((MedicationStatement)result).getId());
  	 medicationstatementDao.delete( (MedicationStatement)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-name-assembly-order.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "name-assembly-order", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/operationdefinition-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "example", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/encounter-example-f202-20130128.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EncounterHelper.fromJson(json);
  	 System.out.println("testing Encounter " + count++);
  	 encounterDao.create((Encounter)result);
  	 result = encounterDao.find(((Encounter)result).getId());
  	 assertEquals("Expect ", "f202", ((Encounter)result).getId());
  	 encounterDao.delete( (Encounter)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-explanationofbenefit-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "explanationofbenefit-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-systemname.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-systemName", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-ucum-bodytemp.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "ucum-bodytemp", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-benefit-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "benefit-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-contract-actorrole.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "contract-actorrole", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-condition-state.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "condition-state", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-contract-subtype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "contract-subtype", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/plandefinition-exclusive-breastfeeding-intervention-04.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PlanDefinitionHelper.fromJson(json);
  	 System.out.println("testing PlanDefinition " + count++);
  	 plandefinitionDao.create((PlanDefinition)result);
  	 result = plandefinitionDao.find(((PlanDefinition)result).getId());
  	 assertEquals("Expect ", "exclusive-breastfeeding-intervention-04", ((PlanDefinition)result).getId());
  	 plandefinitionDao.delete( (PlanDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-nullflavor.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-nullFlavor", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/familymemberhistory-genetic-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/paymentreconciliation-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PaymentReconciliationHelper.fromJson(json);
  	 System.out.println("testing PaymentReconciliation " + count++);
  	 paymentreconciliationDao.create((PaymentReconciliation)result);
  	 result = paymentreconciliationDao.find(((PaymentReconciliation)result).getId());
  	 assertEquals("Expect ", "ER2500", ((PaymentReconciliation)result).getId());
  	 paymentreconciliationDao.delete( (PaymentReconciliation)result);

  	 inputFile = "../../fhir-data/examples-json/extension-hla-genotyping-results-method.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "hla-genotyping-results-method", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaire-example-f201-lifelines.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "f201", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispenseexample8.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp008", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaire-profile-example-ussg-fht.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "ussg-fht", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/subscription-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SubscriptionHelper.fromJson(json);
  	 System.out.println("testing Subscription " + count++);
  	 subscriptionDao.create((Subscription)result);
  	 result = subscriptionDao.find(((Subscription)result).getId());
  	 assertEquals("Expect ", "example", ((Subscription)result).getId());
  	 subscriptionDao.delete( (Subscription)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-contactentity-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "contactentity-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/device-example-software.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DeviceHelper.fromJson(json);
  	 System.out.println("testing Device " + count++);
  	 deviceDao.create((Device)result);
  	 result = deviceDao.find(((Device)result).getId());
  	 assertEquals("Expect ", "software", ((Device)result).getId());
  	 deviceDao.delete( (Device)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-contract-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "contract-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/testreport-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = TestReportHelper.fromJson(json);
  	 System.out.println("testing TestReport " + count++);
  	 testreportDao.create((TestReport)result);
  	 result = testreportDao.find(((TestReport)result).getId());
  	 assertEquals("Expect ", "testreport-example", ((TestReport)result).getId());
  	 testreportDao.delete( (TestReport)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0310.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0310", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-payeetype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "payeetype", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-patient-importance.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "patient-importance", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/requestgroup.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "RequestGroup", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-example-intensional.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "example-intensional", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/requestgroup-kdn5-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = RequestGroupHelper.fromJson(json);
  	 System.out.println("testing RequestGroup " + count++);
  	 requestgroupDao.create((RequestGroup)result);
  	 result = requestgroupDao.find(((RequestGroup)result).getId());
  	 assertEquals("Expect ", "kdn5-example", ((RequestGroup)result).getId());
  	 requestgroupDao.delete( (RequestGroup)result);

  	 inputFile = "../../fhir-data/examples-json/processrequest-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcessRequestHelper.fromJson(json);
  	 System.out.println("testing ProcessRequest " + count++);
  	 processrequestDao.create((ProcessRequest)result);
  	 result = processrequestDao.find(((ProcessRequest)result).getId());
  	 assertEquals("Expect ", "1110", ((ProcessRequest)result).getId());
  	 processrequestDao.delete( (ProcessRequest)result);

  	 inputFile = "../../fhir-data/examples-json/expansionprofile-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ExpansionProfileHelper.fromJson(json);
  	 System.out.println("testing ExpansionProfile " + count++);
  	 expansionprofileDao.create((ExpansionProfile)result);
  	 result = expansionprofileDao.find(((ExpansionProfile)result).getId());
  	 assertEquals("Expect ", "example", ((ExpansionProfile)result).getId());
  	 expansionprofileDao.delete( (ExpansionProfile)result);

  	 inputFile = "../../fhir-data/examples-json/provenance-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProvenanceHelper.fromJson(json);
  	 System.out.println("testing Provenance " + count++);
  	 provenanceDao.create((Provenance)result);
  	 result = provenanceDao.find(((Provenance)result).getId());
  	 assertEquals("Expect ", "example", ((Provenance)result).getId());
  	 provenanceDao.delete( (Provenance)result);

  	 inputFile = "../../fhir-data/examples-json/plandefinition-example-kdn5-simplified.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PlanDefinitionHelper.fromJson(json);
  	 System.out.println("testing PlanDefinition " + count++);
  	 plandefinitionDao.create((PlanDefinition)result);
  	 result = plandefinitionDao.find(((PlanDefinition)result).getId());
  	 assertEquals("Expect ", "KDN5", ((PlanDefinition)result).getId());
  	 plandefinitionDao.delete( (PlanDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/processresponse-example-error.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcessResponseHelper.fromJson(json);
  	 System.out.println("testing ProcessResponse " + count++);
  	 processresponseDao.create((ProcessResponse)result);
  	 result = processresponseDao.find(((ProcessResponse)result).getId());
  	 assertEquals("Expect ", "SR2349", ((ProcessResponse)result).getId());
  	 processresponseDao.delete( (ProcessResponse)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-procedure-not-performed-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "procedure-not-performed-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-communication-not-done-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "communication-not-done-reason", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-conceptmap-unmapped-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "conceptmap-unmapped-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/processresponse-example-pended.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcessResponseHelper.fromJson(json);
  	 System.out.println("testing ProcessResponse " + count++);
  	 processresponseDao.create((ProcessResponse)result);
  	 result = processresponseDao.find(((ProcessResponse)result).getId());
  	 assertEquals("Expect ", "SR2499", ((ProcessResponse)result).getId());
  	 processresponseDao.delete( (ProcessResponse)result);

  	 inputFile = "../../fhir-data/examples-json/compartmentdefinition-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CompartmentDefinitionHelper.fromJson(json);
  	 System.out.println("testing CompartmentDefinition " + count++);
  	 compartmentdefinitionDao.create((CompartmentDefinition)result);
  	 result = compartmentdefinitionDao.find(((CompartmentDefinition)result).getId());
  	 assertEquals("Expect ", "example", ((CompartmentDefinition)result).getId());
  	 compartmentdefinitionDao.delete( (CompartmentDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-operationoutcome-authority.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "operationoutcome-authority", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-author.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-author", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-11179-permitted-value-conceptmap.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "11179-permitted-value-conceptmap", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/xhtml.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "xhtml", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-group-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "group-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticsallelicstate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsAllelicState", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-ex-payee-resource-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "ex-payee-resource-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-minlength.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "minLength", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-dispense-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-dispense-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-contract-signer-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "contract-signer-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-basic-resource-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "basic-resource-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-coverage-level.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "coverage-level", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedurerequest-precondition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedurerequest-precondition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0331.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0331", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-ordinalvalue.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-ordinalValue", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-related-artifact-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "related-artifact-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example-physical-therapy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "physical-therapy", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/plandefinition-zika-virus-intervention.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PlanDefinitionHelper.fromJson(json);
  	 System.out.println("testing PlanDefinition " + count++);
  	 plandefinitionDao.create((PlanDefinition)result);
  	 result = plandefinitionDao.find(((PlanDefinition)result).getId());
  	 assertEquals("Expect ", "zika-virus-intervention", ((PlanDefinition)result).getId());
  	 plandefinitionDao.delete( (PlanDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-oral-prosthodontic-material.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "oral-prosthodontic-material", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/vitalspanel-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-event-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "event-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-extra-security-role-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "extra-security-role-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-restful-security-service.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "restful-security-service", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/boolean.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "boolean", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-property-representation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "property-representation", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-consent-state-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "consent-state-codes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-contract-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "contract-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-issue-severity.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "issue-severity", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-11179-de-submitter-org.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "11179-de-submitter-org", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-supplydelivery-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "supplydelivery-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-no-immunization-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "no-immunization-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-type-derivation-rule.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "type-derivation-rule", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/claimresponse-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimResponseHelper.fromJson(json);
  	 System.out.println("testing ClaimResponse " + count++);
  	 claimresponseDao.create((ClaimResponse)result);
  	 result = claimresponseDao.find(((ClaimResponse)result).getId());
  	 assertEquals("Expect ", "R3500", ((ClaimResponse)result).getId());
  	 claimresponseDao.delete( (ClaimResponse)result);

  	 inputFile = "../../fhir-data/examples-json/vitalsigns.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "vitalsigns", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/person-patient-portal.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PersonHelper.fromJson(json);
  	 System.out.println("testing Person " + count++);
  	 personDao.create((Person)result);
  	 result = personDao.find(((Person)result).getId());
  	 assertEquals("Expect ", "pp", ((Person)result).getId());
  	 personDao.delete( (Person)result);

  	 inputFile = "../../fhir-data/examples-json/enrollmentrequest.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "EnrollmentRequest", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-author.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-author", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-slotstatus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "slotstatus", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0320.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0320", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/searchparameter-example-extension.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "example-extension", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-udi.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "udi", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-ex-paymenttype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "ex-paymenttype", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-reference-handling-policy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "reference-handling-policy", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-encounter-admit-source.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "encounter-admit-source", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationstatementexample2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationStatementHelper.fromJson(json);
  	 System.out.println("testing MedicationStatement " + count++);
  	 medicationstatementDao.create((MedicationStatement)result);
  	 result = medicationstatementDao.find(((MedicationStatement)result).getId());
  	 assertEquals("Expect ", "example002", ((MedicationStatement)result).getId());
  	 medicationstatementDao.delete( (MedicationStatement)result);

  	 inputFile = "../../fhir-data/examples-json/coord-1base-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "coord-1-base", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-care-team-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "care-team-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-hla-genetics-results-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "hla-1", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/extension-humanname-mothers-family.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "humanname-mothers-family", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0328.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0328", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/device-example-udi2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DeviceHelper.fromJson(json);
  	 System.out.println("testing Device " + count++);
  	 deviceDao.create((Device)result);
  	 result = deviceDao.find(((Device)result).getId());
  	 assertEquals("Expect ", "example-udi2", ((Device)result).getId());
  	 deviceDao.delete( (Device)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-digital-media-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "digital-media-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-system-version-processing-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "system-version-processing-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-administrative-gender.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "administrative-gender", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-communicationrequest-definition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "communicationrequest-definition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/organization-example-gastro.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OrganizationHelper.fromJson(json);
  	 System.out.println("testing Organization " + count++);
  	 organizationDao.create((Organization)result);
  	 result = organizationDao.find(((Organization)result).getId());
  	 assertEquals("Expect ", "1", ((Organization)result).getId());
  	 organizationDao.delete( (Organization)result);

  	 inputFile = "../../fhir-data/examples-json/bundle-response-simplesummary.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "bundle-response-simplesummary", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-eye-color.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "eye-color", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-deliverymodeidentifier.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-deliveryModeIdentifier", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0310.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0310", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-service-uscls.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "service-uscls", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-device-statement-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "device-statement-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/immunization-example-historical.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ImmunizationHelper.fromJson(json);
  	 System.out.println("testing Immunization " + count++);
  	 immunizationDao.create((Immunization)result);
  	 result = immunizationDao.find(((Immunization)result).getId());
  	 assertEquals("Expect ", "historical", ((Immunization)result).getId());
  	 immunizationDao.delete( (Immunization)result);

  	 inputFile = "../../fhir-data/examples-json/medicationstatementexample7.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationStatementHelper.fromJson(json);
  	 System.out.println("testing MedicationStatement " + count++);
  	 medicationstatementDao.create((MedicationStatement)result);
  	 result = medicationstatementDao.find(((MedicationStatement)result).getId());
  	 assertEquals("Expect ", "example007", ((MedicationStatement)result).getId());
  	 medicationstatementDao.delete( (MedicationStatement)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-consent-action.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "consent-action", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-f202-temperature.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "f202", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-mindoseperperiod.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "pharmacy-core-minDosePerPeriod", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-medication-request-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "medication-request-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-list-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "list-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-kos-title.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "kos-title", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-care-plan-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "care-plan-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/media-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-map-target-list-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "map-target-list-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/person-provider-directory.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PersonHelper.fromJson(json);
  	 System.out.println("testing Person " + count++);
  	 personDao.create((Person)result);
  	 result = personDao.find(((Person)result).getId());
  	 assertEquals("Expect ", "pd", ((Person)result).getId());
  	 personDao.delete( (Person)result);

  	 inputFile = "../../fhir-data/examples-json/communicationrequest-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CommunicationRequestHelper.fromJson(json);
  	 System.out.println("testing CommunicationRequest " + count++);
  	 communicationrequestDao.create((CommunicationRequest)result);
  	 result = communicationrequestDao.find(((CommunicationRequest)result).getId());
  	 assertEquals("Expect ", "example", ((CommunicationRequest)result).getId());
  	 communicationrequestDao.delete( (CommunicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-identifier-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "identifier-use", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-adjudication-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "adjudication-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/person-example-f002-ariadne.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PersonHelper.fromJson(json);
  	 System.out.println("testing Person " + count++);
  	 personDao.create((Person)result);
  	 result = personDao.find(((Person)result).getId());
  	 assertEquals("Expect ", "f002", ((Person)result).getId());
  	 personDao.delete( (Person)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-document-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "document-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-pharmacy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "760150", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-performer-role.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "performer-role", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-genetics-example-1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "og-example1", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-workflowstatus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-workflowStatus", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/library.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Library", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/provenance-example-sig.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProvenanceHelper.fromJson(json);
  	 System.out.println("testing Provenance " + count++);
  	 provenanceDao.create((Provenance)result);
  	 result = provenanceDao.find(((Provenance)result).getId());
  	 assertEquals("Expect ", "signature", ((Provenance)result).getId());
  	 provenanceDao.delete( (Provenance)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-usage.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-usage", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-ex-onsettype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "ex-onsettype", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-modified-foodtype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "modified-foodtype", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-genetics-4.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "example-genetics-4", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/structuremap-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureMapHelper.fromJson(json);
  	 System.out.println("testing StructureMap " + count++);
  	 structuremapDao.create((StructureMap)result);
  	 result = structuremapDao.find(((StructureMap)result).getId());
  	 assertEquals("Expect ", "example", ((StructureMap)result).getId());
  	 structuremapDao.delete( (StructureMap)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-composition-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "composition-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-condition-dueto.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "condition-dueTo", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-consent-data-meaning.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "consent-data-meaning", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/conceptmap-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-action-precheck-behavior.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "action-precheck-behavior", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-benefit-unit.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "benefit-unit", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder-example-renaldiet.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NutritionOrderHelper.fromJson(json);
  	 System.out.println("testing NutritionOrder " + count++);
  	 nutritionorderDao.create((NutritionOrder)result);
  	 result = nutritionorderDao.find(((NutritionOrder)result).getId());
  	 assertEquals("Expect ", "renaldiet", ((NutritionOrder)result).getId());
  	 nutritionorderDao.delete( (NutritionOrder)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-link-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "link-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/activitydefinition-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ActivityDefinitionHelper.fromJson(json);
  	 System.out.println("testing ActivityDefinition " + count++);
  	 activitydefinitionDao.create((ActivityDefinition)result);
  	 result = activitydefinitionDao.find(((ActivityDefinition)result).getId());
  	 assertEquals("Expect ", "referralPrimaryCareMentalHealth", ((ActivityDefinition)result).getId());
  	 activitydefinitionDao.delete( (ActivityDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/documentreference-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-dataelement-stringency.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "dataelement-stringency", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-claim-modifiers.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "claim-modifiers", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-consent-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "consent-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/processrequest-example-poll-eob.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcessRequestHelper.fromJson(json);
  	 System.out.println("testing ProcessRequest " + count++);
  	 processrequestDao.create((ProcessRequest)result);
  	 result = processrequestDao.find(((ProcessRequest)result).getId());
  	 assertEquals("Expect ", "1115", ((ProcessRequest)result).getId());
  	 processrequestDao.delete( (ProcessRequest)result);

  	 inputFile = "../../fhir-data/examples-json/episodeofcare-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-name-assembly-order.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "name-assembly-order", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/documentmanifest-fm-attachment.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DocumentManifestHelper.fromJson(json);
  	 System.out.println("testing DocumentManifest " + count++);
  	 documentmanifestDao.create((DocumentManifest)result);
  	 result = documentmanifestDao.find(((DocumentManifest)result).getId());
  	 assertEquals("Expect ", "654789", ((DocumentManifest)result).getId());
  	 documentmanifestDao.delete( (DocumentManifest)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-adjudication-error.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "adjudication-error", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-template-status-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "template-status-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ValueSet", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/linkage-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LinkageHelper.fromJson(json);
  	 System.out.println("testing Linkage " + count++);
  	 linkageDao.create((Linkage)result);
  	 result = linkageDao.find(((Linkage)result).getId());
  	 assertEquals("Expect ", "example", ((Linkage)result).getId());
  	 linkageDao.delete( (Linkage)result);

  	 inputFile = "../../fhir-data/examples-json/endpoint-examples-general-template.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "b0a5e4277-83c4-4adb-87e2-e3efe3369b6f", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-payment-adjustment-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "payment-adjustment-reason", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-entryformat.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "entryFormat", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-map.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-map", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/consent-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valuesets.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "valuesets", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-hl7-work-group.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "hl7-work-group", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-additionallocator.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-additionalLocator", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/location-extensions-Location-alias.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "location-extensions-Location-alias", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-map-group-type-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "map-group-type-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/task-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/detectedissue.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "DetectedIssue", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-example-f001-bloodexam.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DiagnosticReportHelper.fromJson(json);
  	 System.out.println("testing DiagnosticReport " + count++);
  	 diagnosticreportDao.create((DiagnosticReport)result);
  	 result = diagnosticreportDao.find(((DiagnosticReport)result).getId());
  	 assertEquals("Expect ", "f001", ((DiagnosticReport)result).getId());
  	 diagnosticreportDao.delete( (DiagnosticReport)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-oral-bridge.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "100156", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/graphdefinition-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-chargeitem-billingcodes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "chargeitem-billingcodes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-goal-acceptance.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "goal-acceptance", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-namingsystem-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "namingsystem-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/patient-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-contact-point-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "contact-point-use", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/account-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AccountHelper.fromJson(json);
  	 System.out.println("testing Account " + count++);
  	 accountDao.create((Account)result);
  	 result = accountDao.find(((Account)result).getId());
  	 assertEquals("Expect ", "example", ((Account)result).getId());
  	 accountDao.delete( (Account)result);

  	 inputFile = "../../fhir-data/examples-json/library-composition-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LibraryHelper.fromJson(json);
  	 System.out.println("testing Library " + count++);
  	 libraryDao.create((Library)result);
  	 result = libraryDao.find(((Library)result).getId());
  	 assertEquals("Expect ", "composition-example", ((Library)result).getId());
  	 libraryDao.delete( (Library)result);

  	 inputFile = "../../fhir-data/examples-json/extension-specimen-processingtime.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "specimen-processingTime", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-diagnostic-service-sections.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "diagnostic-service-sections", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-genetics-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0321.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0321", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/imagingmanifest.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ImagingManifest", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-discriminator-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "discriminator-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-fm-itemtype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "fm-itemtype", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-summary.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-summary", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/messageheader-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MessageHeaderHelper.fromJson(json);
  	 System.out.println("testing MessageHeader " + count++);
  	 messageheaderDao.create((MessageHeader)result);
  	 result = messageheaderDao.find(((MessageHeader)result).getId());
  	 assertEquals("Expect ", "1cbdfb97-5859-48a4-8301-d54eab818d68", ((MessageHeader)result).getId());
  	 messageheaderDao.delete( (MessageHeader)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-media-view.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "media-view", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-maxdecimalplaces.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "maxDecimalPlaces", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-openehr-location.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "openEHR-location", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/library-exclusive-breastfeeding-cds-logic.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LibraryHelper.fromJson(json);
  	 System.out.println("testing Library " + count++);
  	 libraryDao.create((Library)result);
  	 result = libraryDao.find(((Library)result).getId());
  	 assertEquals("Expect ", "library-exclusive-breastfeeding-cds-logic", ((Library)result).getId());
  	 libraryDao.delete( (Library)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-implant-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "implant-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-messageheader-response-request.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "messageheader-response-request", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-codesystem-content-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "codesystem-content-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/relatedperson-example-f002-ariadne.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = RelatedPersonHelper.fromJson(json);
  	 System.out.println("testing RelatedPerson " + count++);
  	 relatedpersonDao.create((RelatedPerson)result);
  	 result = relatedpersonDao.find(((RelatedPerson)result).getId());
  	 assertEquals("Expect ", "f002", ((RelatedPerson)result).getId());
  	 relatedpersonDao.delete( (RelatedPerson)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-appointmentstatus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "appointmentstatus", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);
  	System.out.println("Total tests .. " + count);
  }
  @Test
  public void test2170() throws Exception {
  	 inputFile = "../../fhir-data/examples-json/codesystem-udi-entry-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "udi-entry-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-provider-qualification.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "provider-qualification", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/substance.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Substance", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-encounter-participant-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "encounter-participant-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-comment.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-comment", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-practitioner-specialty.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "practitioner-specialty", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-organization-period.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "organization-period", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-practitioner-specialty.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "practitioner-specialty", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0309.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0309", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-document-relationship-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "document-relationship-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticsaminoacidchangename.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsAminoAcidChangeName", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-as-needed-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-as-needed-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-observation-valueabsentreason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "observation-valueabsentreason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration0307.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationAdministrationHelper.fromJson(json);
  	 System.out.println("testing MedicationAdministration " + count++);
  	 medicationadministrationDao.create((MedicationAdministration)result);
  	 result = medicationadministrationDao.find(((MedicationAdministration)result).getId());
  	 assertEquals("Expect ", "medadmin0307", ((MedicationAdministration)result).getId());
  	 medicationadministrationDao.delete( (MedicationAdministration)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-audit-source-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "audit-source-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/structuremap.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "StructureMap", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-vision-product.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "vision-product", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-dicom-dcim.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "dicom-dcim", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/adverseevent-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-ldlcholesterol-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "ldlcholesterol-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-devicemetric-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "devicemetric-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-care-plan-activity-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "care-plan-activity-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-datadictionary.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "datadictionary", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/hlaresult-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/paymentnotice-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/relatedperson-example-peter.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = RelatedPersonHelper.fromJson(json);
  	 System.out.println("testing RelatedPerson " + count++);
  	 relatedpersonDao.create((RelatedPerson)result);
  	 result = relatedpersonDao.find(((RelatedPerson)result).getId());
  	 assertEquals("Expect ", "peter", ((RelatedPerson)result).getId());
  	 relatedpersonDao.delete( (RelatedPerson)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaireresponse.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "QuestionnaireResponse", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/location-example-ambulance.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LocationHelper.fromJson(json);
  	 System.out.println("testing Location " + count++);
  	 locationDao.create((Location)result);
  	 result = locationDao.find(((Location)result).getId());
  	 assertEquals("Expect ", "amb", ((Location)result).getId());
  	 locationDao.delete( (Location)result);

  	 inputFile = "../../fhir-data/examples-json/testreport.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "TestReport", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/cm-composition-status-v3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-composition-status-v3", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-restful-interaction.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "restful-interaction", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-extensions-ValueSet-author.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "valueset-extensions-ValueSet-author", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-itemcontrol.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-itemControl", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/media-example-xray.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MediaHelper.fromJson(json);
  	 System.out.println("testing Media " + count++);
  	 mediaDao.create((Media)result);
  	 result = mediaDao.find(((Media)result).getId());
  	 assertEquals("Expect ", "xray", ((Media)result).getId());
  	 mediaDao.delete( (Media)result);

  	 inputFile = "../../fhir-data/examples-json/patient-extensions-Patient-birthOrderBoolean.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "patient-extensions-Patient-birthOrderBoolean", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/careplan-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/location-example-hl7hq.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LocationHelper.fromJson(json);
  	 System.out.println("testing Location " + count++);
  	 locationDao.create((Location)result);
  	 result = locationDao.find(((Location)result).getId());
  	 assertEquals("Expect ", "hl7", ((Location)result).getId());
  	 locationDao.delete( (Location)result);

  	 inputFile = "../../fhir-data/examples-json/implementationguide-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-task-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "task-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-practitionerrole-primaryind.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "practitionerrole-primaryInd", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-goal-status-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "goal-status-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-variant-state.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "variant-state", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/sequence-example-TPMT-one.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "example-TPMT-one", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-data-absent-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "data-absent-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-lookupquestionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-lookupQuestionnaire", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-practitioner-classification.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "practitioner-classification", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-referral-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "referral-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-questionnaire-item-control.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "questionnaire-item-control", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/patient-example-d.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "pat4", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/extension-body-site-instance.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "body-site-instance", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-animal-genderstatus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "animal-genderstatus", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-choice-list-orientation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "choice-list-orientation", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0334.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0334", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-link-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "link-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-allowedprofile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-allowedProfile", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-body-temperature.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "body-temperature", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-allergy-verification-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "allergy-verification-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-adverse-event-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "adverse-event-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0315.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0315", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/measurereport-cms146-cat3-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MeasureReportHelper.fromJson(json);
  	 System.out.println("testing MeasureReport " + count++);
  	 measurereportDao.create((MeasureReport)result);
  	 result = measurereportDao.find(((MeasureReport)result).getId());
  	 assertEquals("Expect ", "measurereport-cms146-cat3-example", ((MeasureReport)result).getId());
  	 measurereportDao.delete( (MeasureReport)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-report-result-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "report-result-codes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-unitid.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-unitID", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-claim-informationcategory.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "claim-informationcategory", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-missing-tooth-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "missing-tooth-reason", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-auditevent-instance.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "auditevent-Instance", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-icd-10-procedures.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "icd-10-procedures", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/encounter-example-f203-20130311.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EncounterHelper.fromJson(json);
  	 System.out.println("testing Encounter " + count++);
  	 encounterDao.create((Encounter)result);
  	 result = encounterDao.find(((Encounter)result).getId());
  	 assertEquals("Expect ", "f203", ((Encounter)result).getId());
  	 encounterDao.delete( (Encounter)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-clinical-impression-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "clinical-impression-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-participantrequired.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "participantrequired", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-object-role.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "object-role", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/compartmentdefinition-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-data-absent-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "data-absent-reason", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/devicerequest-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-elementdefinition-iscommonbinding.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "elementdefinition-isCommonBinding", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-message-reason-encounter.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "message-reason-encounter", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-participant-role.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "participant-role", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-defined-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "defined-types", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-f005-hemoglobin.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "f005", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/measure-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder-example-diabeticsupplement.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NutritionOrderHelper.fromJson(json);
  	 System.out.println("testing NutritionOrder " + count++);
  	 nutritionorderDao.create((NutritionOrder)result);
  	 result = nutritionorderDao.find(((NutritionOrder)result).getId());
  	 assertEquals("Expect ", "diabeticsupplement", ((NutritionOrder)result).getId());
  	 nutritionorderDao.delete( (NutritionOrder)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-request-priority.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-request-priority", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-extensions-CodeSystem-end.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "codesystem-extensions-CodeSystem-end", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-practitioner-role.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "practitioner-role", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-family-member-history-genetics-sibling.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "family-member-history-genetics-sibling", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-action-relationship-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "action-relationship-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-list-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "list-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/capabilitystatement-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CapabilityStatementHelper.fromJson(json);
  	 System.out.println("testing CapabilityStatement " + count++);
  	 capabilitystatementDao.create((CapabilityStatement)result);
  	 result = capabilitystatementDao.find(((CapabilityStatement)result).getId());
  	 assertEquals("Expect ", "example", ((CapabilityStatement)result).getId());
  	 capabilitystatementDao.delete( (CapabilityStatement)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0321.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0321", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-care-plan-activity.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "care-plan-activity", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-research-subject-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "research-subject-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-elementdefinition-identifier.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "elementdefinition-identifier", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/operation-measure-evaluate-measure.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Measure-evaluate-measure", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-consistency-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "consistency-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-adverse-event-seriousness.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "adverse-event-seriousness", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/list-example-empty.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = FHIRListHelper.fromJson(json);
  	 System.out.println("testing FHIRList " + count++);
  	 fhirlistDao.create((FHIRList)result);
  	 result = fhirlistDao.find(((FHIRList)result).getId());
  	 assertEquals("Expect ", "example-empty", ((FHIRList)result).getId());
  	 fhirlistDao.delete( (FHIRList)result);

  	 inputFile = "../../fhir-data/examples-json/media-example-sound.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MediaHelper.fromJson(json);
  	 System.out.println("testing Media " + count++);
  	 mediaDao.create((Media)result);
  	 result = mediaDao.find(((Media)result).getId());
  	 assertEquals("Expect ", "sound", ((Media)result).getId());
  	 mediaDao.delete( (Media)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-enteral-route.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "enteral-route", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-patient-congregation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "patient-congregation", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/condition-example-family-history.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConditionHelper.fromJson(json);
  	 System.out.println("testing Condition " + count++);
  	 conditionDao.create((Condition)result);
  	 result = conditionDao.find(((Condition)result).getId());
  	 assertEquals("Expect ", "family-history", ((Condition)result).getId());
  	 conditionDao.delete( (Condition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration0305.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationAdministrationHelper.fromJson(json);
  	 System.out.println("testing MedicationAdministration " + count++);
  	 medicationadministrationDao.create((MedicationAdministration)result);
  	 result = medicationadministrationDao.find(((MedicationAdministration)result).getId());
  	 assertEquals("Expect ", "medadmin0305", ((MedicationAdministration)result).getId());
  	 medicationadministrationDao.delete( (MedicationAdministration)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-address-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "address-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/requestgroup-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-request-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "request-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-concept-bidirectional.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "concept-bidirectional", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/appointment.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Appointment", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/operation-resource-validate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Resource-validate", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-concept-property-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "concept-property-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-goal-acceptance-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "goal-acceptance-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/media-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MediaHelper.fromJson(json);
  	 System.out.println("testing Media " + count++);
  	 mediaDao.create((Media)result);
  	 result = mediaDao.find(((Media)result).getId());
  	 assertEquals("Expect ", "example", ((Media)result).getId());
  	 mediaDao.delete( (Media)result);

  	 inputFile = "../../fhir-data/examples-json/encounter-example-home.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EncounterHelper.fromJson(json);
  	 System.out.println("testing Encounter " + count++);
  	 encounterDao.create((Encounter)result);
  	 result = encounterDao.find(((Encounter)result).getId());
  	 assertEquals("Expect ", "home", ((Encounter)result).getId());
  	 encounterDao.delete( (Encounter)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-contract-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "contract-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticssequence.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsSequence", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/definition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Definition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-allergyintolerance-reasonrefuted.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "allergyintolerance-reasonRefuted", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/eligibilityrequest.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "EligibilityRequest", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-reference.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-reference", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-familymemberhistory-abatement.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "familymemberhistory-abatement", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example-ft4.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "ft4", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/patient-glossy-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "glossy", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-special-values.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "special-values", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-usagecontext-group.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "usagecontext-group", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "example-extensional", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/eligibilityrequest-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EligibilityRequestHelper.fromJson(json);
  	 System.out.println("testing EligibilityRequest " + count++);
  	 eligibilityrequestDao.create((EligibilityRequest)result);
  	 result = eligibilityrequestDao.find(((EligibilityRequest)result).getId());
  	 assertEquals("Expect ", "52345", ((EligibilityRequest)result).getId());
  	 eligibilityrequestDao.delete( (EligibilityRequest)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-copy-number-event.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "copy-number-event", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/operation-plandefinition-apply.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "PlanDefinition-apply", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/pcd-example-notThis.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ContractHelper.fromJson(json);
  	 System.out.println("testing Contract " + count++);
  	 contractDao.create((Contract)result);
  	 result = contractDao.find(((Contract)result).getId());
  	 assertEquals("Expect ", "pcd-example-notThis", ((Contract)result).getId());
  	 contractDao.delete( (Contract)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-coverage-level.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "coverage-level", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/age.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Age", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-capabilitystatement-websocket.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "capabilitystatement-websocket", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-specimen-collectionpriority.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "specimen-collectionPriority", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/visionprescription-example-1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = VisionPrescriptionHelper.fromJson(json);
  	 System.out.println("testing VisionPrescription " + count++);
  	 visionprescriptionDao.create((VisionPrescription)result);
  	 result = visionprescriptionDao.find(((VisionPrescription)result).getId());
  	 assertEquals("Expect ", "33124", ((VisionPrescription)result).getId());
  	 visionprescriptionDao.delete( (VisionPrescription)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-claim-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "claim-use", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-map-target-list-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "map-target-list-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/explanationofbenefit.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ExplanationOfBenefit", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medication.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Medication", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-operation-outcome.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "operation-outcome", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-research-study-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "research-study-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-diagnostic-report-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "diagnostic-report-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-account-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "account-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/healthcareservice.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "HealthcareService", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/eligibilityrequest-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-regex.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-regex", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/condition-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConditionHelper.fromJson(json);
  	 System.out.println("testing Condition " + count++);
  	 conditionDao.create((Condition)result);
  	 result = conditionDao.find(((Condition)result).getId());
  	 assertEquals("Expect ", "example", ((Condition)result).getId());
  	 conditionDao.delete( (Condition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-xml-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-xml-type", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/contract-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0302.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0302", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/list-example-double-cousin-relationship-pedigree.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = FHIRListHelper.fromJson(json);
  	 System.out.println("testing FHIRList " + count++);
  	 fhirlistDao.create((FHIRList)result);
  	 result = fhirlistDao.find(((FHIRList)result).getId());
  	 assertEquals("Expect ", "example-double-cousin-relationship", ((FHIRList)result).getId());
  	 fhirlistDao.delete( (FHIRList)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-explanationofbenefit-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "explanationofbenefit-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-preferred.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-preferred", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-auditevent-accession.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "auditevent-Accession", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-account-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "account-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-elementdefinition-question.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "elementdefinition-question", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/devicerequest-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DeviceRequestHelper.fromJson(json);
  	 System.out.println("testing DeviceRequest " + count++);
  	 devicerequestDao.create((DeviceRequest)result);
  	 result = devicerequestDao.find(((DeviceRequest)result).getId());
  	 assertEquals("Expect ", "example", ((DeviceRequest)result).getId());
  	 devicerequestDao.delete( (DeviceRequest)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-extensions-CodeSystem-workflow.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "codesystem-extensions-CodeSystem-workflow", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/provenance.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Provenance", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-vaccination-protocol-dose-target.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "vaccination-protocol-dose-target", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-streetaddressline.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-streetAddressLine", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-event-reasonreference.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "event-reasonReference", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/compartmentdefinition-relatedperson.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CompartmentDefinitionHelper.fromJson(json);
  	 System.out.println("testing CompartmentDefinition " + count++);
  	 compartmentdefinitionDao.create((CompartmentDefinition)result);
  	 result = compartmentdefinitionDao.find(((CompartmentDefinition)result).getId());
  	 assertEquals("Expect ", "relatedPerson", ((CompartmentDefinition)result).getId());
  	 compartmentdefinitionDao.delete( (CompartmentDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example4.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "benchpress", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/operation-patient-match.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Patient-match", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/consent-example-Emergency.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConsentHelper.fromJson(json);
  	 System.out.println("testing Consent " + count++);
  	 consentDao.create((Consent)result);
  	 result = consentDao.find(((Consent)result).getId());
  	 assertEquals("Expect ", "consent-example-Emergency", ((Consent)result).getId());
  	 consentDao.delete( (Consent)result);

  	 inputFile = "../../fhir-data/examples-json/namingsystem-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NamingSystemHelper.fromJson(json);
  	 System.out.println("testing NamingSystem " + count++);
  	 namingsystemDao.create((NamingSystem)result);
  	 result = namingsystemDao.find(((NamingSystem)result).getId());
  	 assertEquals("Expect ", "example", ((NamingSystem)result).getId());
  	 namingsystemDao.delete( (NamingSystem)result);

  	 inputFile = "../../fhir-data/examples-json/communicationrequest-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-action-grouping-behavior.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "action-grouping-behavior", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-map-model-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "map-model-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/elementdefinition-de-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/subscription.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Subscription", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-digital-media-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "digital-media-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/bodysite-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-procedurerequest-questionnairerequest.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "procedurerequest-questionnaireRequest", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/task-example1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = TaskHelper.fromJson(json);
  	 System.out.println("testing Task " + count++);
  	 taskDao.create((Task)result);
  	 result = taskDao.find(((Task)result).getId());
  	 assertEquals("Expect ", "example1", ((Task)result).getId());
  	 taskDao.delete( (Task)result);

  	 inputFile = "../../fhir-data/examples-json/servicedefinition-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ServiceDefinitionHelper.fromJson(json);
  	 System.out.println("testing ServiceDefinition " + count++);
  	 servicedefinitionDao.create((ServiceDefinition)result);
  	 result = servicedefinitionDao.find(((ServiceDefinition)result).getId());
  	 assertEquals("Expect ", "example", ((ServiceDefinition)result).getId());
  	 servicedefinitionDao.delete( (ServiceDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration0308.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationAdministrationHelper.fromJson(json);
  	 System.out.println("testing MedicationAdministration " + count++);
  	 medicationadministrationDao.create((MedicationAdministration)result);
  	 result = medicationadministrationDao.find(((MedicationAdministration)result).getId());
  	 assertEquals("Expect ", "medadmin0308", ((MedicationAdministration)result).getId());
  	 medicationadministrationDao.delete( (MedicationAdministration)result);

  	 inputFile = "../../fhir-data/examples-json/operation-measure-data-requirements.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Measure-data-requirements", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-fm-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "fm-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-supplyrequest-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "supplyrequest-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-family-member-history-genetics-observation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "family-member-history-genetics-observation", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-observation-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "observation-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-condition-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "condition-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-procedure-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "procedure-reason", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-fmm-no-warnings.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-fmm-no-warnings", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-ex-payee-resource-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "ex-payee-resource-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-observation-relationshiptypes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "observation-relationshiptypes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-replaces.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "diagnosticReport-replaces", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0305.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0305", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-service-place.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "service-place", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-json-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-json-type", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-specimen-specialhandling.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "specimen-specialHandling", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/annotation.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Annotation", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-streetname.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-streetName", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/bundle-response-medsallergies.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "bundle-response-medsallergies", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/extension-humanname-partner-name.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "humanname-partner-name", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-example-f005-al.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerHelper.fromJson(json);
  	 System.out.println("testing Practitioner " + count++);
  	 practitionerDao.create((Practitioner)result);
  	 result = practitionerDao.find(((Practitioner)result).getId());
  	 assertEquals("Expect ", "f005", ((Practitioner)result).getId());
  	 practitionerDao.delete( (Practitioner)result);

  	 inputFile = "../../fhir-data/examples-json/cm-address-use-v2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-address-use-v2", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/extension-task-candidatelist.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "task-candidateList", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-questionnaire-questions.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "questionnaire-questions", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-substance-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "substance-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-care-plan-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "care-plan-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-example-f201-brainct.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DiagnosticReportHelper.fromJson(json);
  	 System.out.println("testing DiagnosticReport " + count++);
  	 diagnosticreportDao.create((DiagnosticReport)result);
  	 result = diagnosticreportDao.find(((DiagnosticReport)result).getId());
  	 assertEquals("Expect ", "f201", ((DiagnosticReport)result).getId());
  	 diagnosticreportDao.delete( (DiagnosticReport)result);

  	 inputFile = "../../fhir-data/examples-json/dosage.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Dosage", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-tooth.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "tooth", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-message-transport.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "message-transport", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-entformula-additive.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "entformula-additive", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-condition-ruledout.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "condition-ruledOut", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/messagedefinition-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-hla-genotyping-results-allele-database.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "hla-genotyping-results-allele-database", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/activitydefinition.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ActivityDefinition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/documentmanifest-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-package-form.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-package-form", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-immunization-route.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "immunization-route", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-units-of-time.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "units-of-time", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-question-max-occurs.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "question-max-occurs", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-uncertaintytype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-uncertaintyType", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/cm-observation-relationshiptypes-v3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-observation-relationshiptypes-v3", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/auditevent-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-http-verb.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "http-verb", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/measure-predecessor-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MeasureHelper.fromJson(json);
  	 System.out.println("testing Measure " + count++);
  	 measureDao.create((Measure)result);
  	 result = measureDao.find(((Measure)result).getId());
  	 assertEquals("Expect ", "measure-predecessor-example", ((Measure)result).getId());
  	 measureDao.delete( (Measure)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-referencerange-appliesto.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "referencerange-appliesto", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/bundle-request-simplesummary.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "bundle-request-simplesummary", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/deviceusestatement-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DeviceUseStatementHelper.fromJson(json);
  	 System.out.println("testing DeviceUseStatement " + count++);
  	 deviceusestatementDao.create((DeviceUseStatement)result);
  	 result = deviceusestatementDao.find(((DeviceUseStatement)result).getId());
  	 assertEquals("Expect ", "example", ((DeviceUseStatement)result).getId());
  	 deviceusestatementDao.delete( (DeviceUseStatement)result);

  	 inputFile = "../../fhir-data/examples-json/supplydelivery-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SupplyDeliveryHelper.fromJson(json);
  	 System.out.println("testing SupplyDelivery " + count++);
  	 supplydeliveryDao.create((SupplyDelivery)result);
  	 result = supplydeliveryDao.find(((SupplyDelivery)result).getId());
  	 assertEquals("Expect ", "simpledelivery", ((SupplyDelivery)result).getId());
  	 supplydeliveryDao.delete( (SupplyDelivery)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-quality-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "quality-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/careplan-example-f003-pharynx.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CarePlanHelper.fromJson(json);
  	 System.out.println("testing CarePlan " + count++);
  	 careplanDao.create((CarePlan)result);
  	 result = careplanDao.find(((CarePlan)result).getId());
  	 assertEquals("Expect ", "f003", ((CarePlan)result).getId());
  	 careplanDao.delete( (CarePlan)result);

  	 inputFile = "../../fhir-data/examples-json/messagedefinition-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MessageDefinitionHelper.fromJson(json);
  	 System.out.println("testing MessageDefinition " + count++);
  	 messagedefinitionDao.create((MessageDefinition)result);
  	 result = messagedefinitionDao.find(((MessageDefinition)result).getId());
  	 assertEquals("Expect ", "example", ((MessageDefinition)result).getId());
  	 messagedefinitionDao.delete( (MessageDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-streetnametype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-streetNameType", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-specimen-container-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "specimen-container-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-maxvalue.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "maxValue", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/processrequest-example-poll-specific.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcessRequestHelper.fromJson(json);
  	 System.out.println("testing ProcessRequest " + count++);
  	 processrequestDao.create((ProcessRequest)result);
  	 result = processrequestDao.find(((ProcessRequest)result).getId());
  	 assertEquals("Expect ", "1111", ((ProcessRequest)result).getId());
  	 processrequestDao.delete( (ProcessRequest)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-expansionsource.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-expansionSource", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-elementdefinition-maxvalueset.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "elementdefinition-maxValueSet", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/specimen-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SpecimenHelper.fromJson(json);
  	 System.out.println("testing Specimen " + count++);
  	 specimenDao.create((Specimen)result);
  	 result = specimenDao.find(((Specimen)result).getId());
  	 assertEquals("Expect ", "101", ((Specimen)result).getId());
  	 specimenDao.delete( (Specimen)result);

  	 inputFile = "../../fhir-data/examples-json/healthcareservice-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = HealthcareServiceHelper.fromJson(json);
  	 System.out.println("testing HealthcareService " + count++);
  	 healthcareserviceDao.create((HealthcareService)result);
  	 result = healthcareserviceDao.find(((HealthcareService)result).getId());
  	 assertEquals("Expect ", "example", ((HealthcareService)result).getId());
  	 healthcareserviceDao.delete( (HealthcareService)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-conceptorder.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-conceptOrder", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-route-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "route-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-claim-subtype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "claim-subtype", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/audit-event-example-search.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AuditEventHelper.fromJson(json);
  	 System.out.println("testing AuditEvent " + count++);
  	 auditeventDao.create((AuditEvent)result);
  	 result = auditeventDao.find(((AuditEvent)result).getId());
  	 assertEquals("Expect ", "example-search", ((AuditEvent)result).getId());
  	 auditeventDao.delete( (AuditEvent)result);

  	 inputFile = "../../fhir-data/examples-json/extension-condition-definition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "condition-definition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-workflowstatus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-workflowStatus", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-condition-basedon.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "condition-basedOn", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-guidance-response-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "guidance-response-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-map-group-type-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "map-group-type-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-report-action-result-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "report-action-result-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticscopynumberevent.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsCopyNumberEvent", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-questionnaire-answers-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "questionnaire-answers-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-infuseover.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "pharmacy-core-infuseOver", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-ad-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-AD-use", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-map-transform.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "map-transform", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-allergyintolerance-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "allergyintolerance-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-location-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "location-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/consentdirective.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "consentdirective", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-c80-facilitycodes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "c80-facilitycodes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-condition-severity.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "condition-severity", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaireresponse-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaireresponse-reason", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/auditevent.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "AuditEvent", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/operation-conceptmap-translate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "ConceptMap-translate", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/patient-example-dicom.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "dicom", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/extension-condition-targetbodysite.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "condition-targetBodySite", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-measure-report-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "measure-report-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-list-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "list-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-service-product.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "service-product", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-measure-report-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "measure-report-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/communication.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Communication", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/processrequest-example-poll-inclusive.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcessRequestHelper.fromJson(json);
  	 System.out.println("testing ProcessRequest " + count++);
  	 processrequestDao.create((ProcessRequest)result);
  	 result = processrequestDao.find(((ProcessRequest)result).getId());
  	 assertEquals("Expect ", "1112", ((ProcessRequest)result).getId());
  	 processrequestDao.delete( (ProcessRequest)result);

  	 inputFile = "../../fhir-data/examples-json/extension-allergyintolerance-certainty.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "allergyintolerance-certainty", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequestexample1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0311", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/pcd-example-notLabs.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ContractHelper.fromJson(json);
  	 System.out.println("testing Contract " + count++);
  	 contractDao.create((Contract)result);
  	 result = contractDao.find(((Contract)result).getId());
  	 assertEquals("Expect ", "pcd-example-notLabs", ((Contract)result).getId());
  	 contractDao.delete( (Contract)result);

  	 inputFile = "../../fhir-data/examples-json/extension-elementdefinition-minvalueset.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "elementdefinition-minValueSet", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/testscript-example-multisystem.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = TestScriptHelper.fromJson(json);
  	 System.out.println("testing TestScript " + count++);
  	 testscriptDao.create((TestScript)result);
  	 result = testscriptDao.find(((TestScript)result).getId());
  	 assertEquals("Expect ", "testscript-example-multisystem", ((TestScript)result).getId());
  	 testscriptDao.delete( (TestScript)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-medication-package-form.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "medication-package-form", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-days-of-week.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "days-of-week", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-admin-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-admin-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-f001-glucose.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "f001", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-f003-co2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "f003", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-hl7-work-group.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "hl7-work-group", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/elementdefinition-de.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "elementdefinition-de", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-address-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "address-use", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-event-timing.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "event-timing", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-reaction-event-severity.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "reaction-event-severity", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-texture-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "texture-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/operation-observation-stats.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Observation-stats", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-hla-genotyping-results-glstring.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "hla-genotyping-results-glstring", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-item-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "item-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/adverseevent.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "AdverseEvent", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-fm-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "fm-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-consent-action.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "consent-action", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-document-reference-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "document-reference-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-event-timing.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "event-timing", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-metric-operational-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "metric-operational-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-elementdefinition-allowedunits.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "elementdefinition-allowedUnits", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/testscript-example-history.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = TestScriptHelper.fromJson(json);
  	 System.out.println("testing TestScript " + count++);
  	 testscriptDao.create((TestScript)result);
  	 result = testscriptDao.find(((TestScript)result).getId());
  	 assertEquals("Expect ", "testscript-example-history", ((TestScript)result).getId());
  	 testscriptDao.delete( (TestScript)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-provider-qualification.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "provider-qualification", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "example", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/deviceusestatement.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "DeviceUseStatement", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/immunization-example-refused.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ImmunizationHelper.fromJson(json);
  	 System.out.println("testing Immunization " + count++);
  	 immunizationDao.create((Immunization)result);
  	 result = immunizationDao.find(((Immunization)result).getId());
  	 assertEquals("Expect ", "notGiven", ((Immunization)result).getId());
  	 immunizationDao.delete( (Immunization)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0319.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0319", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-provenance-entity-role.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "provenance-entity-role", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-reason-medication-given-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "reason-medication-given-codes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);
  	System.out.println("Total tests .. " + count);
  }
  @Test
  public void test2480() throws Exception {
  	 inputFile = "../../fhir-data/examples-json/observation-example-vitals-panel.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "vitals-panel", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-ordinalvalue.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-ordinalValue", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/activitydefinition-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-mimetype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "mimeType", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-medication-admin-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "medication-admin-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/slot-example-tentative.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SlotHelper.fromJson(json);
  	 System.out.println("testing Slot " + count++);
  	 slotDao.create((Slot)result);
  	 result = slotDao.find(((Slot)result).getId());
  	 assertEquals("Expect ", "2", ((Slot)result).getId());
  	 slotDao.delete( (Slot)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-testscript-profile-destination-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "testscript-profile-destination-types", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0304.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0304", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-institutional-rich.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "960151", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-designation-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "designation-use", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example-implant.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "example-implant", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/activitydefinition-order-serum-dengue-virus-igm.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ActivityDefinitionHelper.fromJson(json);
  	 System.out.println("testing ActivityDefinition " + count++);
  	 activitydefinitionDao.create((ActivityDefinition)result);
  	 result = activitydefinitionDao.find(((ActivityDefinition)result).getId());
  	 assertEquals("Expect ", "serum-dengue-virus-igm", ((ActivityDefinition)result).getId());
  	 activitydefinitionDao.delete( (ActivityDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/appointment-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AppointmentHelper.fromJson(json);
  	 System.out.println("testing Appointment " + count++);
  	 appointmentDao.create((Appointment)result);
  	 result = appointmentDao.find(((Appointment)result).getId());
  	 assertEquals("Expect ", "example", ((Appointment)result).getId());
  	 appointmentDao.delete( (Appointment)result);

  	 inputFile = "../../fhir-data/examples-json/extension-operationoutcome-detectedissue.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "operationoutcome-detectedIssue", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-narrative-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "narrative-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-remittance-outcome.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "remittance-outcome", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-vision-base-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "vision-base-codes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/capabilitystatement.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "CapabilityStatement", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/datarequirement.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "DataRequirement", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/consent-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConsentHelper.fromJson(json);
  	 System.out.println("testing Consent " + count++);
  	 consentDao.create((Consent)result);
  	 result = consentDao.find(((Consent)result).getId());
  	 assertEquals("Expect ", "consent-example-basic", ((Consent)result).getId());
  	 consentDao.delete( (Consent)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-medication-statement-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "medication-statement-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-service-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "service-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/condition-example2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConditionHelper.fromJson(json);
  	 System.out.println("testing Condition " + count++);
  	 conditionDao.create((Condition)result);
  	 result = conditionDao.find(((Condition)result).getId());
  	 assertEquals("Expect ", "example2", ((Condition)result).getId());
  	 conditionDao.delete( (Condition)result);

  	 inputFile = "../../fhir-data/examples-json/nutritionorder-example-diabeticdiet.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = NutritionOrderHelper.fromJson(json);
  	 System.out.println("testing NutritionOrder " + count++);
  	 nutritionorderDao.create((NutritionOrder)result);
  	 result = nutritionorderDao.find(((NutritionOrder)result).getId());
  	 assertEquals("Expect ", "diabeticdiet", ((NutritionOrder)result).getId());
  	 nutritionorderDao.delete( (NutritionOrder)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-subscription-tag.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "subscription-tag", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/cm-administrative-gender-v2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-administrative-gender-v2", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/binary-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-encounter-primarydiagnosis.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "encounter-primaryDiagnosis", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-immunization-role.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "immunization-role", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/condition.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Condition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/documentmanifest-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DocumentManifestHelper.fromJson(json);
  	 System.out.println("testing DocumentManifest " + count++);
  	 documentmanifestDao.create((DocumentManifest)result);
  	 result = documentmanifestDao.find(((DocumentManifest)result).getId());
  	 assertEquals("Expect ", "example", ((DocumentManifest)result).getId());
  	 documentmanifestDao.delete( (DocumentManifest)result);

  	 inputFile = "../../fhir-data/examples-json/extension-patient-cadavericdonor.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "patient-cadavericDonor", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "DiagnosticReport", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-ex-program-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "ex-program-code", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-request-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-request-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-pharmacy-core-maxdeliveryrate.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "pharmacy-core-maxDeliveryRate", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-supplyrequest-kind.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "supplyrequest-kind", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-animal-species.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "animal-species", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0301.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0301", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "CodeSystem", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-process-priority.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "process-priority", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/familymemberhistory-example-mother.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = FamilyMemberHistoryHelper.fromJson(json);
  	 System.out.println("testing FamilyMemberHistory " + count++);
  	 familymemberhistoryDao.create((FamilyMemberHistory)result);
  	 result = familymemberhistoryDao.find(((FamilyMemberHistory)result).getId());
  	 assertEquals("Expect ", "mother", ((FamilyMemberHistory)result).getId());
  	 familymemberhistoryDao.delete( (FamilyMemberHistory)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-report-status-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "report-status-codes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example-di.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "di", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaireresponse-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/contract-example-42cfr-part2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ContractHelper.fromJson(json);
  	 System.out.println("testing Contract " + count++);
  	 contractDao.create((Contract)result);
  	 result = contractDao.find(((Contract)result).getId());
  	 assertEquals("Expect ", "C-2121", ((Contract)result).getId());
  	 contractDao.delete( (Contract)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-abstract-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "abstract-types", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/cholesterol-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example-edu.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "education", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0307.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0307", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-resource-aggregation-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "resource-aggregation-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/explanationofbenefit-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-marital-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "marital-status", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-concept-map-equivalence.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "concept-map-equivalence", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-ex-diagnosisrelatedgroup.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "ex-diagnosisrelatedgroup", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-service-provision-conditions.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "service-provision-conditions", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-reaction-event-certainty.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "reaction-event-certainty", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/cm-name-use-v3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-name-use-v3", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/composition.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Composition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-bundle-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "bundle-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/task-example5.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = TaskHelper.fromJson(json);
  	 System.out.println("testing Task " + count++);
  	 taskDao.create((Task)result);
  	 result = taskDao.find(((Task)result).getId());
  	 assertEquals("Expect ", "example5", ((Task)result).getId());
  	 taskDao.delete( (Task)result);

  	 inputFile = "../../fhir-data/examples-json/allergyintolerance-fishallergy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AllergyIntoleranceHelper.fromJson(json);
  	 System.out.println("testing AllergyIntolerance " + count++);
  	 allergyintoleranceDao.create((AllergyIntolerance)result);
  	 result = allergyintoleranceDao.find(((AllergyIntolerance)result).getId());
  	 assertEquals("Expect ", "fishallergy", ((AllergyIntolerance)result).getId());
  	 allergyintoleranceDao.delete( (AllergyIntolerance)result);

  	 inputFile = "../../fhir-data/examples-json/capabilitystatement-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-investigation-sets.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "investigation-sets", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaireresponse-reviewer.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaireresponse-reviewer", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-consent-except-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "consent-except-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/lipidprofile.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "lipidprofile", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-uncertainty.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-uncertainty", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-identifier-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "identifier-use", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-measure-report-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "measure-report-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/questionnaireresponse-example-bluebook.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireResponseHelper.fromJson(json);
  	 System.out.println("testing QuestionnaireResponse " + count++);
  	 questionnaireresponseDao.create((QuestionnaireResponse)result);
  	 result = questionnaireresponseDao.find(((QuestionnaireResponse)result).getId());
  	 assertEquals("Expect ", "bb", ((QuestionnaireResponse)result).getId());
  	 questionnaireresponseDao.delete( (QuestionnaireResponse)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-document-reference-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "document-reference-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-report-participant-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "report-participant-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-deliverymode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-deliveryMode", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-supplyrequest-reason.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "supplyrequest-reason", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-measure-population.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "measure-population", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-participationstatus.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "participationstatus", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-allergy-intolerance-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "allergy-intolerance-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/quantity.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Quantity", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/ratio.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Ratio", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/schedule-provider-location1-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ScheduleHelper.fromJson(json);
  	 System.out.println("testing Schedule " + count++);
  	 scheduleDao.create((Schedule)result);
  	 result = scheduleDao.find(((Schedule)result).getId());
  	 assertEquals("Expect ", "exampleloc1", ((Schedule)result).getId());
  	 scheduleDao.delete( (Schedule)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-medication-request-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "medication-request-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-abstract-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "abstract-types", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-consent-location.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "consent-location", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-activity-definition-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "activity-definition-category", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-search-entry-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "search-entry-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-repository-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "repository-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example-f004-tracheotomy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "f004", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-parameter-group.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "parameter-group", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-testscript-profile-origin-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "testscript-profile-origin-types", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-immunization-site.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "immunization-site", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-implementationguide-page.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "implementationguide-page", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/messageheader.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "MessageHeader", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-operation-parameter-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "operation-parameter-use", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-provider-taxonomy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "provider-taxonomy", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/substance-example-f203-potassium.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SubstanceHelper.fromJson(json);
  	 System.out.println("testing Substance " + count++);
  	 substanceDao.create((Substance)result);
  	 result = substanceDao.find(((Substance)result).getId());
  	 assertEquals("Expect ", "f203", ((Substance)result).getId());
  	 substanceDao.delete( (Substance)result);

  	 inputFile = "../../fhir-data/examples-json/cm-medication-admin-status-v3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-medication-admin-status-v3", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-basetype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-baseType", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-contact-point-system.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "contact-point-system", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-contract-action.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "contract-action", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/operation-resource-meta-delete.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Resource-meta-delete", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-map-source-list-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "map-source-list-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-vision-glasses-3tier.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "660152", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0327.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0327", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/enrollmentresponse-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EnrollmentResponseHelper.fromJson(json);
  	 System.out.println("testing EnrollmentResponse " + count++);
  	 enrollmentresponseDao.create((EnrollmentResponse)result);
  	 result = enrollmentresponseDao.find(((EnrollmentResponse)result).getId());
  	 assertEquals("Expect ", "ER2500", ((EnrollmentResponse)result).getId());
  	 enrollmentresponseDao.delete( (EnrollmentResponse)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-extensions-ValueSet-effective.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "valueset-extensions-ValueSet-effective", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0313.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0313", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/library-fhir-model-definition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LibraryHelper.fromJson(json);
  	 System.out.println("testing Library " + count++);
  	 libraryDao.create((Library)result);
  	 result = libraryDao.find(((Library)result).getId());
  	 assertEquals("Expect ", "library-fhir-model-definition", ((Library)result).getId());
  	 libraryDao.delete( (Library)result);

  	 inputFile = "../../fhir-data/examples-json/extension-valueset-keyword.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "valueset-keyWord", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example-f001-heart.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "f001", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-vision-eye-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "vision-eye-codes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "100150", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/extension-elementdefinition-inheritedextensiblevalueset.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "elementdefinition-inheritedExtensibleValueSet", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-extensions-CodeSystem-effective.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "codesystem-extensions-CodeSystem-effective", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-payeetype.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "payeetype", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/paymentreconciliation-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-measure-data-usage.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "measure-data-usage", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-allergyintolerance-substanceexposurerisk.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "allergyintolerance-substanceExposureRisk", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/chargeitem-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/contactdetail.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ContactDetail", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/appointmentresponse-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-request-priority.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "request-priority", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/processresponse.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "ProcessResponse", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-openehr-exposuredescription.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "openEHR-exposureDescription", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/specimen.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Specimen", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/cm-name-use-v2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-name-use-v2", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-benefit-subcategory.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "benefit-subcategory", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/compartmentdefinition.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "CompartmentDefinition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/capabilitystatement-base2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CapabilityStatementHelper.fromJson(json);
  	 System.out.println("testing CapabilityStatement " + count++);
  	 capabilitystatementDao.create((CapabilityStatement)result);
  	 result = capabilitystatementDao.find(((CapabilityStatement)result).getId());
  	 assertEquals("Expect ", "base2", ((CapabilityStatement)result).getId());
  	 capabilitystatementDao.delete( (CapabilityStatement)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-measurement-principle.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "measurement-principle", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-vaccination-protocol-dose-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "vaccination-protocol-dose-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerHelper.fromJson(json);
  	 System.out.println("testing Practitioner " + count++);
  	 practitionerDao.create((Practitioner)result);
  	 result = practitionerDao.find(((Practitioner)result).getId());
  	 assertEquals("Expect ", "example", ((Practitioner)result).getId());
  	 practitionerDao.delete( (Practitioner)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-event-capability-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "event-capability-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-endpoint-payload-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "endpoint-payload-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-timing-daysofcycle.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "timing-daysOfCycle", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/bmi-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-diagnosticreport-geneticsassessedcondition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "DiagnosticReport-geneticsAssessedCondition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-11179-de-classification-or-context.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "11179-de-classification-or-context", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/device-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequestexample2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx002", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-provenance-activity-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "provenance-activity-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-oral-contained-identifier.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "100155", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/encounter-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-questionnaire-item-control.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "questionnaire-item-control", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-medication-usualroute.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "medication-usualRoute", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-flag-code.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "flag-code", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-fm-conditions.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "fm-conditions", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/list-example-simple-empty.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = FHIRListHelper.fromJson(json);
  	 System.out.println("testing FHIRList " + count++);
  	 fhirlistDao.create((FHIRList)result);
  	 result = fhirlistDao.find(((FHIRList)result).getId());
  	 assertEquals("Expect ", "example-simple-empty", ((FHIRList)result).getId());
  	 fhirlistDao.delete( (FHIRList)result);

  	 inputFile = "../../fhir-data/examples-json/procedure-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureHelper.fromJson(json);
  	 System.out.println("testing Procedure " + count++);
  	 procedureDao.create((Procedure)result);
  	 result = procedureDao.find(((Procedure)result).getId());
  	 assertEquals("Expect ", "example", ((Procedure)result).getId());
  	 procedureDao.delete( (Procedure)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0302.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0302", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/bp-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-medication-dispense-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "medication-dispense-category", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministrationexample3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationAdministrationHelper.fromJson(json);
  	 System.out.println("testing MedicationAdministration " + count++);
  	 medicationadministrationDao.create((MedicationAdministration)result);
  	 result = medicationadministrationDao.find(((MedicationAdministration)result).getId());
  	 assertEquals("Expect ", "medadminexample03", ((MedicationAdministration)result).getId());
  	 medicationadministrationDao.delete( (MedicationAdministration)result);

  	 inputFile = "../../fhir-data/examples-json/cm-contact-point-system-v2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-contact-point-system-v2", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-questionnaire-answers.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "questionnaire-answers", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-supplyrequest-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "supplyrequest-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-professional.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "860150", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-contract-term-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "contract-term-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/plandefinition-exclusive-breastfeeding-intervention-03.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PlanDefinitionHelper.fromJson(json);
  	 System.out.println("testing PlanDefinition " + count++);
  	 plandefinitionDao.create((PlanDefinition)result);
  	 result = plandefinitionDao.find(((PlanDefinition)result).getId());
  	 assertEquals("Expect ", "exclusive-breastfeeding-intervention-03", ((PlanDefinition)result).getId());
  	 plandefinitionDao.delete( (PlanDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-history.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-history", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-map-input-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "map-input-mode", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-diagnostic-report-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "diagnostic-report-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/immunization-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ImmunizationHelper.fromJson(json);
  	 System.out.println("testing Immunization " + count++);
  	 immunizationDao.create((Immunization)result);
  	 result = immunizationDao.find(((Immunization)result).getId());
  	 assertEquals("Expect ", "example", ((Immunization)result).getId());
  	 immunizationDao.delete( (Immunization)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-metric-color.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "metric-color", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-animal-breeds.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "animal-breeds", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-process-priority.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "process-priority", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/schedule-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ScheduleHelper.fromJson(json);
  	 System.out.println("testing Schedule " + count++);
  	 scheduleDao.create((Schedule)result);
  	 result = scheduleDao.find(((Schedule)result).getId());
  	 assertEquals("Expect ", "example", ((Schedule)result).getId());
  	 scheduleDao.delete( (Schedule)result);

  	 inputFile = "../../fhir-data/examples-json/cm-administrative-gender-v3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "cm-administrative-gender-v3", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-delta.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-delta", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/operation-encounter-everything.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Encounter-everything", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-special-values.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "special-values", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/task-example3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = TaskHelper.fromJson(json);
  	 System.out.println("testing Task " + count++);
  	 taskDao.create((Task)result);
  	 result = taskDao.find(((Task)result).getId());
  	 assertEquals("Expect ", "example3", ((Task)result).getId());
  	 taskDao.delete( (Task)result);

  	 inputFile = "../../fhir-data/examples-json/triglyceride-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/domainresource.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "DomainResource", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-benefit-network.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "benefit-network", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/dataelement.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "DataElement", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-snomedct.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "snomedct", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/servicedefinition-infobutton.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ServiceDefinitionHelper.fromJson(json);
  	 System.out.println("testing ServiceDefinition " + count++);
  	 servicedefinitionDao.create((ServiceDefinition)result);
  	 result = servicedefinitionDao.find(((ServiceDefinition)result).getId());
  	 assertEquals("Expect ", "infobutton", ((ServiceDefinition)result).getId());
  	 servicedefinitionDao.delete( (ServiceDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0312.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0312", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/extension-observation-geneticsallelicfrequency.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "observation-geneticsAllelicFrequency", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/detectedissue-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DetectedIssueHelper.fromJson(json);
  	 System.out.println("testing DetectedIssue " + count++);
  	 detectedissueDao.create((DetectedIssue)result);
  	 result = detectedissueDao.find(((DetectedIssue)result).getId());
  	 assertEquals("Expect ", "ddi", ((DetectedIssue)result).getId());
  	 detectedissueDao.delete( (DetectedIssue)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-process-outcome.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "process-outcome", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/supplydelivery-example-pumpdelivery.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SupplyDeliveryHelper.fromJson(json);
  	 System.out.println("testing SupplyDelivery " + count++);
  	 supplydeliveryDao.create((SupplyDelivery)result);
  	 result = supplydeliveryDao.find(((SupplyDelivery)result).getId());
  	 assertEquals("Expect ", "pumpdelivery", ((SupplyDelivery)result).getId());
  	 supplydeliveryDao.delete( (SupplyDelivery)result);

  	 inputFile = "../../fhir-data/examples-json/media.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Media", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-mbp.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "mbp", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-assert-operator-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "assert-operator-codes", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-micro1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DiagnosticReportHelper.fromJson(json);
  	 System.out.println("testing DiagnosticReport " + count++);
  	 diagnosticreportDao.create((DiagnosticReport)result);
  	 result = diagnosticreportDao.find(((DiagnosticReport)result).getId());
  	 assertEquals("Expect ", "micro", ((DiagnosticReport)result).getId());
  	 diagnosticreportDao.delete( (DiagnosticReport)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-encounter-special-courtesy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "encounter-special-courtesy", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-reason-medication-given-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "reason-medication-given-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/substance-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/audit-event-example-login.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AuditEventHelper.fromJson(json);
  	 System.out.println("testing AuditEvent " + count++);
  	 auditeventDao.create((AuditEvent)result);
  	 result = auditeventDao.find(((AuditEvent)result).getId());
  	 assertEquals("Expect ", "example-login", ((AuditEvent)result).getId());
  	 auditeventDao.delete( (AuditEvent)result);

  	 inputFile = "../../fhir-data/examples-json/operation-observation-lastn.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Observation-lastn", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/flag-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = FlagHelper.fromJson(json);
  	 System.out.println("testing Flag " + count++);
  	 flagDao.create((Flag)result);
  	 result = flagDao.find(((Flag)result).getId());
  	 assertEquals("Expect ", "example", ((Flag)result).getId());
  	 flagDao.delete( (Flag)result);

  	 inputFile = "../../fhir-data/examples-json/extension-11179-permitted-value-valueset.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "11179-permitted-value-valueset", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/diagnosticreport-example-papsmear.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DiagnosticReportHelper.fromJson(json);
  	 System.out.println("testing DiagnosticReport " + count++);
  	 diagnosticreportDao.create((DiagnosticReport)result);
  	 result = diagnosticreportDao.find(((DiagnosticReport)result).getId());
  	 assertEquals("Expect ", "pap", ((DiagnosticReport)result).getId());
  	 diagnosticreportDao.delete( (DiagnosticReport)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-body-site.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "body-site", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/shareablecodesystem.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "shareablecodesystem", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-audit-source-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "audit-source-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-structuredefinition-category.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "structuredefinition-category", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-versioning-policy.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "versioning-policy", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-vision-base-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "vision-base-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationrequest0318.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationRequestHelper.fromJson(json);
  	 System.out.println("testing MedicationRequest " + count++);
  	 medicationrequestDao.create((MedicationRequest)result);
  	 result = medicationrequestDao.find(((MedicationRequest)result).getId());
  	 assertEquals("Expect ", "medrx0318", ((MedicationRequest)result).getId());
  	 medicationrequestDao.delete( (MedicationRequest)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-graph-compartment-rule.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "graph-compartment-rule", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/pcd-example-notOrg.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ContractHelper.fromJson(json);
  	 System.out.println("testing Contract " + count++);
  	 contractDao.create((Contract)result);
  	 result = contractDao.find(((Contract)result).getId());
  	 assertEquals("Expect ", "pcd-example-notOrg", ((Contract)result).getId());
  	 contractDao.delete( (Contract)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-related-claim-relationship.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "related-claim-relationship", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-referencefilter.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-referenceFilter", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-communication-reasonnotperformed.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "communication-reasonNotPerformed", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/task-example4.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = TaskHelper.fromJson(json);
  	 System.out.println("testing Task " + count++);
  	 taskDao.create((Task)result);
  	 result = taskDao.find(((Task)result).getId());
  	 assertEquals("Expect ", "example4", ((Task)result).getId());
  	 taskDao.delete( (Task)result);

  	 inputFile = "../../fhir-data/examples-json/triglyceride.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "triglyceride", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/organization.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Organization", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-risk-probability.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "risk-probability", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/documentmanifest.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "DocumentManifest", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-approach-site-codes.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "approach-site-codes", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-compartment-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "compartment-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/basic-example2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BasicHelper.fromJson(json);
  	 System.out.println("testing Basic " + count++);
  	 basicDao.create((Basic)result);
  	 result = basicDao.find(((Basic)result).getId());
  	 assertEquals("Expect ", "classModel", ((Basic)result).getId());
  	 basicDao.delete( (Basic)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-data-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "data-types", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-birthplace.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "birthPlace", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-chargeitem-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "chargeitem-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-security-labels.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "security-labels", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-allowedresource.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-allowedResource", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/device-extensions-Device-din.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "device-extensions-Device-din", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/extension-codesystem-othername.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "codesystem-otherName", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/profiles-others.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = BundleHelper.fromJson(json);
  	 System.out.println("testing Bundle " + count++);
  	 bundleDao.create((Bundle)result);
  	 result = bundleDao.find(((Bundle)result).getId());
  	 assertEquals("Expect ", "profiles-others", ((Bundle)result).getId());
  	 bundleDao.delete( (Bundle)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration0312.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationAdministrationHelper.fromJson(json);
  	 System.out.println("testing MedicationAdministration " + count++);
  	 medicationadministrationDao.create((MedicationAdministration)result);
  	 result = medicationadministrationDao.find(((MedicationAdministration)result).getId());
  	 assertEquals("Expect ", "medadmin0312", ((MedicationAdministration)result).getId());
  	 medicationadministrationDao.delete( (MedicationAdministration)result);

  	 inputFile = "../../fhir-data/examples-json/organization-example-insurer.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OrganizationHelper.fromJson(json);
  	 System.out.println("testing Organization " + count++);
  	 organizationDao.create((Organization)result);
  	 result = organizationDao.find(((Organization)result).getId());
  	 assertEquals("Expect ", "2", ((Organization)result).getId());
  	 organizationDao.delete( (Organization)result);

  	 inputFile = "../../fhir-data/examples-json/sequence-graphic-example-5.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "graphic-example-5", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/detectedissue-example-lab.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = DetectedIssueHelper.fromJson(json);
  	 System.out.println("testing DetectedIssue " + count++);
  	 detectedissueDao.create((DetectedIssue)result);
  	 result = detectedissueDao.find(((DetectedIssue)result).getId());
  	 assertEquals("Expect ", "lab", ((DetectedIssue)result).getId());
  	 detectedissueDao.delete( (DetectedIssue)result);

  	 inputFile = "../../fhir-data/examples-json/list-example-familyhistory-genetics-profile-annie.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = FHIRListHelper.fromJson(json);
  	 System.out.println("testing FHIRList " + count++);
  	 fhirlistDao.create((FHIRList)result);
  	 result = fhirlistDao.find(((FHIRList)result).getId());
  	 assertEquals("Expect ", "prognosis", ((FHIRList)result).getId());
  	 fhirlistDao.delete( (FHIRList)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-adxp-careof.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-ADXP-careOf", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/patient-example-b.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "pat2", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/operation-activitydefinition-data-requirements.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "ActivityDefinition-data-requirements", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/patient.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Patient", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/conceptmap-example-2.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "example2", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-extensions-ValueSet-keyword.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SearchParameterHelper.fromJson(json);
  	 System.out.println("testing SearchParameter " + count++);
  	 searchparameterDao.create((SearchParameter)result);
  	 result = searchparameterDao.find(((SearchParameter)result).getId());
  	 assertEquals("Expect ", "valueset-extensions-ValueSet-keyword", ((SearchParameter)result).getId());
  	 searchparameterDao.delete( (SearchParameter)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-diagnosis-role.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "diagnosis-role", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-openehr-administration.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "openEHR-administration", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-http-verb.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "http-verb", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/consent-example-smartonfhir.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConsentHelper.fromJson(json);
  	 System.out.println("testing Consent " + count++);
  	 consentDao.create((Consent)result);
  	 result = consentDao.find(((Consent)result).getId());
  	 assertEquals("Expect ", "consent-example-smartonfhir", ((Consent)result).getId());
  	 consentDao.delete( (Consent)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample15.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "medexample015", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/extension-devicerequest-reasonrejected.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "devicerequest-reasonRejected", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationadministration0303.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationAdministrationHelper.fromJson(json);
  	 System.out.println("testing MedicationAdministration " + count++);
  	 medicationadministrationDao.create((MedicationAdministration)result);
  	 result = medicationadministrationDao.find(((MedicationAdministration)result).getId());
  	 assertEquals("Expect ", "medadmin0303", ((MedicationAdministration)result).getId());
  	 medicationadministrationDao.delete( (MedicationAdministration)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample0309.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "med0309", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-specimen-collection-priority.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "specimen-collection-priority", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-reference-version-rules.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "reference-version-rules", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-process-outcome.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "process-outcome", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/claim-example-vision-glasses.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ClaimHelper.fromJson(json);
  	 System.out.println("testing Claim " + count++);
  	 claimDao.create((Claim)result);
  	 result = claimDao.find(((Claim)result).getId());
  	 assertEquals("Expect ", "660151", ((Claim)result).getId());
  	 claimDao.delete( (Claim)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-discriminator-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "discriminator-type", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/dataelement-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/structuredefinition-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-condition-state.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "condition-state", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/instant.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "instant", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/sequence-example-fda.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = SequenceHelper.fromJson(json);
  	 System.out.println("testing Sequence " + count++);
  	 sequenceDao.create((Sequence)result);
  	 result = sequenceDao.find(((Sequence)result).getId());
  	 assertEquals("Expect ", "fda-example", ((Sequence)result).getId());
  	 sequenceDao.delete( (Sequence)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-benefit-term.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "benefit-term", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/patient-example-proband.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PatientHelper.fromJson(json);
  	 System.out.println("testing Patient " + count++);
  	 patientDao.create((Patient)result);
  	 result = patientDao.find(((Patient)result).getId());
  	 assertEquals("Expect ", "proband", ((Patient)result).getId());
  	 patientDao.delete( (Patient)result);

  	 inputFile = "../../fhir-data/examples-json/adverseevent-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = AdverseEventHelper.fromJson(json);
  	 System.out.println("testing AdverseEvent " + count++);
  	 adverseeventDao.create((AdverseEvent)result);
  	 result = adverseeventDao.find(((AdverseEvent)result).getId());
  	 assertEquals("Expect ", "example", ((AdverseEvent)result).getId());
  	 adverseeventDao.delete( (AdverseEvent)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-encounter-type.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "encounter-type", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/conceptmap-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ConceptMapHelper.fromJson(json);
  	 System.out.println("testing ConceptMap " + count++);
  	 conceptmapDao.create((ConceptMap)result);
  	 result = conceptmapDao.find(((ConceptMap)result).getId());
  	 assertEquals("Expect ", "101", ((ConceptMap)result).getId());
  	 conceptmapDao.delete( (ConceptMap)result);

  	 inputFile = "../../fhir-data/examples-json/extension-iso21090-en-qualifier.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "iso21090-EN-qualifier", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/extension-patient-interpreterrequired.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "patient-interpreterRequired", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/procedurerequest-example3.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ProcedureRequestHelper.fromJson(json);
  	 System.out.println("testing ProcedureRequest " + count++);
  	 procedurerequestDao.create((ProcedureRequest)result);
  	 result = procedurerequestDao.find(((ProcedureRequest)result).getId());
  	 assertEquals("Expect ", "do-not-turn", ((ProcedureRequest)result).getId());
  	 procedurerequestDao.delete( (ProcedureRequest)result);

  	 inputFile = "../../fhir-data/examples-json/observation-example-bmd.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ObservationHelper.fromJson(json);
  	 System.out.println("testing Observation " + count++);
  	 observationDao.create((Observation)result);
  	 result = observationDao.find(((Observation)result).getId());
  	 assertEquals("Expect ", "bmd", ((Observation)result).getId());
  	 observationDao.delete( (Observation)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-capability-statement-kind.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "capability-statement-kind", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-event-onbehalfof.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "event-OnBehalfOf", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-flag-priority.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "flag-priority", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/careplan-example-f002-lung.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CarePlanHelper.fromJson(json);
  	 System.out.println("testing CarePlan " + count++);
  	 careplanDao.create((CarePlan)result);
  	 result = careplanDao.find(((CarePlan)result).getId());
  	 assertEquals("Expect ", "f002", ((CarePlan)result).getId());
  	 careplanDao.delete( (CarePlan)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-claim-use.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "claim-use", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-conformance-expectation.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "conformance-expectation", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-event-definition.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "event-definition", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-condition-ver-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "condition-ver-status", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-action-condition-kind.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "action-condition-kind", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/encounter-example-f002-lung.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = EncounterHelper.fromJson(json);
  	 System.out.println("testing Encounter " + count++);
  	 encounterDao.create((Encounter)result);
  	 result = encounterDao.find(((Encounter)result).getId());
  	 assertEquals("Expect ", "f002", ((Encounter)result).getId());
  	 encounterDao.delete( (Encounter)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-guide-page-kind.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "guide-page-kind", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/extension-event-notdone.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "event-notDone", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-adverse-event-causality.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "adverse-event-causality", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/medicationexample1.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationHelper.fromJson(json);
  	 System.out.println("testing Medication " + count++);
  	 medicationDao.create((Medication)result);
  	 result = medicationDao.find(((Medication)result).getId());
  	 assertEquals("Expect ", "medicationexample1", ((Medication)result).getId());
  	 medicationDao.delete( (Medication)result);

  	 inputFile = "../../fhir-data/examples-json/person.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "Person", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-nhin-purposeofuse.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "nhin-purposeofuse", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/bundle-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-structure-definition-kind.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "structure-definition-kind", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/codesystem-common-tags.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CodeSystemHelper.fromJson(json);
  	 System.out.println("testing CodeSystem " + count++);
  	 codesystemDao.create((CodeSystem)result);
  	 result = codesystemDao.find(((CodeSystem)result).getId());
  	 assertEquals("Expect ", "common-tags", ((CodeSystem)result).getId());
  	 codesystemDao.delete( (CodeSystem)result);

  	 inputFile = "../../fhir-data/examples-json/extension-medicationstatement-prescriber.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "medicationstatement-Prescriber", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/operation-resource-meta.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = OperationDefinitionHelper.fromJson(json);
  	 System.out.println("testing OperationDefinition " + count++);
  	 operationdefinitionDao.create((OperationDefinition)result);
  	 result = operationdefinitionDao.find(((OperationDefinition)result).getId());
  	 assertEquals("Expect ", "Resource-meta", ((OperationDefinition)result).getId());
  	 operationdefinitionDao.delete( (OperationDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/library-predecessor-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = LibraryHelper.fromJson(json);
  	 System.out.println("testing Library " + count++);
  	 libraryDao.create((Library)result);
  	 result = libraryDao.find(((Library)result).getId());
  	 assertEquals("Expect ", "library-fhir-helpers-predecessor", ((Library)result).getId());
  	 libraryDao.delete( (Library)result);

  	 inputFile = "../../fhir-data/examples-json/practitioner-example-f201-ab.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = PractitionerHelper.fromJson(json);
  	 System.out.println("testing Practitioner " + count++);
  	 practitionerDao.create((Practitioner)result);
  	 result = practitionerDao.find(((Practitioner)result).getId());
  	 assertEquals("Expect ", "f201", ((Practitioner)result).getId());
  	 practitionerDao.delete( (Practitioner)result);

  	 inputFile = "../../fhir-data/examples-json/extension-11179-de-administrative-status.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "11179-de-administrative-status", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-testscript-profile-destination-types.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "testscript-profile-destination-types", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/valueset-restful-capability-mode.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = ValueSetHelper.fromJson(json);
  	 System.out.println("testing ValueSet " + count++);
  	 valuesetDao.create((ValueSet)result);
  	 result = valuesetDao.find(((ValueSet)result).getId());
  	 assertEquals("Expect ", "restful-capability-mode", ((ValueSet)result).getId());
  	 valuesetDao.delete( (ValueSet)result);

  	 inputFile = "../../fhir-data/examples-json/devicemetric-questionnaire.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = QuestionnaireHelper.fromJson(json);
  	 System.out.println("testing Questionnaire " + count++);
  	 questionnaireDao.create((Questionnaire)result);
  	 result = questionnaireDao.find(((Questionnaire)result).getId());
  	 assertEquals("Expect ", "qs1", ((Questionnaire)result).getId());
  	 questionnaireDao.delete( (Questionnaire)result);

  	 inputFile = "../../fhir-data/examples-json/capabilitystatement-phr-example.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = CapabilityStatementHelper.fromJson(json);
  	 System.out.println("testing CapabilityStatement " + count++);
  	 capabilitystatementDao.create((CapabilityStatement)result);
  	 result = capabilitystatementDao.find(((CapabilityStatement)result).getId());
  	 assertEquals("Expect ", "phr", ((CapabilityStatement)result).getId());
  	 capabilitystatementDao.delete( (CapabilityStatement)result);

  	 inputFile = "../../fhir-data/examples-json/extension-capabilitystatement-search-parameter-combination.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "capabilitystatement-search-parameter-combination", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/operationoutcome.profile.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "OperationOutcome", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);

  	 inputFile = "../../fhir-data/examples-json/medicationdispense0317.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = MedicationDispenseHelper.fromJson(json);
  	 System.out.println("testing MedicationDispense " + count++);
  	 medicationdispenseDao.create((MedicationDispense)result);
  	 result = medicationdispenseDao.find(((MedicationDispense)result).getId());
  	 assertEquals("Expect ", "meddisp0317", ((MedicationDispense)result).getId());
  	 medicationdispenseDao.delete( (MedicationDispense)result);

  	 inputFile = "../../fhir-data/examples-json/extension-questionnaire-supportlink.json";
  	 json = FileUtils.readFile2String(inputFile, Charset.defaultCharset());
  	 result = StructureDefinitionHelper.fromJson(json);
  	 System.out.println("testing StructureDefinition " + count++);
  	 structuredefinitionDao.create((StructureDefinition)result);
  	 result = structuredefinitionDao.find(((StructureDefinition)result).getId());
  	 assertEquals("Expect ", "questionnaire-supportLink", ((StructureDefinition)result).getId());
  	 structuredefinitionDao.delete( (StructureDefinition)result);
  	System.out.println("Total tests .. " + count);
  }
}